@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks

<MudGrid Spacing="10" Justify="Justify.Center">
    <MudVirtualize Items="sports" Context="categoryData">
        <MudItem xs="12">
            <MudStack Spacing="2">
                <MudText Color="Color.Primary" Typo="Typo.h2">
                    @categoryData.category
                </MudText>
                <MudDivider Class="mud-border-primary"/>
                <MudGrid>
                    <MudVirtualize Items="categoryData.sports" Context="sportData">
                        <MudItem xs="6" sm="4" md="3" lg="2">
                            <MudPaper Height="170px" Outlined Class="pa-3 mud-border-primary">
                                <MudText Typo="Typo.h3">@sportData.sport</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudVirtualize>
                </MudGrid>
            </MudStack>
        </MudItem>
    </MudVirtualize>
</MudGrid>

@code {
    // Get API URL
    private readonly string API_URL = APIService.palaro_2026_API;
    private List<vw_category_sub_categoryDTO>? sports;

    public class vw_category_sub_categoryDTO
    {
        public string? category { get; set; }
        public List<sportDTO_listDTO>? sports { get; set; }
    }
    public class sportDTO_listDTO
    {
        public string? sport { get; set; }
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await GetSportsList();
    }

    private async Task GetSportsList()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync(API_URL + "/api/vw_sports/categoryAndSportsList")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sports = await JsonSerializer.DeserializeAsync<List<vw_category_sub_categoryDTO>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
