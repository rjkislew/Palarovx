@inject ColorService ColorService
<MudToggleIconButton Disabled="ColorService.DisableBlue"
                     Toggled="ColorService.ToggledBlue"
                     ToggledChanged="@((bool _) => ColorService.ToggleColor("Blue"))"
                     Icon="@Icons.Material.Filled.Circle"
                     ToggledIcon="@Icons.Material.Filled.CheckCircle"
                     Size="Size.Small"
                     DropShadow="false"
                     Style="@($"color: {ColorService.BlueColor}")" />

<MudToggleIconButton Disabled="ColorService.DisableYellow"
                     Toggled="ColorService.ToggledYellow"
                     ToggledChanged="@((bool _) => ColorService.ToggleColor("Yellow"))"
                     Icon="@Icons.Material.Filled.Circle"
                     ToggledIcon="@Icons.Material.Filled.CheckCircle"
                     Size="Size.Small"
                     DropShadow="false"
                     Style="@($"color: {ColorService.YellowColor}")" />

<MudToggleIconButton Disabled="ColorService.DisableRed"
                     Toggled="ColorService.ToggledRed"
                     ToggledChanged="@((bool _) => ColorService.ToggleColor("Red"))"
                     Icon="@Icons.Material.Filled.Circle"
                     ToggledIcon="@Icons.Material.Filled.CheckCircle"
                     Size="Size.Small"
                     DropShadow="false"
                     Style="@($"color: {ColorService.RedColor}")" />

@code
{
    protected override void OnInitialized()
    {
        // Subscribe to changes from UserService and ColorService to trigger StateHasChanged
        ColorService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        ColorService.OnChange -= StateHasChanged;
    }
}