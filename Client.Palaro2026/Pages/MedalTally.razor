@page "/events/medal-tally"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudTable Items="_regionalMedalTallies" HorizontalScrollbar="true" Virtualize SortLabel="Sort by" Elevation="0" AllowUnsorted="false" Context="region">
        <ColGroup>
            <MudHidden Breakpoint="Breakpoint.Xs">
            <col style="width: 50%" />
            <col style="width: 10%" />
            <col style="width: 10%" />
            <col style="width: 10%" />
            <col style="width: 10%" />
            <col style="width: 10%" />
            </MudHidden>
        </ColGroup>
        <HeaderContent>
            <MudTh Style="text-indent: 25px">
                <MudTableSortLabel SortBy="new Func<MedalTallyDTO.RegionalMedalTally, object>(x=>x.Region!)">Region</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<MedalTallyDTO.RegionalMedalTally, object>(x=>x.Gold!)">
                    Gold
                </MudTableSortLabel>
            </MudTh>
            <MudTh Style="text-align: center; text-indent: 12px">
                <MudTableSortLabel SortBy="new Func<MedalTallyDTO.RegionalMedalTally, object>(x=>x.Silver!)">
                    Silver
                </MudTableSortLabel>
            </MudTh>
            <MudTh Style="text-align: center; text-indent: 12px">
                <MudTableSortLabel SortBy="new Func<MedalTallyDTO.RegionalMedalTally, object>(x=>x.Bronze!)">
                    Bronze
                </MudTableSortLabel>
            </MudTh>
            <MudTh Style="text-align: center; text-indent: 12px">
                <MudTableSortLabel SortBy="new Func<MedalTallyDTO.RegionalMedalTally, object>(x=>x.Total!)">
                    Total
                </MudTableSortLabel>
            </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Region">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudImage Height="50" Src="@($"media/regions/{region.Abbreviation}.webp")" />
                    <MudStack Spacing="0">
                        <MudText Style="font-weight: bold">@region.Abbreviation</MudText>
                        <MudText Typo="Typo.caption">@region.Region</MudText>
                    </MudStack>
                </MudStack>
            </MudTd>
            <MudTd DataLabel="Gold" Style="text-align:center">
                @if (region.Gold != 0)
                {
                    <MudText Style="@($"background-color: {Colors.Amber.Accent4}; border-radius: 50%; width: 40px; height: 40px;")" Typo="Typo.body2">@region.Gold</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2">-</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Silver" Style="text-align:center">
                @if (region.Silver != 0)
                {
                    <MudText Style="@($"background-color: {Colors.BlueGray.Lighten4}; border-radius: 50%; width: 40px; height: 40px;")" Typo="Typo.body2">@region.Silver</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2">-</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Bronze" Style="text-align:center">
                @if (region.Bronze != 0)
                {
                    <MudText Style="@($"background-color: {Colors.DeepOrange.Lighten1}; border-radius: 50%; width: 40px; height: 40px;")" Typo="Typo.body2">@region.Bronze</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2">-</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Total" Style="text-align:center">
                <MudText Typo="Typo.body2">@region.Total</MudText>
            </MudTd>
            <MudTd DataLabel=""><MudIconButton Href="@($"./regional-teams/{region.Abbreviation}-{region.Region}")" Icon="@Icons.Material.Filled.ArrowForward" /></MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>
<FooterComponent />
@code {
    private List<MedalTallyDTO.RegionalMedalTally>? _regionalMedalTallies;

    public class MedalTallyDTO
    {
        public class RegionalMedalTally
        {
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
            public int? Gold { get; set; }
            public int? Silver { get; set; }
            public int? Bronze { get; set; }
            public int? Total { get; set; }
        }
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await GetMedalTallyByRegionAsync();
    }

    private async Task GetMedalTallyByRegionAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/MedalTally";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _regionalMedalTallies = await JsonSerializer.DeserializeAsync<List<MedalTallyDTO.RegionalMedalTally>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
