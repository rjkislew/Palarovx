@page "/events/{EventStatus}/{ID}"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<PageTitle>
    @_eventDetail?.Sport - @_eventDetail?.Subcategory  (@_eventDetail?.EventStage) | PALARO 2026 - Agusan del Sur
</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <MudBreadcrumbs Style="font-size: 15px" Class="pa-0" Items="_items"></MudBreadcrumbs>
            <MudDivider />
        </MudItem>
        <MudItem xs="12">
            <MudStack>
                @if (_eventDetail?.OnStream != false)
                {
                    @if (!string.IsNullOrEmpty(ExtractYouTubeVideoId(_eventDetail?.StreamURL)))
                    {
                        <MudPaper Style="height: 80vh; display: flex; justify-content: center; align-items: center;" Class="mt-3">
                            <iframe class="rounded" src="@($"https://www.youtube.com/embed/{ExtractYouTubeVideoId(_eventDetail?.StreamURL)}?autoplay=1&mute=1")"
                                    frameborder="0" allow="autoplay; encrypted-media" allowfullscreen>
                            </iframe>
                        </MudPaper>
                    }
                    else
                    {
                        <MudText Class="mt-3">No stream available</MudText>
                    }
                }
                <MudStack>
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.h4" HtmlTag="h1">
                            @_eventDetail?.Sport - @_eventDetail?.Subcategory  (@_eventDetail?.EventStage)
                        </MudText>
                        <MudText Typo="Typo.caption">
                            Opposing teams:
                            <MudElement>
                                @{
                                    var teams = _eventDetail?.EventVersusList;
                                    if (teams != null)
                                    {
                                        int count = teams.Count;
                                        int index = 0;
                                        foreach (var team in teams)
                                        {
                                            @team.Region
                                            @if (++index < count)
                                            {
                                                @:,
                                            }
                                        }
                                    }
                                }
                            </MudElement>
                        </MudText>

                        <MudText Typo="Typo.caption">@_eventDetail?.Category • @_eventDetail?.Level • @_eventDetail?.Gender</MudText>
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudStack>
                <MudText Typo="Typo.h5">Scoreboard</MudText>
                <MudDivider />
                <MudGrid>
                    @if (_eventDetail?.EventStage == "Championship")
                    {
                        <MudVirtualize Items="@(_eventDetail?.EventVersusList?.OrderByDescending(e => int.TryParse(e.Score, out var score) ? score : int.MinValue).ToList())" Context="team">
                            <MudItem xs="6" md="4" lg="3">
                                <MudPaper Style="height: 100%" Class="scale-up-center">
                                    <MudStack AlignItems="AlignItems.Center" Class="pa-3 relative" Spacing="0" Style="height: 100%">
                                        <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Size="Size.Large" Class="absolute align-self-start" Style="@($"color: {GetMedalColor((_eventDetail?.EventVersusList?.OrderByDescending(e => int.TryParse(e.Score, out var score) ? score : int.MinValue).ToList().IndexOf(team)) ?? -1)}")" />
                                        <MudImage Src="@($"media/regions/{team.Abbreviation}.webp")" Height="70" />
                                        <MudText Style="font-weight: bold">@team.Abbreviation</MudText>
                                        <MudText Typo="Typo.caption">@team.Region</MudText>
                                        <MudText Style="font-family: 'Roboto Mono', monospace; font-size: 50px; font-weight: bold">
                                            @team.Score
                                        </MudText>
                                        <MudVirtualize Items="@team.EventVersusTeamPlayersList" Context="player">
                                            <MudChip T="string" Size="Size.Small" Variant="Variant.Text">@player.FirstName @player.LastName</MudChip>
                                        </MudVirtualize>
                                    </MudStack>
                                </MudPaper>
                            </MudItem>
                        </MudVirtualize>
                    }
                    else
                    {
                        <MudVirtualize Items="@_eventDetail?.EventVersusList" Context="team">
                            <MudItem xs="6" md="4" lg="3">
                                <MudPaper Style="height: 100%" Class="scale-up-center">
                                    <MudStack AlignItems="AlignItems.Center" Class="pa-3" Spacing="0" Justify="Justify.SpaceBetween" Style="height: 100%">
                                        <MudStack Spacing="0" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Style="height: 100%">
                                            <MudStack Spacing="2" AlignItems="AlignItems.Center">
                                                <MudImage Src="@($"media/regions/{team.Abbreviation}.webp")" Height="70" />
                                                <MudText Style="font-weight: bold; line-height: 1" Align="Align.Center">@team.Region</MudText>
                                                <MudText Typo="Typo.caption">@team.Abbreviation</MudText>
                                            </MudStack>
                                            <MudText Style="font-family: 'Roboto Mono', monospace; font-size: 50px; font-weight: bold">
                                                @team.Score
                                            </MudText>
                                        </MudStack>
                                        <MudStack>
                                            <MudVirtualize Items="@team.EventVersusTeamPlayersList" Context="player">
                                                <MudChip T="string" Size="Size.Small" Variant="Variant.Text">@player.FirstName @player.LastName</MudChip>
                                            </MudVirtualize>
                                        </MudStack>
                                    </MudStack>
                                </MudPaper>
                            </MudItem>
                        </MudVirtualize>
                    }
                </MudGrid>
            </MudStack>
        </MudItem>
        <MudItem xs="12" Class="mt-5">
            <MudText Typo="Typo.caption" Class="mt-3 text-wrap" Style="word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">
                #@_eventDetail?.Sport?.Replace(" ", "") #@_eventDetail?.Gender?.Replace(" ", "") #@_eventDetail?.Level?.Replace(" ", "") #@_eventDetail?.EventStage?.Replace(" ", "") #@_eventDetail?.Subcategory?.Replace(" ", "")
                <MudVirtualize Items="@_eventDetail?.EventVersusList" Context="teams">
                    #@teams.Region?.Replace(" ", "")-@teams.Abbreviation?.Replace(" ", "")
                    <MudVirtualize Items="@teams.EventVersusTeamPlayersList" Context="players">
                        #@players.FirstName?.Replace(" ", "")@players.LastName?.Replace(" ", "")
                    </MudVirtualize>
                </MudVirtualize>
            </MudText>
        </MudItem>
    </MudGrid>
</MudContainer>

<FooterComponent />

@code {

    [Parameter]
    public string? ID { get; set; }
    [Parameter]
    public string? EventStatus { get; set; }

    private EventsDTO.EventDetails.Event? _eventDetail;

    private List<BreadcrumbItem> _items = new();

    private bool _isLoaded;
    private bool _errorLoading;

    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public string? StreamTitle { get; set; }
                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                // public int? SchoolRegionID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                //

                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
    }

    private string? ExtractYouTubeVideoId(string? url)
    {
        if (string.IsNullOrWhiteSpace(url))
            return null;

        try
        {
            var uri = new Uri(url);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var videoId = query["v"]; // Extracts video ID from ?v=

            // Handles shortened or embedded URLs
            if (string.IsNullOrEmpty(videoId) && uri.Segments.Length > 1)
            {
                videoId = uri.Segments.Last().TrimEnd('/');
            }

            return videoId;
        }
        catch
        {
            return null; // Return null if the URL is invalid
        }
    }

    private string GetMedalColor(int index)
    {
        return index switch
        {
            0 => Colors.Amber.Accent4,   // First place (Gold)
            1 => Colors.BlueGray.Lighten4, // Second place (Silver)
            2 => Colors.DeepOrange.Lighten1, // Third place (Bronze)
            _ => "transparent" // Default color for others
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEventsAsync();

        _items = new List<BreadcrumbItem>
        {
            new("Home", href: "./"),
            new("Events", href: $"./events"),
            new($"{EventStatus}", href: $"./events/{EventStatus}"),
            new($"{_eventDetail?.Sport} - {_eventDetail?.Subcategory} ({_eventDetail?.EventStage})", href: null, disabled: true)
        };
    }

    private async Task GetEventsAsync()
    {
        string url = $"/Events/Details?id={ID}";
        _eventDetail = await apiService.GetSingleAsync<EventsDTO.EventDetails.Event>(url);
    }
}
