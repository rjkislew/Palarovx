@page "/sports/{Category}/{Sports}"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<PageTitle>@Sports, @Category Category | PALARO 2026 - Agusan del Sur</PageTitle>

<MudGrid Justify="Justify.Center">
    <!-- Header -->
    <MudItem xs="12">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.False">
            <MudPaper Height="300px" Square Elevation="0"
                      Style="@($"position: relative; overflow: hidden; background-image: url('media/sports/images/{Sports}.webp');  background-attachment: fixed; background-size: cover; background-position: center;")">

                <!-- Dark Overlay -->
                <MudStack Style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5);"></MudStack>

                <MudStack AlignItems="AlignItems.Center" Spacing="0" Justify="Justify.Center" Style="height: 100%; position: relative; z-index: 1;">
                    <MudImage ObjectFit="ObjectFit.Contain" Height="50" Src="@($"media/sports/icons/white/{Sports}.webp")" />
                    <MudText Typo="Typo.h1" HtmlTag="h2" Style="color: white">@Sports</MudText>
                    <MudText Style="color: white">@Category</MudText>
                </MudStack>

            </MudPaper>
        </MudContainer>
    </MudItem>
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudGrid>
                <MudItem xs="12">
                    <MudStack AlignItems="AlignItems.Center" Style="width: 100%">
                        <MudText Typo="Typo.body2">@_sportDescription</MudText>
                        <MudTabs KeepPanelsAlive Elevation="0" ApplyEffectsToContainer="true" PanelClass="pt-6" Centered Style="width: 100%">
                            @if (_sportSubcategories != null && _sportSubcategories.Any())
                            {
                                @foreach (var group in _sportSubcategories.GroupBy(s => s.SchoolLevelID))
                                {
                                    <MudTabPanel Style="text-transform: none" Text="@(group.Key == 1 ? "Elementary Level" : (group.Key == 2 ? "Secondary Level" : "SPED"))">

                                        <MudGrid>
                                            <!-- Male Categories -->
                                            <MudItem xs="12">
                                                <MudPaper Outlined Class="pa-5">
                                                    <MudStack Spacing="5">
                                                        @if (group.Any(s => s.SportGenderCategoryID == 1))
                                                        {
                                                            <MudStack Spacing="2">
                                                                <MudStack Row>
                                                                    <MudText>Male</MudText>
                                                                    <MudIcon Icon="@Icons.Material.Filled.Male" Color="Color.Info" />
                                                                </MudStack>
                                                                <MudDivider />
                                                                <MudStack Row Wrap="Wrap.Wrap" Spacing="0">
                                                                    @foreach (var subCategory in group.Where(s => s.SportGenderCategoryID == 1))
                                                                    {
                                                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">
                                                                            <MudStack Row AlignItems="AlignItems.Center">
                                                                                <MudText Color="Color.Info">•</MudText>
                                                                                @subCategory.Subcategory
                                                                            </MudStack>
                                                                        </MudChip>
                                                                    }
                                                                </MudStack>
                                                            </MudStack>
                                                        }

                                                        @if (group.Any(s => s.SportGenderCategoryID == 2))
                                                        {
                                                            <MudStack Spacing="2">
                                                                <MudStack Row>
                                                                    <MudText>Female</MudText>
                                                                    <MudIcon Icon="@Icons.Material.Filled.Female" Color="Color.Error" />
                                                                </MudStack>
                                                                <MudDivider />
                                                                <MudStack Row Wrap="Wrap.Wrap" Spacing="0">
                                                                    @foreach (var subCategory in group.Where(s => s.SportGenderCategoryID == 2))
                                                                    {
                                                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">
                                                                            <MudStack Row AlignItems="AlignItems.Center">
                                                                                <MudText Color="Color.Error">•</MudText>
                                                                                @subCategory.Subcategory
                                                                            </MudStack>
                                                                        </MudChip>
                                                                    }
                                                                </MudStack>
                                                            </MudStack>
                                                        }

                                                        @if (group.Any(s => s.SportGenderCategoryID != 1 && s.SportGenderCategoryID != 2))
                                                        {
                                                            <MudStack Spacing="2">
                                                                <MudStack Row>
                                                                    <MudText>Mixed</MudText>
                                                                    <MudStack Row Spacing="0">
                                                                        <MudIcon Icon="@Icons.Material.Filled.Male" Color="Color.Info" />
                                                                        <MudIcon Icon="@Icons.Material.Filled.Female" Color="Color.Error" />
                                                                    </MudStack>
                                                                </MudStack>
                                                                <MudDivider />
                                                                <MudStack Row Wrap="Wrap.Wrap" Spacing="0">
                                                                    @foreach (var subCategory in group.Where(s => s.SportGenderCategoryID != 1 && s.SportGenderCategoryID != 2))
                                                                    {
                                                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">
                                                                            <MudStack Row AlignItems="AlignItems.Center">
                                                                                <MudStack Row Spacing="0">
                                                                                    <MudText Color="Color.Info">•</MudText>
                                                                                    <MudText Color="Color.Error">•</MudText>
                                                                                </MudStack>
                                                                                @subCategory.Subcategory
                                                                            </MudStack>
                                                                        </MudChip>
                                                                    }
                                                                </MudStack>
                                                            </MudStack>
                                                        }
                                                    </MudStack>
                                                </MudPaper>
                                            </MudItem>
                                        </MudGrid>
                                    </MudTabPanel>
                                }
                            }
                            else
                            {
                                <MudText>No sports categories available.</MudText>
                            }
                        </MudTabs>
                    </MudStack>
                </MudItem>
                <MudItem xs="12">
                    @if (_eventDetails == null || !_eventDetails.Any())
                    {
                        <MudGrid>
                            @for (int i = 0; i < 3; i++)
                            {
                                <MudItem xs="12" sm="6" md="4">
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" />
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <MudGrid>
                            <MudVirtualize Items="_eventDetails" Context="eventDetail">
                                <MudItem xs="12" sm="6" md="4">
                                    <MudPaper Outlined Style="height: 100%" Class="hover-effect">
                                        @* Content *@
                                        <MudLink Href="@($"./events/{eventDetail.ID}")" Underline="Underline.None" Color="Color.Dark" Style="height: 100%; user-select: text; -webkit-user-drag: none;" draggable="auto">
                                            <MudStack Style="height: 100%" Spacing="0">

                                                @* Image *@
                                                @if (eventDetail.OnStream == true && eventDetail.IsFinished == false)
                                                {
                                                    <MudStack Class="relative">
                                                        <MudChip Icon="@Icons.Material.Filled.FiberManualRecord" T="string" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" Class="absolute ml-3 mt-3 animate-blink">
                                                            Live
                                                        </MudChip>
                                                        <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                                  Style="width: 100%; height: 250px"
                                                                  Class="rounded-t"
                                                                  ObjectFit="ObjectFit.Cover" />
                                                    </MudStack>
                                                }
                                                else if (eventDetail.OnStream == true && eventDetail.IsFinished == true)
                                                {
                                                    <MudStack Class="relative">
                                                        <MudChip Icon="@Icons.Material.Filled.PlayCircleFilled" T="string" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Class="absolute ml-3 mt-3">
                                                            Was Live
                                                        </MudChip>
                                                        <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                                  Style="width: 100%; height: 250px"
                                                                  Class="rounded-t"
                                                                  ObjectFit="ObjectFit.Cover" />
                                                    </MudStack>
                                                }
                                                else
                                                {
                                                    <MudStack Class="relative">
                                                        <MudChip Icon="@Icons.Material.Filled.CircleNotifications" T="string" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Style="z-index: 10" Class="absolute ml-3 mt-3">
                                                            Not on live
                                                        </MudChip>
                                                        <MudImage Src="@($"media/sports/icons/white/{eventDetail.Sport}.webp")"
                                                                  Style="width: 50px; height: 50px; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10"
                                                                  Class="rounded-t absolute "
                                                                  ObjectFit="ObjectFit.Cover" />
                                                        <MudStack Style="background-color: rgba(0,0,0,0.5); width: 100%; height: 250px" Class="rounded-t absolute" />
                                                        <MudImage Src="@($"media/sports/images/{eventDetail.Sport}.webp")"
                                                                  Style="width: 100%; height: 250px"
                                                                  Class="rounded-t"
                                                                  ObjectFit="ObjectFit.Cover" />
                                                    </MudStack>
                                                }

                                                @* Title *@
                                                @* Sport Details *@
                                                <MudStack Justify="Justify.SpaceBetween" Style="height: 100%" Class="pa-3">
                                                    <MudStack Spacing="0">
                                                        <MudText Style="font-weight: bold">@eventDetail.Subcategory</MudText>
                                                        <MudText Typo="Typo.caption">@eventDetail.EventStage ∙ @eventDetail.Sport</MudText><MudText Typo="Typo.caption">
                                                            @{
                                                                var eventDate = eventDetail.Date;
                                                                var displayDate = eventDate.HasValue
                                                                ? (eventDate.Value.Date == DateTime.Today ? "Today"
                                                                : eventDate.Value.Date == DateTime.Today.AddDays(1) ? "Tomorrow"
                                                                : eventDate.Value.ToString("dddd - MMMM d"))
                                                                : "No Date";

                                                                var displayTime = eventDetail.Time.HasValue
                                                                ? DateTime.Today.Add(eventDetail.Time.Value).ToString("hh:mm tt")
                                                                : "No Time";
                                                            }
                                                            @displayDate - @displayTime ∙ @eventDetail.Venue
                                                        </MudText>
                                                    </MudStack>

                                                    <MudText Typo="Typo.caption" Class="mt-3" Style="word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">
                                                        #@eventDetail.Category?.Replace(" ", "") #@eventDetail.Level?.Replace(" ", "") #@eventDetail.EventStage?.Replace(" ", "")
                                                        <MudElement>
                                                            #
                                                            @if (eventDetail.Gender == "Male")
                                                            {
                                                                <MudText Typo="Typo.caption">Male♂️</MudText>
                                                            }
                                                            else if (eventDetail.Gender == "Female")
                                                            {
                                                                <MudText Typo="Typo.caption">Female♀️</MudText>
                                                            }
                                                            else
                                                            {
                                                                <MudText Typo="Typo.caption">Mixed♂️♀️</MudText>
                                                            }
                                                        </MudElement>
                                                    </MudText>
                                                </MudStack>

                                                <!--<MudButton FullWidth Variant="Variant.Text" Size="Size.Small" Style="text-transform: none" DropShadow="false" Color="Color.Tertiary" Href="@($"https://www.google.com/maps/?q={eventDetail.Latitude},{eventDetail.Longitude}")" Target="_blank">Details</MudButton>-->
                                            </MudStack>
                                        </MudLink>
                                    </MudPaper>
                                </MudItem>
                            </MudVirtualize>
                        </MudGrid>
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>
<FooterComponent />

@code {
    private List<SportsDTO.SportSubcategories>? _sportSubcategories;
    private List<EventsDTO.EventDetails.Event>? _eventDetails;

    [Parameter]
    public string? Category { get; set; }

    [Parameter]
    public string? Sports { get; set; }

    private string? _sportDescription;
    private int? _selectedSportCategoryID;

    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }
    }

    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }

                //public int? SportSubcategoryID { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                //

                // public int? EventVenuesID { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                //

                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }


                // public int? StreamID { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                //

                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }

                //public string? UserID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                // public int? SchoolRegionID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                //

                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
    }


    private string GetThumbnailUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return string.Empty;

        if (url.Contains("youtube.com/watch?v="))
        {
            var videoId = url.Split("v=")[1].Split('&')[0];
            return $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg";
        }

        return "media/images/no-thumbnail-default.webp";
    }

    private string GetMedalColor(int index)
    {
        return index switch
        {
            0 => Colors.Amber.Accent4,   // First place (Gold)
            1 => Colors.BlueGray.Lighten4, // Second place (Silver)
            2 => Colors.DeepOrange.Lighten1, // Third place (Bronze)
            _ => "transparent" // Default color for others
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSportCategoriesAsync();
        await GetSportsAsync();
        await GetEventsAsync();
    }

    private async Task GetSportCategoriesAsync()
    {
        string url = $"/Sports/Categories?category={Category}";
        var sportCategories = await apiService.GetAsync<SportsDTO.SportCategories>(url);

        if (sportCategories != null)
        {
            var sportCategory = sportCategories.First();

            _selectedSportCategoryID = sportCategory.ID;
        }
    }

    private async Task GetSportsAsync()
    {
        string url = $"/Sports?sport={Sports}&sportCategoryID={_selectedSportCategoryID}";
        var sports = await apiService.GetAsync<SportsDTO.Sports>(url);

        if (sports != null)
        {
            var sport = sports.First();

            _sportDescription = sport.Description;

            await GetSportSubcategoriesAsync(sport.ID);
        }
    }

    private async Task GetSportSubcategoriesAsync(int sportID)
    {
        string url = $"/Sports/Subcategories?sportID={sportID}";
        _sportSubcategories = await apiService.GetAsync<SportsDTO.SportSubcategories>(url);
    }

    private async Task GetEventsAsync()
    {
        string url = $"/Events/Details?category={Category}&sport={Sports}";
        _eventDetails = await apiService.GetAsync<EventsDTO.EventDetails.Event>(url);
    }
}
