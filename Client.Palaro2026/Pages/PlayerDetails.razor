@page "/regional-teams/{Abbreviation}-{Region}/players/{FirstName}-{LastName}"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using Client.Palaro2026.Services
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>@($"{FirstName} {LastName} - {Region} ({Abbreviation}) | Palaro 2026")</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudStack Spacing="0">
                    <MudText Typo="Typo.h2">@Abbreviation</MudText>
                    <MudText Typo="Typo.subtitle1">@Region</MudText>
                </MudStack>
                <MudStack Row>
                    <MudImage Src="@($"https://palarongpambansa2026.com/attachments/media/regions/team_logo/{Region}.webp")" Height="100" />
                    <MudImage Src="@($"https://palarongpambansa2026.com/attachments/media/regions/region_logo/{Region}.webp")" Height="100" />
                </MudStack>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudBreadcrumbs Style="font-size: 15px" Class="pa-0" Items="_items"></MudBreadcrumbs>
            <MudDivider />
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.h2">@_profilePlayers?.FirstName @_profilePlayers?.LastName</MudText>
            <MudText><b>@_profilePlayers?.Sport</b> | @_profilePlayers?.Category</MudText>
            <MudText>@_profilePlayers?.Level</MudText>
            <MudText>@_profilePlayers?.School, @_profilePlayers?.Division</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudDivider />
        </MudItem>
        <MudItem xs="12">
    <MudGrid>
        <MudVirtualize Items="@_profilePlayers?.ProfilePlayerSportsList" Context="sport">
            <MudItem xs="6" md="4" lg="3">
                <MudPaper Outlined Style="height: 100%">
                    <MudStack Class="pa-3" Style="height: 100%" Justify="Justify.Center">
                        <MudStack Row Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.body2">
                                @sport.Subcategory |
                                <MudElement>
                                    @{
                                        string genderIcon = sport.Gender switch
                                        {
                                            "Male" => "♂️",
                                            "Female" => "♀️",
                                            _ => "♂️♀️"
                                        };
                                    }
                                    <MudText Typo="Typo.caption">@genderIcon</MudText>
                                </MudElement>
                            </MudText>
                            
                            @{
                                var matchingEvent = _events?
                                    .FirstOrDefault(e =>
                                        e.Subcategory == sport.Subcategory &&
                                        e.Gender == sport.Gender &&
                                        e.Level == _profilePlayers?.Level);

                                var regionRank = matchingEvent?.EventVersusList?
                                    .FirstOrDefault(x => x.Region == _profilePlayers?.Region)?.Rank;

                                    string medalColor = GetMedalColor(regionRank);
                            }

                            @if (!string.IsNullOrEmpty(regionRank))
                            {
                                <MudIcon Style="@($"color: {medalColor}")" Icon="@Icons.Material.Filled.WorkspacePremium" Size="Size.Large">
                                    Rank: @regionRank
                                </MudIcon>
                            } 
                            </MudStack>

                            <MudDivider />

                            @if (sport.ProfilePlayerSportCoachesList?.Count > 0)
                            {
                                <MudText Typo="Typo.caption">
                                    @(sport.ProfilePlayerSportCoachesList.Count == 1 ? "Coach:" : "Coaches:")
                                </MudText>

                                <MudStack Row Spacing="0" Wrap="Wrap.Wrap">
                                    <MudVirtualize Items="sport.ProfilePlayerSportCoachesList" Context="coach">
                                        <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small">
                                            @coach.CoachFirstName @coach.CoachLastName
                                        </MudChip>
                                    </MudVirtualize>
                                </MudStack>
                            }
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudVirtualize>
    </MudGrid>
</MudItem>


    </MudGrid>
</MudContainer>
<FooterComponent />

@code {
    /* ---------------------------
       Parameters, & Variables

       - stores parameters passed to the component - URL parameters
       - manages and stores and data coming from API calls

    --------------------------- */

    // parameters passed via URL
    [Parameter] public string? Region { get; set; }
    [Parameter] public string? Abbreviation { get; set; }
    [Parameter] public string? FirstName { get; set; }
    [Parameter] public string? LastName { get; set; }

    // variables to store data from API calls
    private ProfilesDTO.ProfilePlayersDetails.ProfilePlayers? _profilePlayers;
    private List<EventsDTO.EventDetails.Event>? _events;

    // Breadcrumb items for navigation
    private List<BreadcrumbItem> _items = new();

    // Method to determine medal color based on rank
    private string GetMedalColor(string? rank)
    {
        return rank switch
        {
            "Champion" => Colors.Amber.Accent4,               // Champion - Gold
            "First Runner-Up" => Colors.BlueGray.Lighten4,    // 1st Runner-Up - Silver
            "Second Runner-Up" => Colors.DeepOrange.Lighten1, // 2nd Runner-Up - Bronze
            _ => "transparent"
        };
    }


    /* ---------------------------
        Lifecycle Methods

        - methods that manage the component's lifecycle and state

    --------------------------- */

    // On component initialization, fetch player profile and events data
    protected override async Task OnInitializedAsync()
    {
        // Fetch player profile and events data
        await GetPlayersProfileAsync();
        await GetEventsAsync();

        // Set up breadcrumb items
        _items = new List<BreadcrumbItem>
        {
            new("Home", href: "./"),
            new("Regional Teams", href: "./regional-teams"),
            new($"{Region}", href: $"./regional-teams/{Abbreviation}-{Region}"),
            new("Players", href: $"./regional-teams/{Abbreviation}-{Region}/players"),
            new($"{FirstName} {LastName}", href: null, disabled: true)
        };
    }

    /* ---------------------------
       API Calls

       - methods for fetching data from APIs

    --------------------------- */

    // Fetch player profile details based on URL parameters
    private async Task GetPlayersProfileAsync()
    {
        string url = $"/Profiles/Player/Details?region={Region}&firstName={FirstName}&lastName={LastName}";
        _profilePlayers = await apiService.GetSingleAsync<ProfilesDTO.ProfilePlayersDetails.ProfilePlayers>(url);
    }

    // Fetch events associated with the player based on URL parameters
    private async Task GetEventsAsync()
    {
        string url = $"/Events/Details?region={Region}&firstName={FirstName}&lastName={LastName}&isFinished=true&eventStage=Championship";
        _events = await apiService.GetAsync<EventsDTO.EventDetails.Event>(url);
    }

    /* ---------------------------
       DTO Classes

       - Data Transfer Objects for handling API responses
       Note: Please refer to the API documentation for more details.

    --------------------------- */

    // DTO for Profiles
    public class ProfilesDTO
    {
        public class ProfilePlayersDetails
        {
            public class ProfilePlayers
            {
                public string? ID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
                public int? SchoolLevelID { get; set; }
                public string? Level { get; set; }
                public string? Division { get; set; }
                public int? RegionID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public string? Category { get; set; }
                public int? SportID { get; set; }
                public string? Sport { get; set; }
                public List<ProfilePlayerSports>? ProfilePlayerSportsList { get; set; }
            }

            public class ProfilePlayerSports
            {
                public int ProfilePlayerSportID { get; set; }
                public string? Gender { get; set; }
                public string? Subcategory { get; set; }
                public List<ProfilePlayerSportCoaches>? ProfilePlayerSportCoachesList { get; set; }
            }

            public class ProfilePlayerSportCoaches
            {
                public string? CoachFirstName { get; set; }
                public string? CoachLastName { get; set; }
            }
        }

        public class ProfilePlayers
        {
            public string? ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolID { get; set; }
            public int? SportID { get; set; }
        }
    }

    // DTO for Events
    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public string? StreamTitle { get; set; }
                public bool? IsFinished { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public string? Rank { get; set; }
                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
    }
}

