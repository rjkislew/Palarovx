@page "/regional-teams"

@using System.Text.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject APIService apiService
@inject HttpClient httpClient

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudStack Row Style="width: 100%" Justify="Justify.Center">
                <MudButton Size="Size.Large" Style="text-transform: none" Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Href="./events/medal-tally">Medal Tally</MudButton>
                <MudButton Size="Size.Large" Style="text-transform: none" Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Href="./regional-teams/billeting-quarters">Billeting Quarters</MudButton>
            </MudStack>
        </MudItem>
        <MudVirtualize Items="_schoolRegions" Context="region">
            <MudItem xs="6" sm="4" lg="3" xl="2">
                <MudLink Href="@($"./regional-teams/{region.Abbreviation}-{region.Region}")" Underline="Underline.None">
                    <MudPaper Style="height: 100%" Outlined Class="hover-effect">
                        <MudStack Class="pa-3" Style="height: 100%">
                            <MudImage Src="@($"media/regions/{region.Abbreviation}.webp")" />
                            <MudStack Spacing="0">
                                <MudText Align="Align.Center" Style="font-weight: bold">@region.Abbreviation</MudText>
                                <MudText Align="Align.Center" Typo="Typo.caption">@region.Region</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudLink>
            </MudItem>
        </MudVirtualize>
    </MudGrid>
</MudContainer>
<FooterComponent/>
@code {
    private List<SchoolsDTO.SchoolRegions>? _schoolRegions;

    public class SchoolsDTO
    {
        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await GetRegionsAsync();
    }

    private async Task GetRegionsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Regions";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolRegions = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.SchoolRegions>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
