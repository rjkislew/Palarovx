@page "/venues"
@using System.Text.Json
@inject IJSRuntime JSRuntime

<MudGrid Spacing="0">
    <MudItem xs="12" md="4" Style="z-index: 1; position: absolute">
        <MudPaper Class="ma-3" Elevation="0">
            <MudTabs Elevation="0" PanelClass="pa-3" Rounded>
                <MudTabPanel Style="text-transform:none" Icon="@Icons.Material.Filled.LocationOn" Text="Venues" >
                    <MudSelect Margin="Margin.Dense" Clearable T="string" Variant="Variant.Outlined"
                               Value="newLocation" AdornmentIcon="@Icons.Material.Filled.LocationOn"
                               ValueChanged="HandleLocationChange"
                               AdornmentColor="Color.Secondary" FullWidth Label="Venue"
                               AnchorOrigin="Origin.BottomCenter"
                               OnClearButtonClick="ClearSelection">
                        <MudVirtualize Items="venues" Context="venue">
                            <MudSelectItem T="string" Value="@venue.location">
                                <MudText Typo="Typo.body2">@venue.location</MudText>
                            </MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudStack id="map"
                  Style="width: 100%; height: calc(100vh - 64px); overflow: hidden">
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    private readonly string API_URL = APIService.palaro_2026_API;
    private string mapboxToken = MapBoxService.mapboxToken;
    private string? newLocation;
    private string? selectedLocation;
    private vw_venuesDTO? selectedVenue; // Changed to store the selected venue
    private List<vw_venuesDTO>? venues;

    // Ensure the vw_venuesDTO class matches your data structure
    public class vw_venuesDTO
    {
        public string? location { get; set; }
        public decimal? latitude { get; set; }
        public decimal? longitude { get; set; }
    }

    private async Task GetVenuesList()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync(API_URL + "/api/vw_venues/getVenueLocation")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            venues = await JsonSerializer.DeserializeAsync<List<vw_venuesDTO>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Method to clear the selection
    private async void ClearSelection()
    {
        newLocation = null; // Clear the newLocation
        selectedLocation = null; // Clear selectedLocation as well

        // Clear the route from the map via JS interop
        await JSRuntime.InvokeVoidAsync("clearRoute");

        // Center the map back to user location or default location
        await JSRuntime.InvokeVoidAsync("centerMap", null); // Pass null to center on the default location
    }

    // Method to handle location change
    private async Task HandleLocationChange(string? selectedValue)
    {
        // Ensure newLocation is not null or empty
        if (string.IsNullOrEmpty(selectedValue))
        {
            return;
        }

        newLocation = selectedValue;  // Update newLocation to the selected value
        selectedLocation = newLocation; // Optional: keep this if needed for other purposes

        // Find the selected venue from the venues list
        selectedVenue = venues?.FirstOrDefault(venue => venue.location == newLocation);

        if (selectedVenue != null && selectedVenue.latitude.HasValue && selectedVenue.longitude.HasValue)
        {
            // Call JavaScript to provide directions with coordinates
            await JSRuntime.InvokeVoidAsync("showDirections", new object[] {
                new double[] { (double)selectedVenue.longitude.Value, (double)selectedVenue.latitude.Value } // Destination coordinates
    });
        }
        else
        {
            Console.WriteLine("No matching venue found or invalid coordinates.");
        }
    }

    // Method to initialize the map on the first render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetVenuesList();
        if (firstRender)
        {
            // Initialize the map with venue data
            await JSRuntime.InvokeVoidAsync("initializeMap", "map", mapboxToken, venues);
        }
    }
}

