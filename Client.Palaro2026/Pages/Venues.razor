@page "/venues"
@page "/venues/@{Longitude:decimal},{Latitude:decimal}/{ID:int}/{Venue}, {Address}"

@using System.Text.Json
@using System.Text.RegularExpressions
@using System.Threading.Tasks
@using Client.Palaro2026.Services
@inject IJSRuntime JSRuntime
@inject APIService apiService
@inject HttpClient httpClient
@inject ThemeService themeService
@inject MapBoxService mapBoxService
@inject NavigationManager navigationManager

<PageTitle>Check event venues | PALARO 2026 - Agusan del Sur</PageTitle>

<MudContainer Gutters="false" MaxWidth="MaxWidth.False">
    <MudStack Style="width: 100%; height: calc(100vh - 64px);" Class="relative">
        <MudStack Class="px-3 responsive-width" Style="z-index: 1; position: absolute;">
            <MudPaper Outlined Class="py-2 px-3 mt-3">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                    <MudAutocomplete T="EventsDTO.EventVenues"
                                     CoerceText="true"
                                     Margin="Margin.Dense"
                                     Label="Venue" Value="SelectedVenue"
                                     HelperText="Search for Venue, Address, Sport Event"
                                     ValueChanged="async venue => {SelectedVenue = venue; await HandleLocationChange();}"
                                     SearchFunc="SearchVenuesAsync"
                                     ToStringFunc="@(v => v is null ? string.Empty : $"{v.Venue} ({v.Address})")"
                                     Clearable="true"
                                     AdornmentIcon="@Icons.Material.Filled.LocationOn"
                                     AdornmentColor="Color.Primary"
                                     OnClearButtonClick="ClearSelection"
                                     Variant="Variant.Outlined"
                                     ShowProgressIndicator="true">
                        <ItemTemplate Context="venue">
                            <MudText>@venue.Venue (@venue.Address)</MudText>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudStack>
            </MudPaper>
            @if (_events?.Any() == true && Venue is not null && _toggleEventView == true)
            {
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper Outlined>
                            <MudVirtualize Items="_events" Context="eventDetail">
                                @* Content *@
                                <MudLink Href="@($"./events/Ongoing/{eventDetail.ID}")" Underline="Underline.None" Color="Color.Dark" Style="height: 100%; user-select: text; -webkit-user-drag: none;" draggable="auto">
                                    <MudStack Style="height: 100%" Spacing="0">

                                        @* Image *@
                                        @if (eventDetail.OnStream == true && eventDetail.IsFinished == false)
                                        {
                                            <MudStack Class="relative">
                                                <MudChip Icon="@Icons.Material.Filled.FiberManualRecord" T="string" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" Class="absolute ml-3 mt-3 animate-blink">
                                                    Live
                                                </MudChip>
                                                <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                          Style="width: 100%; height: 250px"
                                                          Class="rounded-t"
                                                          ObjectFit="ObjectFit.Cover" />
                                            </MudStack>
                                        }
                                        else if (eventDetail.OnStream == true && eventDetail.IsFinished == true)
                                        {
                                            <MudStack Class="relative">
                                                <MudChip Icon="@Icons.Material.Filled.PlayCircleFilled" T="string" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Class="absolute ml-3 mt-3">
                                                    Was Live
                                                </MudChip>
                                                <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                          Style="width: 100%; height: 250px"
                                                          Class="rounded-t"
                                                          ObjectFit="ObjectFit.Cover" />
                                            </MudStack>
                                        }
                                        else
                                        {
                                            <MudStack Class="relative">
                                                <MudChip Icon="@Icons.Material.Filled.CircleNotifications" T="string" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Style="z-index: 10" Class="absolute ml-3 mt-3">
                                                    Not on live
                                                </MudChip>
                                                <MudImage Src="@($"media/sports/icons/white/{eventDetail.Sport}.webp")"
                                                          Style="width: 50px; height: 50px; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10"
                                                          Class="rounded-t absolute "
                                                          ObjectFit="ObjectFit.Cover" />
                                                <MudStack Style="background-color: rgba(0,0,0,0.5); width: 100%; height: 250px" Class="rounded-t absolute" />
                                                <MudImage Src="@($"media/sports/images/{eventDetail.Sport}.webp")"
                                                          Style="width: 100%; height: 250px"
                                                          Class="rounded-t"
                                                          ObjectFit="ObjectFit.Cover" />
                                            </MudStack>
                                        }

                                        @* Title *@
                                        @* Sport Details *@
                                        <MudStack Justify="Justify.SpaceBetween" Style="height: 100%" Class="pa-3">
                                            <MudStack Spacing="0">
                                                <MudText Style="font-weight: bold">@eventDetail.Subcategory</MudText>
                                                <MudText Typo="Typo.caption">@eventDetail.EventStage ∙ @eventDetail.Sport</MudText><MudText Typo="Typo.caption">
                                                    @{
                                                        var eventDate = eventDetail.Date;
                                                        var displayDate = eventDate.HasValue
                                                        ? (eventDate.Value.Date == DateTime.Today ? "Today"
                                                        : eventDate.Value.Date == DateTime.Today.AddDays(1) ? "Tomorrow"
                                                        : eventDate.Value.ToString("dddd - MMMM d"))
                                                        : "No Date";

                                                        var displayTime = eventDetail.Time.HasValue
                                                        ? DateTime.Today.Add(eventDetail.Time.Value).ToString("hh:mm tt")
                                                        : "No Time";
                                                    }
                                                    @displayDate - @displayTime ∙ @eventDetail.Venue
                                                </MudText>
                                            </MudStack>

                                            <MudField Label="Opposing Teams" Variant="Variant.Outlined" InnerPadding="false">
                                                <MudStack Class="py-2" Row Spacing="0">
                                                    <MudVirtualize Items="eventDetail.EventVersusList" Context="team">
                                                        <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small">@team.Region (@team.Abbreviation)</MudChip>
                                                    </MudVirtualize>
                                                </MudStack>
                                            </MudField>

                                            <MudText Typo="Typo.caption" Class="mt-3" Style="word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">
                                                #@eventDetail.Category?.Replace(" ", "") #@eventDetail.Level?.Replace(" ", "") #@eventDetail.EventStage?.Replace(" ", "")
                                                <MudElement>
                                                    @if (eventDetail.Gender == "Male")
                                                    {
                                                        <MudText Typo="Typo.caption">#Male♂️</MudText>
                                                    }
                                                    else if (eventDetail.Gender == "Female")
                                                    {
                                                        <MudText Typo="Typo.caption">#Female♀️</MudText>
                                                    }
                                                    else
                                                    {
                                                        <MudText Typo="Typo.caption">#Mixed♂️♀️</MudText>
                                                    }
                                                </MudElement>
                                            </MudText>
                                        </MudStack>

                                        <!--<MudButton FullWidth Variant="Variant.Text" Size="Size.Small" Style="text-transform: none" DropShadow="false" Color="Color.Tertiary" Href="@($"https://www.google.com/maps/?q={eventDetail.Latitude},{eventDetail.Longitude}")" Target="_blank">Details</MudButton>-->
                                    </MudStack>
                                </MudLink>
                            </MudVirtualize>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            }

            @if (_events?.Any() == true && Venue is not null)
            {
                <MudStack Row Justify="Justify.FlexEnd" Style="width: 100%">
                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@(_toggleEventView == true ? @Icons.Material.Filled.ArrowUpward : @Icons.Material.Filled.ArrowDownward)" OnClick="toggleSelectedLocationView" />
                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.FmdGood" OnClick="() => FlyToLocation(Longitude, Latitude)" />
                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.OpenInFull" OnClick="SetAndFitBounds" />
                </MudStack>
            }
            else if (Venue is not null)
            {
                <MudStack Row Justify="Justify.FlexEnd" Style="width: 100%">
                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.FmdGood" OnClick="() => FlyToLocation(Longitude, Latitude)" />
                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.OpenInFull" OnClick="SetAndFitBounds" />
                </MudStack>
            }
        </MudStack>
        @if (!string.IsNullOrEmpty(qrCodeBase64))
        {
            <MudStack Spacing="0" AlignItems="AlignItems.Center" Class="absolute z-10 mb-7" Style="left: 0; bottom: 0;">
                <MudText Style="font-size: 10px">QR to this page</MudText>
                <MudImage Src="@qrCodeBase64" alt="QR Code" style="height:100px;" />
                <MudElement HtmlTag="a" href="@qrCodeBase64" download="@fileName">
                    <MudButton Size="Size.Small">Download</MudButton>
                </MudElement>
            </MudStack>
        }
        <MudStack id="map" Class="absolute" Style="width: 100%; height: 100%; overflow: hidden" />
    </MudStack>
</MudContainer>

@code {
    // ------------------------------
    // Parameters
    // ------------------------------
    [Parameter] public decimal Longitude { get; set; }
    [Parameter] public decimal Latitude { get; set; }
    [Parameter] public int ID { get; set; }
    [Parameter] public string? Venue { get; set; }
    [Parameter] public string? Address { get; set; }

    // ------------------------------
    // Fields and Properties
    // ------------------------------
    public EventsDTO.EventVenues? SelectedVenue { get; set; }

    private List<EventsDTO.EventVenues>? _venues;
    private List<EventsDTO.EventDetails.Event>? _events;

    private bool? _toggleEventView = true;

    private DotNetObjectReference<Venues>? objRef;
    string? qrCodeBase64;
    string? fileName;

    // ------------------------------
    // Lifecycle Methods
    // ------------------------------
    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
        _ = JSRuntime.InvokeVoidAsync("registerDotNetReference", objRef);
    }

    protected override async Task OnInitializedAsync()
    {
        themeService.OnThemeChanged += StateHasChanged;
        await themeService.LoadThemePreference();

        await GetVenuesAsync();
        SelectedVenue = _venues?.FirstOrDefault(v => v.ID == ID);

        await JSRuntime.InvokeVoidAsync("initializeMap", "map", mapBoxService.MapboxToken, _venues, themeService.IsDarkMode);

        await Task.Delay(2000);

        await HandleLocationChange();

        navigationManager.LocationChanged += OnLocationChanged;

        GenerateQRCode(navigationManager.Uri);

        await JSRuntime.InvokeVoidAsync("setUserLocationFromGeolocation");
    }

    public void Dispose()
    {
        if (objRef != null)
        {
            objRef.Dispose();
            objRef = null;
        }
        navigationManager.LocationChanged -= OnLocationChanged;
    }

    // ------------------------------
    // JS Invokable Method
    // ------------------------------
    [JSInvokable]
    public async Task OnCoordinateSelected(int id)
    {
        // Set the selected venue by matching the marker ID
        SelectedVenue = _venues?.FirstOrDefault(v => v.ID == id);

        if (SelectedVenue != null)
        {
            await HandleLocationChange();
        }

        StateHasChanged();
    }


    // ------------------------------
    // Navigation and Location Logic
    // ------------------------------
    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        GenerateQRCode(e.Location);
        StateHasChanged();
    }

    private async Task HandleLocationChange()
    {
        _events = null;
        _toggleEventView = true;

        if (SelectedVenue is not null && SelectedVenue.Longitude.HasValue && SelectedVenue.Latitude.HasValue)
        {
            await JSRuntime.InvokeVoidAsync("showDirections", new object?[] {
                new decimal?[] { SelectedVenue.Longitude, SelectedVenue.Latitude }
            });

            var url = string.IsNullOrWhiteSpace(SelectedVenue.Venue)
                ? "./venues"
                : $"./venues/@{SelectedVenue.Longitude},{SelectedVenue.Latitude}/{SelectedVenue.ID}/{SelectedVenue.Venue}, {SelectedVenue.Address}";

            navigationManager.NavigateTo(url);
        }

        await GetEventsAsync();
    }

    private async Task FlyToLocation(decimal? lng, decimal? lat)
    {
        await JSRuntime.InvokeVoidAsync("flyToLocation", lng, lat);
    }

    private async Task SetAndFitBounds()
    {
        await JSRuntime.InvokeVoidAsync("setSelectedLocation", Longitude, Latitude);
        await JSRuntime.InvokeVoidAsync("fitUserAndSelectedBounds");
    }

    private void toggleSelectedLocationView()
    {
        _toggleEventView = !_toggleEventView;
    }

    // ------------------------------
    // Venue and Event Data
    // ------------------------------
    private async Task GetVenuesAsync()
    {
        string url = "/Events/Venues";
        var eventVenuesData = await apiService.GetAsync<EventsDTO.EventVenues>(url);

        _venues = eventVenuesData?
            .OrderBy(v => v.Address ?? string.Empty)
            .ToList();
    }

    private async Task GetEventsAsync()
    {
        string url = $"/Events/Details?venue={SelectedVenue?.Venue}&isFinished=false";
        _events = await apiService.GetAsync<EventsDTO.EventDetails.Event>(url);
    }

    private async Task<IEnumerable<EventsDTO.EventVenues>> SearchVenuesAsync(string value, CancellationToken token)
    {
        await Task.Delay(100); // simulate delay

        if (string.IsNullOrWhiteSpace(value))
            return _venues ?? Enumerable.Empty<EventsDTO.EventVenues>();

        return _venues?
        .Where(e =>
            (!string.IsNullOrWhiteSpace(e.Venue) && e.Venue.Contains(value, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrWhiteSpace(e.Address) && e.Address.Contains(value, StringComparison.OrdinalIgnoreCase))
        )
        .ToList()
        ?? Enumerable.Empty<EventsDTO.EventVenues>();
    }

    private async Task ClearSelection()
    {
        SelectedVenue = null;

        navigationManager.NavigateTo("./venues");
        await JSRuntime.InvokeVoidAsync("clearRoute");
        await JSRuntime.InvokeVoidAsync("centerMap", null);
    }

    // ------------------------------
    // QR Code Generation
    // ------------------------------
    private void GenerateQRCode(string url)
    {
        qrCodeBase64 = GenerateQrCodeBase64(url);

        var uri = new Uri(navigationManager.ToAbsoluteUri(url).ToString());
        var path = uri.AbsolutePath.Trim('/').Replace("/", "-");

        if (string.IsNullOrWhiteSpace(path))
            path = "homepage";

        fileName = $"qr-code-{path}.png";
    }

    private string GenerateQrCodeBase64(string text)
    {
        using var qrGenerator = new QRCoder.QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(text, QRCoder.QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new QRCoder.PngByteQRCode(qrCodeData);
        byte[] qrCodeBytes = qrCode.GetGraphic(20);

        return $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
    }

    private string GetThumbnailUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return string.Empty;

        if (url.Contains("youtube.com/watch?v="))
        {
            var videoId = url.Split("v=")[1].Split('&')[0];
            return $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg";
        }

        return "media/images/no-thumbnail-default.webp";
    }

    // ------------------------------
    // DTO Classes
    // ------------------------------
    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }

                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }

                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }

                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }

                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }

                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }

                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }

        public class EventVenues
        {
            public int ID { get; set; }
            public string? Address { get; set; }
            public string? Venue { get; set; }
            public decimal? Latitude { get; set; }
            public decimal? Longitude { get; set; }
        }
    }
}
