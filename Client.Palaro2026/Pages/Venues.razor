@page "/venues"
@page "/venues/@{SelectedLongitude:decimal},{SelectedLatitude:decimal}/{SelectedID:int}/{SelectedVenue}, {SelectedAddress}"

@using System.Text.Json
@using System.Text.RegularExpressions
@using System.Threading.Tasks
@using Client.Palaro2026.Services
@inject IJSRuntime JSRuntime
@inject APIService apiService
@inject HttpClient httpClient
@inject ThemeService themeService
@inject MapBoxService mapBoxService
@inject NavigationManager Navigation

<PageTitle>Check event venues | PALARO 2026 - Agusan del Sur</PageTitle>

<MudContainer Gutters="false" MaxWidth="MaxWidth.False">
    <MudStack Class="px-3 responsive-width" Style="z-index: 1; position: absolute;">
        <MudPaper Outlined Class="py-2 px-3 mt-3">
            <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                <MudSelect Margin="Margin.Dense" Clearable T="int?" Variant="Variant.Outlined"
                           @bind-Value="triggerSelectLocation"
                           FullWidth Label="Venue"
                           OnClearButtonClick="ClearSelection"
                           Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.LocationOn" AdornmentColor="Color.Primary">
                    <MudVirtualize Items="_venues" Context="venue">
                        <MudSelectItem T="int?" Value="@venue.ID">
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.body2" Style="line-height: 1.3;">
                                    @venue.Venue,
                                    <MudElement>
                                        <MudText Typo="Typo.caption">
                                            @venue.Address
                                        </MudText>
                                    </MudElement>
                                </MudText>
                            </MudStack>
                        </MudSelectItem>
                    </MudVirtualize>
                </MudSelect>
            </MudStack>
        </MudPaper>
        @if (_events?.Any() == true && !string.IsNullOrEmpty(SelectedVenue) && _toggleEventView == true)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Outlined>
                        <MudVirtualize Items="_events" Context="eventDetail">
                            @* Content *@
                            <MudLink Href="@($"./events/Ongoing/{eventDetail.ID}")" Underline="Underline.None" Color="Color.Dark" Style="height: 100%; user-select: text; -webkit-user-drag: none;" draggable="auto">
                                <MudStack Style="height: 100%" Spacing="0">

                                    @* Image *@
                                    @if (eventDetail.OnStream == true && eventDetail.IsFinished == false)
                                    {
                                        <MudStack Class="relative">
                                            <MudChip Icon="@Icons.Material.Filled.FiberManualRecord" T="string" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" Class="absolute ml-3 mt-3 animate-blink">
                                                Live
                                            </MudChip>
                                            <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                      Style="width: 100%; height: 250px"
                                                      Class="rounded-t"
                                                      ObjectFit="ObjectFit.Cover" />
                                        </MudStack>
                                    }
                                    else if (eventDetail.OnStream == true && eventDetail.IsFinished == true)
                                    {
                                        <MudStack Class="relative">
                                            <MudChip Icon="@Icons.Material.Filled.PlayCircleFilled" T="string" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Class="absolute ml-3 mt-3">
                                                Was Live
                                            </MudChip>
                                            <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                      Style="width: 100%; height: 250px"
                                                      Class="rounded-t"
                                                      ObjectFit="ObjectFit.Cover" />
                                        </MudStack>
                                    }
                                    else
                                    {
                                        <MudStack Class="relative">
                                            <MudChip Icon="@Icons.Material.Filled.CircleNotifications" T="string" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Style="z-index: 10" Class="absolute ml-3 mt-3">
                                                Not on live
                                            </MudChip>
                                            <MudImage Src="@($"media/sports/icons/white/{eventDetail.Sport}.webp")"
                                                      Style="width: 50px; height: 50px; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10"
                                                      Class="rounded-t absolute "
                                                      ObjectFit="ObjectFit.Cover" />
                                            <MudStack Style="background-color: rgba(0,0,0,0.5); width: 100%; height: 250px" Class="rounded-t absolute" />
                                            <MudImage Src="@($"media/sports/images/{eventDetail.Sport}.webp")"
                                                      Style="width: 100%; height: 250px"
                                                      Class="rounded-t"
                                                      ObjectFit="ObjectFit.Cover" />
                                        </MudStack>
                                    }

                                    @* Title *@
                                    @* Sport Details *@
                                    <MudStack Justify="Justify.SpaceBetween" Style="height: 100%" Class="pa-3">
                                        <MudStack Spacing="0">
                                            <MudText Style="font-weight: bold">@eventDetail.Subcategory</MudText>
                                            <MudText Typo="Typo.caption">@eventDetail.EventStage ∙ @eventDetail.Sport</MudText><MudText Typo="Typo.caption">
                                                @{
                                                    var eventDate = eventDetail.Date;
                                                    var displayDate = eventDate.HasValue
                                                    ? (eventDate.Value.Date == DateTime.Today ? "Today"
                                                    : eventDate.Value.Date == DateTime.Today.AddDays(1) ? "Tomorrow"
                                                    : eventDate.Value.ToString("dddd - MMMM d"))
                                                    : "No Date";

                                                    var displayTime = eventDetail.Time.HasValue
                                                    ? DateTime.Today.Add(eventDetail.Time.Value).ToString("hh:mm tt")
                                                    : "No Time";
                                                }
                                                @displayDate - @displayTime ∙ @eventDetail.Venue
                                            </MudText>
                                        </MudStack>

                                        <MudField Label="Opposing Teams" Variant="Variant.Outlined" InnerPadding="false">
                                            <MudStack Class="py-2" Row Spacing="0">
                                                <MudVirtualize Items="eventDetail.EventVersusList" Context="team">
                                                    <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small">@team.Region (@team.Abbreviation)</MudChip>
                                                </MudVirtualize>
                                            </MudStack>
                                        </MudField>

                                        <MudText Typo="Typo.caption" Class="mt-3" Style="word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">
                                            #@eventDetail.Category?.Replace(" ", "") #@eventDetail.Level?.Replace(" ", "") #@eventDetail.EventStage?.Replace(" ", "")
                                            <MudElement>
                                                @if (eventDetail.Gender == "Male")
                                                {
                                                    <MudText Typo="Typo.caption">#Male♂️</MudText>
                                                }
                                                else if (eventDetail.Gender == "Female")
                                                {
                                                    <MudText Typo="Typo.caption">#Female♀️</MudText>
                                                }
                                                else
                                                {
                                                    <MudText Typo="Typo.caption">#Mixed♂️♀️</MudText>
                                                }
                                            </MudElement>
                                        </MudText>
                                    </MudStack>

                                    <!--<MudButton FullWidth Variant="Variant.Text" Size="Size.Small" Style="text-transform: none" DropShadow="false" Color="Color.Tertiary" Href="@($"https://www.google.com/maps/?q={eventDetail.Latitude},{eventDetail.Longitude}")" Target="_blank">Details</MudButton>-->
                                </MudStack>
                            </MudLink>
                        </MudVirtualize>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
        @if (_events?.Any() == true && !string.IsNullOrEmpty(SelectedVenue))
        {
            <MudStack Row Justify="Justify.FlexEnd" Style="width: 100%">
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@(_toggleEventView == true ? @Icons.Material.Filled.ArrowUpward : @Icons.Material.Filled.ArrowDownward)" OnClick="toggleSelectedLocationView" />
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.FmdGood" OnClick="() => FlyToLocation(SelectedLongitude, SelectedLatitude)" />
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.OpenInFull" OnClick="SetAndFitBounds" />
            </MudStack>
        }
        else if (!string.IsNullOrEmpty(SelectedVenue))
        {
            <MudStack Row Justify="Justify.FlexEnd" Style="width: 100%">
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.FmdGood" OnClick="() => FlyToLocation(SelectedLongitude, SelectedLatitude)" />
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.OpenInFull" OnClick="SetAndFitBounds" />
            </MudStack>
        }
    </MudStack>
    <MudStack id="map"
              Style="width: 100%; height: calc(100vh - 64px); overflow: hidden">
    </MudStack>
</MudContainer>

@code {
    [Parameter]
    public string? SelectedVenue { get; set; } = null!;
    [Parameter]
    public string? SelectedAddress { get; set; } = null!;
    [Parameter]
    public int SelectedID { get; set; }
    [Parameter]
    public decimal? SelectedLongitude { get; set; } = null!;
    [Parameter]
    public decimal? SelectedLatitude { get; set; } = null!;

    private bool? _toggleEventView = true;

    private int? triggerSelectLocation
    {
        get => _selectedVenue?.ID;
        set
        {
            if (value.HasValue)
            {
                var venue = _venues?.FirstOrDefault(v => v.ID == value.Value);
                if (venue != null && venue.Longitude.HasValue && venue.Latitude.HasValue)
                {
                    _selectedVenue = venue;
                    SelectedVenue = venue.Venue;
                    SelectedAddress = venue.Address;
                    SelectedLongitude = venue.Longitude;
                    SelectedLatitude = venue.Latitude;
                    SelectedID = venue.ID;

                    _ = HandleLocationChange(SelectedVenue, SelectedAddress, SelectedID, SelectedLongitude, SelectedLatitude);
                    // Clear stored value to avoid re-processing same ID again
                    triggerSelectLocation = null;  // Clear backing field directly to avoid recursion
                    StateHasChanged();
                }
            }
        }
    }

    private DotNetObjectReference<Venues>? objRef;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
        _ = JSRuntime.InvokeVoidAsync("registerDotNetReference", objRef);
    }

    [JSInvokable]
    public void OnCoordinateSelected(int id)
    {
        // This will trigger your setter and location logic
        triggerSelectLocation = id;
        StateHasChanged();
    }

    public void Dispose()
    {
        if (objRef != null)
        {
            objRef.Dispose();
            objRef = null;
        }
    }

    private EventsDTO.EventVenues? _selectedVenue;
    private List<EventsDTO.EventVenues>? _venues;
    private List<EventsDTO.EventDetails.Event>? _events;

    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }

                //public int? SportSubcategoryID { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                //

                // public int? EventVenuesID { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                //

                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }


                // public int? StreamID { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                //

                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }

                //public string? UserID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                // public int? SchoolRegionID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                //

                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }

        public class EventVenues
        {
            public int ID { get; set; }
            public string? Address { get; set; }
            public string? Venue { get; set; }
            public decimal? Latitude { get; set; }
            public decimal? Longitude { get; set; }
        }
    }

    private string GetThumbnailUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return string.Empty;

        if (url.Contains("youtube.com/watch?v="))
        {
            var videoId = url.Split("v=")[1].Split('&')[0];
            return $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg";
        }

        return "media/images/no-thumbnail-default.webp";
    }

    // Method to clear the selection
    private async Task ClearSelection()
    {
        SelectedVenue = null;
        _selectedVenue = null;

        Navigation.NavigateTo("./venues");

        // Clear the route from the map via JS interop
        await JSRuntime.InvokeVoidAsync("clearRoute");

        // Center the map back to user location or default location
        await JSRuntime.InvokeVoidAsync("centerMap", null); // Pass null to center on the default location
    }

    private void toggleSelectedLocationView()
    {
        _toggleEventView = !_toggleEventView; // Toggle the view state
    }


    private async Task HandleLocationChange(string? selectedVenue, string? selectedAddress, int selectedID, decimal? selectedLongitude, decimal? selectedLatitude)
    {
        _events = null; // Clear events when changing location
        _toggleEventView = true; // Reset event view toggle

        await GetEventsAsync();

        await JSRuntime.InvokeVoidAsync("showDirections", new object[] { new decimal?[] { selectedLongitude, selectedLatitude } });

        var url = string.IsNullOrWhiteSpace(selectedVenue) ? "./venues" : $"./venues/@{selectedLongitude},{selectedLatitude}/{selectedID}/{selectedVenue}, {selectedAddress}";

        Navigation.NavigateTo(url);
    }

    private async Task FlyToLocation(decimal? lng, decimal? lat)
    {
        await JSRuntime.InvokeVoidAsync("flyToLocation", lng, lat);
    }

    private async Task SetAndFitBounds()
    {
        // Step 1: Set selectedLocation in JavaScript
        await JSRuntime.InvokeVoidAsync("setSelectedLocation", SelectedLongitude, SelectedLatitude);

        // Step 2: Call fitUserAndSelectedBounds from JavaScript
        await JSRuntime.InvokeVoidAsync("fitUserAndSelectedBounds");
    }


    // Method to initialize the map on the first render
    protected override async Task OnInitializedAsync()
    {
        await GetVenuesAsync();
        await JSRuntime.InvokeVoidAsync("initializeMap", "map", mapBoxService.MapboxToken, _venues, themeService.IsDarkMode);

        await Task.Delay(2000);

        if (!string.IsNullOrEmpty(SelectedVenue))
        {
            await HandleLocationChange(SelectedVenue, SelectedAddress, SelectedID, SelectedLongitude, SelectedLatitude);

            StateHasChanged();
        }

        await JSRuntime.InvokeVoidAsync("setUserLocationFromGeolocation");

        themeService.OnThemeChanged += StateHasChanged;
        await themeService.LoadThemePreference();
    }


    private async Task GetVenuesAsync()
    {
        string url = "/Events/Venues";
        var eventVenuesData = await apiService.GetAsync<EventsDTO.EventVenues>(url);

        _venues = eventVenuesData?
            .OrderBy(v => v.Address ?? string.Empty)
            .ToList();

        _selectedVenue = _venues?.FirstOrDefault(b => b.ID == SelectedID);
    }

    private async Task GetEventsAsync()
    {
        string url = $"/Events/Details?venue={SelectedVenue}&isFinished=false";
        _events = await apiService.GetAsync<EventsDTO.EventDetails.Event>(url);
    }
}

