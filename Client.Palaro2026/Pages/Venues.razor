@page "/events/venues"

@using System.Text.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject APIService apiService
@inject HttpClient httpClient
@inject MapBoxService mapBoxService

<MudContainer Gutters="false" MaxWidth="MaxWidth.False">
    <MudPaper Class="ma-3 pa-2" Style="z-index: 1; position: absolute;" Elevation="0">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Primary" />
            <MudSelect Margin="Margin.Dense" Clearable T="string" Variant="Variant.Outlined"
                       Value="newLocation"
                       ValueChanged="HandleLocationChange"
                       FullWidth Label="Venue"
                       OnClearButtonClick="ClearSelection">
                <MudVirtualize Items="eventVenues" Context="venue">
                    <MudSelectItem T="string" Value="@venue.Venue">
                        @venue.Venue, @venue.Address
                    </MudSelectItem>
                </MudVirtualize>
            </MudSelect>
        </MudStack>
    </MudPaper>
    <MudStack id="map"
              Style="width: 100%; height: calc(100vh - 48px); overflow: hidden">
    </MudStack>
</MudContainer>
@code {
    private string? newLocation;
    private string? selectedLocation;
    private EventsDTO.EventVenues? selectedVenue;
    private List<EventsDTO.EventVenues>? eventVenues;

    public class EventsDTO
    {
        public class EventVenues
        {
            public int ID { get; set; }
            public string? Address { get; set; }
            public string? Venue { get; set; }
            public decimal? Latitude { get; set; }
            public decimal? Longitude { get; set; }
        }
    }

    private async Task GetVenues()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Venues";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            eventVenues = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventVenues>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Method to clear the selection
    private async void ClearSelection()
    {
        newLocation = null; // Clear the newLocation
        selectedLocation = null; // Clear selectedLocation as well

        // Clear the route from the map via JS interop
        await JSRuntime.InvokeVoidAsync("clearRoute");

        // Center the map back to user location or default location
        await JSRuntime.InvokeVoidAsync("centerMap", null); // Pass null to center on the default location
    }

    // Method to handle location change
    private async Task HandleLocationChange(string? selectedVenue)
    {
        // Ensure newLocation is not null or empty
        if (string.IsNullOrEmpty(selectedVenue))
        {
            return;
        }

        newLocation = selectedVenue;  // Update newLocation to the selected value
        selectedLocation = newLocation; // Optional: keep this if needed for other purposes

        // Find the selected venue from the Venues list
        this.selectedVenue = eventVenues?.FirstOrDefault(venue => venue.Venue == newLocation);

        if (this.selectedVenue != null && this.selectedVenue.Latitude.HasValue && this.selectedVenue.Longitude.HasValue)
        {
            // Call JavaScript to provide directions with coordinates
            await JSRuntime.InvokeVoidAsync("showDirections", new object[] {
                new decimal[] { (decimal)this.selectedVenue.Longitude.Value, (decimal)this.selectedVenue.Latitude.Value } // Destination coordinates
    });
        }
        else
        {
            Console.WriteLine("No matching venue found or invalid coordinates.");
        }
    }

    // Method to initialize the map on the first render
    protected override async Task OnInitializedAsync()
    {
        await GetVenues();
        await JSRuntime.InvokeVoidAsync("initializeMap", "map", mapBoxService.mapboxToken, eventVenues);
    }
}

