@page "/regional-teams/billeting-quarters"
@page "/regional-teams/billeting-quarters/@{SelectedLongitude:decimal},{SelectedLatitude:decimal}/{SelectedID:int}/{SelectedRegion}, {SelectedAddress}"

@using System.Text.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject APIService apiService
@inject HttpClient httpClient
@inject MapBoxService mapBoxService
@inject NavigationManager Navigation

<MudContainer Gutters="false" MaxWidth="MaxWidth.False">
    <MudStack Class="px-3 responsive-width" Style="z-index: 1; position: absolute;">
        <MudPaper Outlined Class="py-2 px-3 mt-3" Style="width: 100%" Elevation="0">
            <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                <MudSelect Margin="Margin.Dense" Clearable T="int?" Variant="Variant.Outlined"
                           @bind-Value="triggerSelectLocation"
                           FullWidth Label="Regional Teams"
                           OnClearButtonClick="ClearSelection"
                           Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.LocationOn" AdornmentColor="Color.Primary">
                    <MudVirtualize Items="_billetingQuarters" Context="quarter">
                        <MudSelectItem T="int?" Value="@quarter.ID">
                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                <MudImage Src="@($"media/regions/{quarter.Abbreviation}.webp")" Height="20" Class="mr-1" />
                                <MudText Typo="Typo.body2" Style="line-height: 1.5;">
                                    @quarter.Region (@quarter.Abbreviation)
                                </MudText>
                            </MudStack>
                        </MudSelectItem>
                    </MudVirtualize>
                </MudSelect>
            </MudStack>
        </MudPaper>
        @if (_billetingQuarters?.Any() == true && !string.IsNullOrEmpty(SelectedRegion) && _toggleEventView == true)
        {
            <MudPaper Outlined Elevation="0">
                <MudStack Spacing="5" Class="pa-3">
                    <MudStack Spacing="1">
                        <MudStack Spacing="0">
                            <MudText><b>Quarter</b></MudText>
                            <MudDivider />
                        </MudStack>
                        <MudStack Spacing="0">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.School"></MudIcon>
                                <MudText Typo="Typo.body2">@_selectedRegionBilletingQuarters?.BilletingQuarter</MudText>
                            </MudStack>
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.LocationOn"></MudIcon>
                                <MudText Typo="Typo.body2">@_selectedRegionBilletingQuarters?.Address</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                    <MudStack Spacing="1">
                        <MudStack Spacing="0">
                            <MudText><b>Contact Person</b></MudText>
                            <MudDivider />
                        </MudStack>
                        <MudStack Spacing="0">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Person"></MudIcon>
                                <MudText Typo="Typo.body2">@_selectedRegionBilletingQuarters?.ContactPerson</MudText>
                            </MudStack>
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Phone"></MudIcon>
                                <MudText Typo="Typo.body2">@_selectedRegionBilletingQuarters?.ContactPersonNumber</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudPaper>
        }
        @if (_billetingQuarters?.Any() == true && !string.IsNullOrEmpty(SelectedRegion))
        {
            <MudStack Row Justify="Justify.FlexEnd">
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@(_toggleEventView == true ? @Icons.Material.Filled.ArrowUpward : @Icons.Material.Filled.ArrowDownward)" OnClick="toggleSelectedLocationView" />
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.FmdGood" OnClick="() => FlyToLocation(SelectedLongitude, SelectedLatitude)" />
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" Icon="@Icons.Material.Filled.OpenInFull" OnClick="SetAndFitBounds" />
            </MudStack>
        }
    </MudStack>
    <MudStack id="map" Style="width: 100%; height: calc(100vh - 64px); overflow: hidden"></MudStack>
</MudContainer>

@code {
    [Parameter]
    public string? SelectedRegion { get; set; }
    [Parameter]
    public string? SelectedAddress { get; set; }
    [Parameter]
    public int SelectedID { get; set; }
    [Parameter]
    public decimal? SelectedLongitude { get; set; }
    [Parameter]
    public decimal? SelectedLatitude { get; set; }

    private bool? _toggleEventView = true;

    private int? triggerSelectLocation
    {
        get => _selectedRegionBilletingQuarters?.ID;
        set
        {
            if (value.HasValue)
            {
                var venue = _billetingQuarters?.FirstOrDefault(v => v.ID == value.Value);
                if (venue != null && venue.Longitude.HasValue && venue.Latitude.HasValue)
                {
                    _selectedRegionBilletingQuarters = venue;
                    SelectedRegion = venue.Region;
                    SelectedAddress = venue.Address;
                    SelectedLongitude = venue.Longitude;
                    SelectedLatitude = venue.Latitude;
                    SelectedID = venue.ID;

                    _ = HandleLocationChange(SelectedRegion, SelectedAddress, SelectedID, SelectedLongitude, SelectedLatitude);
                    // Clear stored value to avoid re-processing same ID again
                    triggerSelectLocation = null;  // Clear backing field directly to avoid recursion
                    StateHasChanged();
                }
            }
        }
    }

    private DotNetObjectReference<BilletingQuarters>? objRef;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
        _ = JSRuntime.InvokeVoidAsync("registerDotNetReference", objRef);
    }

    [JSInvokable]
    public void OnCoordinateSelected(int id)
    {
        // This will trigger your setter and location logic
        triggerSelectLocation = id;
        StateHasChanged();
    }

    public void Dispose()
    {
        if (objRef != null)
        {
            objRef.Dispose();
            objRef = null;
        }
    }

    private List<SchoolsDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters>? _billetingQuarters;
    private SchoolsDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters? _selectedRegionBilletingQuarters;

    public class SchoolsDTO
    {
        public class SchoolBillingQuarterDetails
        {
            public class SchoolBilletingQuarters
            {
                public int ID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public string? BilletingQuarter { get; set; }
                public string? Address { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public string? ContactPerson { get; set; }
                public string? ContactPersonNumber { get; set; }
            }
        }
    }

    private async Task ClearSelection()
    {
        SelectedRegion = null;
        _selectedRegionBilletingQuarters = null;

        Navigation.NavigateTo("./regional-teams/billeting-quarters");

        await JSRuntime.InvokeVoidAsync("clearRoute");

        await JSRuntime.InvokeVoidAsync("centerMap", null);
    }

    private void toggleSelectedLocationView()
    {
        _toggleEventView = !_toggleEventView; // Toggle the view state
    }

    private async Task HandleLocationChange(string? selectedRegion, string? selectedAddress, int selectedID, decimal? selectedLongitude, decimal? selectedLatitude)
    {
        await JSRuntime.InvokeVoidAsync("showDirections", new object[] { new decimal?[] { selectedLongitude, selectedLatitude } });

        var url = string.IsNullOrWhiteSpace(selectedRegion) ? "./regional-teams/billeting-quarters" : $"./regional-teams/billeting-quarters/@{selectedLongitude},{selectedLatitude}/{selectedID}/{selectedRegion}, {selectedAddress}";

        Navigation.NavigateTo(url);
    }

    private async Task FlyToLocation(decimal? lng, decimal? lat)
    {
        await JSRuntime.InvokeVoidAsync("flyToLocation", lng, lat);
    }

    private async Task SetAndFitBounds()
    {
        // Step 1: Set selectedLocation in JavaScript
        await JSRuntime.InvokeVoidAsync("setSelectedLocation", SelectedLongitude, SelectedLatitude);

        // Step 2: Call fitUserAndSelectedBounds from JavaScript
        await JSRuntime.InvokeVoidAsync("fitUserAndSelectedBounds");
    }


    protected override async Task OnInitializedAsync()
    {
        await GetBilletingQuartersAsync();
        await JSRuntime.InvokeVoidAsync("initializeMap", "map", mapBoxService.mapboxToken, _billetingQuarters);

        if (!string.IsNullOrEmpty(SelectedRegion))
        {
            await HandleLocationChange(SelectedRegion, SelectedAddress, SelectedID, SelectedLongitude, SelectedLatitude);

            StateHasChanged();
        }
    }

    private async Task GetBilletingQuartersAsync()
    {
        string url = "/Schools/BilletingQuarters/Details";
        _billetingQuarters = await apiService.GetAsync<SchoolsDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters>(url);
        _selectedRegionBilletingQuarters = _billetingQuarters?.FirstOrDefault(b => b.ID == SelectedID);
    }
}
