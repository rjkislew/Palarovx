@page "/news/{Category}/{Title}"

@using System.Text.Json
@using System.Threading.Tasks
@using Client.Palaro2026.Services
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h2"><b>@_newsContent?.Title</b></MudText>
            <MudText Typo="Typo.subtitle1">@_newsContent?.Category</MudText>
        </MudItem>

        <MudItem xs="12">
            <MudBreadcrumbs Style="font-size: 15px" Class="pa-0" Items="_items"></MudBreadcrumbs>
            <MudDivider />
        </MudItem>

        <MudItem xs="12">
            <MudGrid>
                @if (_imagesValues?.Count == 1)
                {
                    <MudItem xs="12">
                        <MudImage ObjectFit="ObjectFit.Cover" Style="height: 100%; width: 100%;" Src="@_imagesValues[0]" />
                    </MudItem>
                }
                else if (_imagesValues?.Count == 2)
                {
                    @foreach (var image in _imagesValues)
                    {
                        <MudItem xs="12" md="6">
                            <MudImage ObjectFit="ObjectFit.Cover" Style="height: 100%; width: 100%;" Src="@image" />
                        </MudItem>
                    }
                }
                else if (_imagesValues?.Count >= 3)
                {
                    <MudItem xs="12">
                        <MudImage ObjectFit="ObjectFit.Cover" Style="height: 100%; width: 100%;" Src="@_imagesValues[0]" />
                    </MudItem>
                    @for (int i = 1; i < 3 && i < _imagesValues.Count; i++)
                    {
                        <MudItem xs="12" md="6">
                            <MudImage ObjectFit="ObjectFit.Cover" Style="height: 100%; width: 100%;" Src="@_imagesValues[i]" />
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudItem>

        <MudItem xs="12">
            <MudText>@((MarkupString)_newsContent?.Content!)</MudText>
            <MudStack AlignItems="AlignItems.End" Style="width: 100%" Spacing="0" Class="mt-10">
                <MudText>By: @_newsContent?.Author</MudText>
                <MudStack Spacing="0" AlignItems="AlignItems.End" Style="width: 100%">
                    <MudText Typo="Typo.body2">
                       on @_newsContent?.DatePublished?.ToString("MMMM dd, yyyy")
                    </MudText>
                    <MudText Typo="Typo.caption">
                        @GetRelativeTime(_newsContent?.DatePublished)
                    </MudText>
                </MudStack>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudContainer>

<FooterComponent />

@code {
    /* ---------------------------
       Parameters, & Variables

       - stores parameters passed to the component - URL parameters
       - manages and stores and data coming from API calls

    --------------------------- */

    // parameters to be passed via URL
    [Parameter] public string? Category { get; set; }
    [Parameter] public string? Title { get; set; }

    // variables to store data from API calls
    private NewsDTO.NewsDetails.NewsContent? _newsContent;

    // list to store image URLs
    private List<string> _imagesValues = new();

    // breadcrumb items
    private List<BreadcrumbItem> _items = new();

    /* ---------------------------
        Lifecycle Methods

        - methods that manage the component's lifecycle and state

    --------------------------- */

    // On component initialization, fetch news details and set up breadcrumb items
    protected override async Task OnInitializedAsync()
    {
        // Fetch news details based on the Title parameter
        await GetNewsDetailsAsync();

        // Set up breadcrumb items
        _items = new List<BreadcrumbItem>
        {
            new("Home", href: "./"),
            new("News", href: "./news"),
            new($"{Category}", href: $"./news/{Category}"),
            new($"{Title}", href: null, disabled: true)
        };
    }

    // Utility to convert DateTime to relative time string - displays how long ago the post was
    private string GetRelativeTime(DateTime? date)
    {
        if (date == null) return "";

        var timeSpan = DateTime.Now - date.Value;

        if (timeSpan.TotalSeconds < 60) return "just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes} minute{((int)timeSpan.TotalMinutes == 1 ? "" : "s")} ago";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours} hour{((int)timeSpan.TotalHours == 1 ? "" : "s")} ago";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays} day{((int)timeSpan.TotalDays == 1 ? "" : "s")} ago";
        if (timeSpan.TotalDays < 30) return $"{(int)(timeSpan.TotalDays / 7)} week{((int)(timeSpan.TotalDays / 7) == 1 ? "" : "s")} ago";
        if (timeSpan.TotalDays < 365) return $"{(int)(timeSpan.TotalDays / 30)} month{((int)(timeSpan.TotalDays / 30) == 1 ? "" : "s")} ago";

        return $"{(int)(timeSpan.TotalDays / 365)} year{((int)(timeSpan.TotalDays / 365) == 1 ? "" : "s")} ago";
    }

    /* ---------------------------
       API Calls

       - methods for fetching data from APIs

    --------------------------- */

    // Fetches news details based on the Title parameter
    private async Task GetNewsDetailsAsync()
    {
        if (string.IsNullOrWhiteSpace(Title))
            return;

        string url = $"/News/Details?title={Title}";

        _newsContent = await apiService.GetSingleAsync<NewsDTO.NewsDetails.NewsContent>(url);

        if (_newsContent?.ID != null)
        {
            await LoadNewsImagesAsync(_newsContent.ID);
        }
    }

    // Fetches images associated with a specific news item
    private async Task LoadNewsImagesAsync(string newsID)
    {
        const string baseUrl = "https://palarongpambansa2026.com/attachments/media/news";

        try
        {
            var apiUrl = $"/News/NewsImages?newsID={newsID}";
            var imageFiles = await apiService.GetAsync<string>(apiUrl);

            if (imageFiles is { Count: > 0 })
            {
                _imagesValues = imageFiles
                    .Where(file => !string.IsNullOrWhiteSpace(file))
                    .Select(file => $"{baseUrl}/{newsID}/{file}")
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading images for news {newsID}: {ex.Message}");
        }
    }

    /* ---------------------------
       DTO Classes

       - Data Transfer Objects for handling API responses
       Note: Please refer to the API documentation for more details.

    --------------------------- */

    // DTO for News Details
    public class NewsDTO
    {
        public class NewsDetails
        {
            public class NewsContent
            {
                public string? ID { get; set; }
                public string? Category { get; set; }
                public string? Author { get; set; }
                public string? Title { get; set; }
                public string? Content { get; set; }
                public string? Excerpt { get; set; }
                public DateTime? DateCreated { get; set; }
                public bool? IsPublished { get; set; }
                public DateTime? DatePublished { get; set; }
                public bool? IsArchived { get; set; }
                public List<string>? ImageUrls { get; set; }
            }
        }
    }
}

