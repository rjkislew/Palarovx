@page "/streams"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid>
    <!-- Header -->
    <MudItem xs="12">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.False">
            <MudPaper Height="300px" Square Elevation="0" Class="mud-theme-primary">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%">
                    <MudText Typo="Typo.h1" HtmlTag="body1" Style="color: white">Live Streams</MudText>
                </MudStack>
            </MudPaper>
        </MudContainer>
    </MudItem>
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudGrid>
                <MudItem xs="12">
                    <MudStack AlignItems="AlignItems.Start">
                        <MudButton OnClick="OnExpandFilterCollapseClick" StartIcon="@(_expandedFilter ? @Icons.Material.Filled.FilterAltOff : @Icons.Material.Filled.FilterAlt)">Filter</MudButton>
                        <MudCollapse Expanded="_expandedFilter">
                            <MudStack Spacing="3">
                                <MudStack Spacing="0">
                                    <MudText>Regional Teams</MudText>
                                    <MudChipSet T="string" SelectedValues="_selectedEventTeams" SelectionMode="SelectionMode.MultiSelection" CheckMark SelectedValuesChanged="UpdateSelectedEventTeams">
                                        <MudVirtualize Items="_eventTeamList" Context="team">
                                            <MudChip Size="Size.Small" Variant="Variant.Text" Value="@team">#@team</MudChip>
                                        </MudVirtualize>
                                        @if (_selectedEventTeams != null && _selectedEventTeams.Any())
                                        {
                                            <MudChip OnClick="ClearSelectedEventTeams" Variant="Variant.Text" Color="Color.Error" Size="Size.Small">
                                                Clear Selection
                                            </MudChip>
                                        }
                                    </MudChipSet>
                                </MudStack>
                                <MudStack Spacing="0">
                                    <MudText>Sports</MudText>
                                    <MudChipSet T="string" SelectedValues="_selectedSports" SelectionMode="SelectionMode.MultiSelection" CheckMark SelectedValuesChanged="UpdateSelectedSports">
                                        <MudVirtualize Items="_sportList" Context="sport">
                                            <MudChip Size="Size.Small" Variant="Variant.Text" Value="@sport">#@sport</MudChip>
                                        </MudVirtualize>
                                        @if (_selectedSports != null && _selectedSports.Any())
                                        {
                                            <MudChip OnClick="ClearSelectedSports" Variant="Variant.Text" Color="Color.Error" Size="Size.Small">
                                                Clear Selection
                                            </MudChip>
                                        }
                                    </MudChipSet>
                                </MudStack>
                                <MudStack Spacing="0">
                                    <MudText>Event Stages</MudText>
                                    <MudChipSet T="string" SelectedValues="_selectedEventStages" SelectionMode="SelectionMode.MultiSelection" CheckMark SelectedValuesChanged="UpdateSelectedEventStages">
                                        <MudVirtualize Items="_eventStageList" Context="stage">
                                            <MudChip Size="Size.Small" Variant="Variant.Text" Value="@stage">#@stage</MudChip>
                                        </MudVirtualize>
                                        @if (_selectedEventStages != null && _selectedEventStages.Any())
                                        {
                                            <MudChip OnClick="ClearSelectedEventStages" Variant="Variant.Text" Color="Color.Error" Size="Size.Small">
                                                Clear Selection
                                            </MudChip>
                                        }
                                    </MudChipSet>
                                </MudStack>
                                <MudStack Spacing="0">
                                    <MudText>Stream Services</MudText>
                                    <MudChipSet T="string" SelectedValues="_selectedStreamServices" SelectionMode="SelectionMode.MultiSelection" CheckMark SelectedValuesChanged="UpdateSelectedStreamServices">
                                        <MudVirtualize Items="_streamServiceList" Context="streamService">
                                            <MudChip Size="Size.Small" Variant="Variant.Text" Value="@streamService">#@streamService</MudChip>
                                        </MudVirtualize>
                                        @if (_selectedStreamServices != null && _selectedStreamServices.Any())
                                        {
                                            <MudChip OnClick="ClearSelectedStreamServices" Variant="Variant.Text" Color="Color.Error" Size="Size.Small">
                                                Clear Selection
                                            </MudChip>
                                        }
                                    </MudChipSet>
                                </MudStack>
                            </MudStack>
                        </MudCollapse>
                    </MudStack>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid>
                        <MudVirtualize Items="_eventDetails" Context="eventDetail">
                            <MudItem xs="6" md="4" lg="3">
                                <MudLink Href="@eventDetail.StreamURL" Target="blank" Underline="Underline.None">
                                    <MudPaper Outlined Class="p-2" Height="100%">
                                        <MudStack Class="relative">
                                            <MudChip Icon="@Icons.Material.Filled.FiberManualRecord" T="string" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" Class="absolute ml-3 mt-3">
                                                Live
                                            </MudChip>
                                            <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                            Style="width: 100%; height: auto"
                                            Class="rounded-t"
                                            ObjectFit="ObjectFit.Cover" />
                                        </MudStack>
                                        <MudStack Spacing="0" Class="pa-2">
                                            <MudTooltip Text="@eventDetail.StreamTitle">
                                                <MudText Typo="Typo.body1" Color="Color.Primary" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                    <b>@eventDetail.StreamTitle</b>
                                                </MudText>
                                            </MudTooltip>
                                            <MudText Typo="Typo.caption">@eventDetail.StreamService</MudText>

                                            <MudText Typo="Typo.caption" Class="mt-3 text-wrap" Style="word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">
                                                #@eventDetail.Sport?.Replace(" ", "") #@eventDetail.Gender?.Replace(" ", "") #@eventDetail.Level?.Replace(" ", "") #@eventDetail.EventStage?.Replace(" ", "") #@eventDetail.Subcategory?.Replace(" ", "")
                                                <MudVirtualize Items="@eventDetail.EventVersusList" Context="teams">
                                                    #@teams.Abbreviation?.Replace(" ", "")
                                                </MudVirtualize>
                                            </MudText>
                                        </MudStack>
                                    </MudPaper>
                                </MudLink>
                            </MudItem>
                        </MudVirtualize>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>

<FooterComponent />

@code {
    private List<EventsDTO.EventDetails.Event>? _eventDetails;
    private string[]? _sportList;
    private string[]? _eventStageList;
    private string[]? _streamServiceList;
    private string[]? _eventTeamList;
    bool _expandedFilter = false;

    private string[]? _selectedSports;
    private string[]? _selectedEventStages;
    private string[]? _selectedStreamServices;
    private string[]? _selectedEventTeams;

    private void OnExpandFilterCollapseClick()
    {
        _expandedFilter = !_expandedFilter;
    }


    private async Task ClearSelectedEventTeams()
    {
        _selectedEventTeams = Array.Empty<string>();

        await GetQueriedEventsAsync("");
    }
    public async Task UpdateSelectedEventTeams(IReadOnlyCollection<string> values)
    {
        _selectedEventTeams = values.ToArray();
        await GetQueriedEventsAsync("eventTeams");
    }


    private async Task ClearSelectedSports()
    {
        _selectedSports = Array.Empty<string>();

        await GetQueriedEventsAsync("");
    }
    public async Task UpdateSelectedSports(IReadOnlyCollection<string> values)
    {
        _selectedSports = values.ToArray();
        await GetQueriedEventsAsync("sports");
    }


    private async Task ClearSelectedEventStages()
    {
        _selectedEventStages = Array.Empty<string>();

        await GetQueriedEventsAsync("");
    }
    public async Task UpdateSelectedEventStages(IReadOnlyCollection<string> values)
    {
        _selectedEventStages = values.ToArray();
        await GetQueriedEventsAsync("eventStages");
    }

    private async Task ClearSelectedStreamServices()
    {
        _selectedStreamServices = Array.Empty<string>();

        await GetQueriedEventsAsync("");
    }
    public async Task UpdateSelectedStreamServices(IReadOnlyCollection<string> values)
    {
        _selectedStreamServices = values.ToArray();

        await GetQueriedEventsAsync("streamServices");
    }

    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public string? StreamTitle { get; set; }
                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                // public int? SchoolRegionID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                //

                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
    }

    private string GetThumbnailUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return string.Empty;

        if (url.Contains("youtube.com/watch?v="))
        {
            var videoId = url.Split("v=")[1].Split('&')[0];
            return $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg";
        }

        return "media/images/no-thumbnail-default.png";
    }

    private string GetRandomImage()
    {
        string folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/media/sports/images");
        if (!Directory.Exists(folderPath)) return string.Empty;

        string[] images = Directory.GetFiles(folderPath);
        if (images.Length == 0) return string.Empty;

        var random = new Random();
        string randomImage = images[random.Next(images.Length)];
        return $"/media/sports/images/{Path.GetFileName(randomImage)}";
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEventsAsync();
    }

    private async Task GetEventsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Details?onStream=true";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventDetails = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventDetails.Event>>(responseStream, options);

            _sportList = _eventDetails?.Select(e => e.Sport!).Where(sub => !string.IsNullOrWhiteSpace(sub)).Distinct().ToArray();
            _eventStageList = _eventDetails?.Select(e => e.EventStage!).Where(sub => !string.IsNullOrWhiteSpace(sub)).Distinct().ToArray();
            _streamServiceList = _eventDetails?.Select(e => e.StreamService!).Where(sub => !string.IsNullOrWhiteSpace(sub)).Distinct().ToArray();
            _eventTeamList = _eventDetails?.Where(e => e.EventVersusList != null).SelectMany(e => e.EventVersusList!).Select(t => t.Region!).Where(region => !string.IsNullOrWhiteSpace(region)).Distinct().ToArray();
        }
        catch (HttpRequestException)
        {
            _eventDetails = null;
        }
    }

    private async Task GetQueriedEventsAsync(string selectedChip)
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Details?onStream=true";

            var queryParams = new List<string>();

            if (_selectedEventTeams?.Any() == true)
                queryParams.Add($"region={Uri.EscapeDataString(string.Join(",", _selectedEventTeams))}");

            if (_selectedSports?.Any() == true)
                queryParams.Add($"sport={Uri.EscapeDataString(string.Join(",", _selectedSports))}");

            if (_selectedEventStages?.Any() == true)
                queryParams.Add($"eventStage={Uri.EscapeDataString(string.Join(",", _selectedEventStages))}");

            if (_selectedStreamServices?.Any() == true)
                queryParams.Add($"streamService={Uri.EscapeDataString(string.Join(",", _selectedStreamServices))}");

            if (queryParams.Any())
            {
                url += "&" + string.Join("&", queryParams);
            }

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventDetails = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventDetails.Event>>(responseStream, options);


            if (selectedChip != "sports")
            {
                _sportList = _eventDetails?.Select(e => e.Sport!).Where(sub => !string.IsNullOrWhiteSpace(sub)).Distinct().ToArray();
            }
            if (selectedChip != "eventStages")
            {
                _eventStageList = _eventDetails?.Select(e => e.EventStage!).Where(sub => !string.IsNullOrWhiteSpace(sub)).Distinct().ToArray();
            }
            if (selectedChip != "streamServices")
            {
                _streamServiceList = _eventDetails?.Select(e => e.StreamService!).Where(sub => !string.IsNullOrWhiteSpace(sub)).Distinct().ToArray();
            }
            if (selectedChip != "eventTeams")
            {
                _eventTeamList = _eventDetails?.Where(e => e.EventVersusList != null).SelectMany(e => e.EventVersusList!).Select(t => t.Region!).Where(region => !string.IsNullOrWhiteSpace(region)).Distinct().ToArray();
            }
        }
        catch (HttpRequestException)
        {
            _eventDetails = null;
        }
    }

}
