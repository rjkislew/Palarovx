@page "/sports"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks

<MudGrid Spacing="10" Justify="Justify.Center">
    @if (sports == null || sports.Count == 0)
    {
        <MudItem xs="12">
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
        </MudItem>
    }
    else
    {
        <MudVirtualize Items="sports" Context="categoryData">
            <MudItem xs="12">
                <MudStack Spacing="2">
                    <MudText Color="Color.Secondary" Typo="Typo.h2">
                        @categoryData.category
                    </MudText>
                    <MudDivider Class="mud-border-tertiary" />
                    <MudGrid>
                        <MudVirtualize Items="categoryData.sports" Context="sportData">
                            <MudItem xs="12" md="6">
                                <MudPaper Outlined Class="pa-3 mud-border-tertiary" id="@sportData.sport">
                                    <MudStack Row AlignItems="AlignItems.Center">
                                        <MudImage Width="50" Height=50 Src="@($"Media/Sports/Icons/{sportData.sport}.png")"></MudImage>
                                        <MudStack Spacing="1">
                                            <MudText Typo="Typo.h3" Color="Color.Primary">@sportData.sport</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Tertiary">@sportData.description</MudText>
                                        </MudStack>
                                    </MudStack>
                                    <MudGrid>
                                        <MudItem xs="12" md="6">
                                            <!-- Schedules-->
                                            <MudStack Class="mt-5" Spacing="2">
                                                <MudText Typo="Typo.body2">Live Now</MudText>
                                                <MudDivider Class="mud-border-tertiary" />
                                                <MudPaper Outlined Class="mud-border-primary pa-3">
                                                    <MudStack Row Wrap="Wrap.Wrap" Spacing="1">
                                                        <MudIcon Icon="@Icons.Material.Filled.WarningAmber" Color="Color.Warning"></MudIcon>
                                                        <MudText Typo="Typo.caption">No Live Feed</MudText>
                                                    </MudStack>
                                                </MudPaper>
                                            </MudStack>
                                        </MudItem>
                                        <MudItem xs="12" md="6">
                                            <!-- Live Now -->
                                            <MudStack Class="mt-5" Spacing="2">
                                                <MudText Typo="Typo.body2">Upcoming Schedules</MudText>
                                                <MudDivider Class="mud-border-tertiary" />
                                                <MudPaper Outlined Class="mud-border-primary pa-3">
                                                    <MudStack Row Wrap="Wrap.Wrap" Spacing="1">
                                                        <MudIcon Icon="@Icons.Material.Filled.WarningAmber" Color="Color.Warning"></MudIcon>
                                                        <MudText Typo="Typo.caption">No Upcoming Schedules</MudText>
                                                    </MudStack>
                                                </MudPaper>
                                            </MudStack>
                                        </MudItem>
                                    </MudGrid>
                                    <MudStack AlignItems="AlignItems.End" Class="mt-5">
                                        <!-- Categories -->
                                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(e => OnExpandCollapseClick(sportData))">
                                            <MudText Typo="Typo.body2" Color="Color.Tertiary">@(sportData.IsExpanded ? "Close" : "Sub Categories")</MudText>
                                        </MudButton>
                                    </MudStack>
                                    <MudCollapse Expanded="sportData.IsExpanded">
                                        <MudStack Spacing="1">
                                            <MudText Typo="Typo.body2">Categories</MudText>
                                            <MudDivider Class="mud-border-tertiary" />
                                            <MudStack Row Wrap="Wrap.Wrap" Spacing="1">
                                                <MudVirtualize Items="sportData.sub_categories" Context="subCategoryData">
                                                    <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary"><MudText Color="Color.Tertiary" Typo="Typo.caption">@subCategoryData.sub_category</MudText></MudChip>
                                                </MudVirtualize>
                                            </MudStack>
                                        </MudStack>
                                    </MudCollapse>
                                </MudPaper>
                            </MudItem>
                        </MudVirtualize>
                    </MudGrid>
                </MudStack>
            </MudItem>
        </MudVirtualize>
    }
</MudGrid>

@code {
    // Get API URL
    private readonly string API_URL = APIService.palaro_2026_API;
    private List<scsc_CategoriesDTO>? sports;

    bool _expanded = false;

    public class scsc_CategoriesDTO
    {
        public string? category { get; set; }
        public List<scsc_SportsDTO>? sports { get; set; }
    }

    public class scsc_SportsDTO
    {
        public string? sport { get; set; }
        public string? description { get; set; }
        public List<scsc_SubCategoriesDTO>? sub_categories { get; set; }
        public bool IsExpanded { get; set; } // Use a different property name to avoid conflicts
    }

    public class scsc_SubCategoriesDTO
    {
        public string? sub_category { get; set; }
    }


    private void OnExpandCollapseClick(scsc_SportsDTO sportData)
    {
        sportData.IsExpanded = !sportData.IsExpanded;
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await GetSportsList();
    }

    private async Task GetSportsList()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportSubCategories")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sports = await JsonSerializer.DeserializeAsync<List<scsc_CategoriesDTO>>(responseStream, options);

            // Initialize the IsExpanded property to false
            foreach (var category in sports)
            {
                foreach (var sport in category.sports)
                {
                    sport.IsExpanded = false;
                }
            }
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}

