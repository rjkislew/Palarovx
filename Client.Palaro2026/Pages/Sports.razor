@page "/sports"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks

<MudGrid>
    <MudItem xs="12">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.False">
            <MudPaper Height="300px" Square Elevation="0" Class="gradient-blue-bottom">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%">
                    <MudText Typo="Typo.h1" Style="color: white">Sports</MudText>
                </MudStack>
            </MudPaper>
        </MudContainer>
    </MudItem>
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudGrid Spacing="10" Justify="Justify.Center">
                @if (sportCategoryContents == null || sportCategoryContents.Count == 0)
                {
                    <MudItem xs="12">
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudPaper Outlined Class="pa-3 mud-border-tertiary">
                                    <MudStack Row Spacing="1">
                                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px" Width="50px"></MudSkeleton>
                                        <MudStack Spacing="0">
                                            <MudSkeleton SkeletonType="SkeletonType.Text" Width="20%" Height="40px"></MudSkeleton>
                                            <MudStack Row>
                                                <MudSkeleton SkeletonType="SkeletonType.Text" Width="100"></MudSkeleton>
                                            </MudStack>
                                        </MudStack>
                                    </MudStack>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                }
                else
                {
                    <MudVirtualize Items="sportCategoryContents" Context="categoryData">
                        <MudItem xs="12">
                            <MudStack Spacing="2">
                                <MudPaper Elevation="0" Class="gradient-orange-left pa-3">
                                    <MudText Style="color: white" Typo="Typo.h2">
                                        @categoryData.Category
                                    </MudText>
                                </MudPaper>
                                <MudDivider />
                                <MudGrid>
                                    <MudVirtualize Items="categoryData.SportList" Context="sportData">
                                        <MudItem xs="12" md="6" lg="4">
                                            <MudPaper Elevation="0" Style="height: 100%">
                                                <MudStack Spacing="3">
                                                    <MudImage Src="@($"Media/Sports/Images/{sportData.Sport}.png")" Class="rounded-t" ObjectPosition="ObjectPosition.Top" ObjectFit="ObjectFit.Cover" Height="300" />
                                                    <MudStack Class="pa-3">
                                                        <MudText Typo="Typo.h3" Color="Color.Tertiary">@sportData.Sport</MudText>
                                                        <MudText Typo="Typo.caption" Color="Color.Tertiary">@sportData.Description</MudText>
                                                    </MudStack>
                                                    <MudSpacer />
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                                                </MudStack>
                                            </MudPaper>
                                        </MudItem>
                                    </MudVirtualize>
                                </MudGrid>
                            </MudStack>
                        </MudItem>
                    </MudVirtualize>
                }
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>

@code {
    // Get API URL
    private readonly string API_URL = APIService.Palaro2026API;
    private List<CategoriesContent>? sportCategoryContents;


    //API/Sports/SportCategoryAndSubCategoryDetails


    public class CategoriesContent
    {
        public string? Category { get; set; }
        public List<SportsContent>? SportList { get; set; }
    }
    public class SportsContent
    {
        public string? Sport { get; set; }
        public string? Description { get; set; }
        public List<SubCategoriesContent>? SportSubCategoryList { get; set; }
        public bool IsExpanded { get; set; } // Use a different property name to avoid conflicts
    }
    public class SubCategoriesContent
    {
        public string? SubCategory { get; set; }
    }

    private void OnExpandCollapseClick(SportsContent sportData)
    {
        sportData.IsExpanded = !sportData.IsExpanded;
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await GetSportCategoryAndSubCategoryDetailsList();
    }

    private async Task GetSportCategoryAndSubCategoryDetailsList()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportCategoryAndSubCategoryDetails");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var fetchedSports = await JsonSerializer.DeserializeAsync<List<CategoriesContent>>(responseStream, options);

            // Check if fetchedSports is null or empty
            if (fetchedSports == null || !fetchedSports.Any())
            {
                Console.WriteLine("No sports data received.");
                sportCategoryContents = new List<CategoriesContent>(); // Initialize to an empty list
                return; // Exit early if no data is fetched
            }

            // Assign the fetched data to the sports variable
            sportCategoryContents = fetchedSports;

            // Set IsExpanded to false for each sport
            foreach (var category in sportCategoryContents)
            {
                category.SportList?.ForEach(sport => sport.IsExpanded = false);
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

}
