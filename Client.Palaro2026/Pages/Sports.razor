@page "/sports"
@page "/sports/{Category}"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using Client.Palaro2026.Services
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject APIService apiService
@inject HttpClient httpClient
@inject ThemeService themeService
@inject NavigationManager navigationManager

<PageTitle>Sporting events | PALARO 2026 - Agusan del Sur</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h2">Sporting Events</MudText>
            <MudText Typo="Typo.subtitle1">Explore the various sports and events in PALARO 2026.</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudBreadcrumbs Style="font-size: 15px" Class="pa-0" Items="_items"></MudBreadcrumbs>
            <MudDivider />
        </MudItem>
        <!-- SPORTS -->
        <MudItem xs="12">
            @if (_sportCategories?.Any() == true)
            {
                <MudTabs KeepPanelsAlive Elevation="0" ApplyEffectsToContainer="true" PanelClass="pt-6" Centered @bind-ActivePanelIndex="_activeTabIndex">
                    <MudVirtualize Items="_sportCategories" Context="categoryData">
                        <MudTabPanel Style="text-transform: none" Text="@categoryData.Category" OnClick="@(() => navigationManager.NavigateTo($"./sports/{categoryData.Category}"))">
                            @if (_sports?.Any() == true)
                            {
                                <MudGrid Justify="Justify.Center">
                                    <MudVirtualize Items="_sports?.Where(s => s.SportCategoryID == categoryData.ID).ToList()" Context="sport">
                                        <MudItem xs="6" sm="4" md="3">
                                            <MudLink Href=@($"sports/{categoryData.Category}/{sport.Sport}") Underline="Underline.None">
                                                <MudPaper Outlined Style="height: 100%" Class="scale-up-center">
                                                    <MudStack Spacing="3">
                                                        <MudImage Src="@($"Media/Sports/Images/{sport.Sport}.webp")" ObjectPosition="ObjectPosition.Top" Class="rounded-t" ObjectFit="ObjectFit.Cover" Height="300" />
                                                        <MudStack Class="pa-3">
                                                            <MudStack Row AlignItems="AlignItems.Center">
                                                                <MudImage ObjectFit="ObjectFit.Contain" Height="20" Src="@($"media/sports/icons/{(themeService.IsDarkMode == true ? "white" : "black")}/{sport.Sport}.webp")" />
                                                                <MudText Typo="Typo.h5" Color="Color.Dark">@sport.Sport</MudText>
                                                            </MudStack>
                                                            <MudText Typo="Typo.caption">@sport.Description</MudText>
                                                        </MudStack>
                                                    </MudStack>
                                                </MudPaper>
                                            </MudLink>
                                        </MudItem>
                                    </MudVirtualize>
                                </MudGrid>
                            }
                            else
                            {
                                <MudGrid>
                                    @for (int i = 0; i < 12; i++)
                                    {
                                        <MudItem xs="6" sm="4" md="3">
                                            <MudPaper Outlined>
                                                <MudStack Spacing="0">
                                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                                                    <MudStack Class="pa-3 mt-n2" Spacing="0">
                                                        <MudStack Row>
                                                            <MudSkeleton Height="100px" Width="100px" />
                                                            <MudSkeleton Height="100px" Width="100%" />
                                                        </MudStack>
                                                        <MudSkeleton></MudSkeleton>
                                                        <MudSkeleton></MudSkeleton>
                                                    </MudStack>
                                                </MudStack>
                                            </MudPaper>
                                        </MudItem>
                                    }
                                </MudGrid>
                            }
                        </MudTabPanel>
                    </MudVirtualize>
                </MudTabs>
            }
            else
            {
                <MudStack Wrap="Wrap.NoWrap" Row Justify="Justify.Center" Style="width: 100%">
                    @for (int i = 0; i < 3; i++)
                    {
                        <MudSkeleton Height="80px" Width="200px" />
                    }
                </MudStack>
                <MudGrid>
                    @for (int i = 0; i < 12; i++)
                    {
                        <MudItem xs="6" sm="4" md="3">
                            <MudPaper Outlined>
                                <MudStack Spacing="0">
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                                    <MudStack Class="pa-3 mt-n2" Spacing="0">
                                        <MudStack Row>
                                            <MudSkeleton Height="100px" Width="100px" />
                                            <MudSkeleton Height="100px" Width="100%" />
                                        </MudStack>
                                        <MudSkeleton></MudSkeleton>
                                        <MudSkeleton></MudSkeleton>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            }
        </MudItem>
        <MudItem xs="12">
            <!-- Sporting Events Venues -->
            <MudButton EndIcon="@Icons.Material.Filled.ArrowForward" FullWidth Variant="Variant.Text" Size="Size.Large" Href="./venues">Sporting Event Venues</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

<!-- Footer -->
<FooterComponent />

@code {
    [Parameter]
    public string? Category { get; set; }

    private List<SportsDTO.Sports>? _sports;
    private List<SportsDTO.SportCategories>? _sportCategories;

    private List<BreadcrumbItem> _items = new();

    private int _activeTabIndex = 0;

    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        _items = new List<BreadcrumbItem>
        {
            new("Home", href: "./"),
            new("Sports", href: null, disabled: true)
        };

        themeService.OnThemeChanged += StateHasChanged;
        await themeService.LoadThemePreference();

        await GetSportCategoriesAsync(); // <-- Moved up to ensure it's populated first
        await GetSportsAsync();          // <-- Optional: call after

        SetActiveTabIndexFromUrl();      // <-- Call after categories are loaded
    }

    private void SetActiveTabIndexFromUrl()
    {
        var uri = new Uri(navigationManager.Uri);
        var lastSegment = uri.Segments.LastOrDefault()?.TrimEnd('/');

        if (!string.IsNullOrWhiteSpace(lastSegment))
        {
            var decodedSegment = Uri.UnescapeDataString(lastSegment);

            var index = _sportCategories!.FindIndex(c =>
                string.Equals(c.Category, decodedSegment, StringComparison.OrdinalIgnoreCase));

            if (index >= 0)
            {
                _activeTabIndex = index;
            }
        }
    }


    private async Task GetSportsAsync()
    {
        string url = $"/Sports";
        _sports = await apiService.GetAsync<SportsDTO.Sports>(url);
    }

    private async Task GetSportCategoriesAsync()
    {
        string url = $"/Sports/Categories";
        _sportCategories = await apiService.GetAsync<SportsDTO.SportCategories>(url);
    }
}
