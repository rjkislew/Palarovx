@page "/events"
@page "/events/{EventStatus}"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject FeaturesUnlockingService featuresUnlockingService

<PageTitle>Watch Events | PALARO 2026 - Agusan del Sur</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h2">Watch Events</MudText>
            <MudText Typo="Typo.subtitle1">Explore the events of PALARO 2026.</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudBreadcrumbs Style="font-size: 15px" Class="pa-0" Items="_items"></MudBreadcrumbs>
            <MudDivider />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudLink Href="./events/medal-tally" Underline="Underline.None">
                <MudPaper Class="scale-up-center">
                    <MudStack Spacing="0" Class="pa-3">
                        <MudText Typo="Typo.h3">Medal Tally 🎖️</MudText>
                        <MudText>View the performance of each region.</MudText>
                        <MudText Typo="Typo.caption">This section displays the official medal tally of participating regions, helping you track gold, silver, and bronze standings in real-time.</MudText>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudLink Href="./venues" Underline="Underline.None">
                <MudPaper Class="scale-up-center">
                    <MudStack Spacing="0" Class="pa-3">
                        <MudText Typo="Typo.h3">Event Venues 📍</MudText>
                        <MudText>Know where each event is held.</MudText>
                        <MudText Typo="Typo.caption">This section lists the venues for each event, providing details on locations and facilities.</MudText>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>
        <MudItem xs="12">
            <MudDivider />
        </MudItem>
        <MudItem xs="12">
            <MudTabs KeepPanelsAlive Elevation="0" ApplyEffectsToContainer="true" PanelClass="pt-6" Centered @bind-ActivePanelIndex="_activeTabIndex">
                <MudVirtualize Items="@eventStatus" Context="status">
                    <MudTabPanel Text="@(status == true ? "Finished" : "Ongoing")"
                                 Style="text-transform: none"
                                 OnClick="@(() => navigationManager.NavigateTo($"./events/{(status == true ? "Finished" : "Ongoing")}"))">

                        <MudGrid Justify="Justify.Center">
                            <MudVirtualize Items="@_events?.Where(e => e.IsFinished == status).OrderByDescending(e => e.Date).ThenBy(e => e.Sport).ThenBy(e => e.Subcategory).ToList()" Context="eventDetail">
                                <MudItem xs="12" sm="6" md="4">
                                    <MudPaper Style="height: 100%" Class="scale-up-center">
                                        @* Content *@
                                        <MudLink Href="@($"./events/{(status == true ? "Finished" : "Ongoing")}/{eventDetail.ID}")" Underline="Underline.None" Color="Color.Dark" Style="height: 100%; user-select: text; -webkit-user-drag: none;" draggable="auto">
                                            <MudStack Style="height: 100%" Spacing="0">

                                                @* Image *@
                                                @if (eventDetail.OnStream == true && eventDetail.IsFinished == false)
                                                {
                                                    <MudStack Class="relative">
                                                        <MudStack Class="absolute ml-3 mt-3 z-10">
                                                            <MudChip Icon="@Icons.Material.Filled.FiberManualRecord" T="string" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" Class="animate-blink">
                                                                Live
                                                            </MudChip>
                                                        </MudStack>
                                                        <MudImage Src="@($"media/sports/icons/white/{eventDetail.Sport}.webp")"
                                                                  Style="width: 50px; height: 50px; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10"
                                                                  Class="rounded-t absolute "
                                                                  ObjectFit="ObjectFit.Cover" />
                                                        <MudStack Style="background-color: rgba(0,0,0,0.5); width: 100%; height: 200px" Class="rounded-t absolute" />
                                                        <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                                  Style="width: 100%; height: 200px"
                                                                  Class="rounded-t"
                                                                  ObjectFit="ObjectFit.Cover" />
                                                    </MudStack>
                                                }
                                                else if (eventDetail.OnStream == true && eventDetail.IsFinished == true)
                                                {
                                                    <MudStack Class="relative">
                                                        <MudStack Class="absolute ml-3 mt-3 z-10">
                                                            <MudChip Icon="@Icons.Material.Filled.PlayCircleFilled" T="string" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small">
                                                                Was Live
                                                            </MudChip>
                                                        </MudStack>
                                                        <MudImage Src="@($"media/sports/icons/white/{eventDetail.Sport}.webp")"
                                                                  Style="width: 50px; height: 50px; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10"
                                                                  Class="rounded-t absolute "
                                                                  ObjectFit="ObjectFit.Cover" />
                                                        <MudStack Style="background-color: rgba(0,0,0,0.5); width: 100%; height: 200px" Class="rounded-t absolute" />
                                                        <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                                  Style="width: 100%; height: 200px"
                                                                  Class="rounded-t"
                                                                  ObjectFit="ObjectFit.Cover" />
                                                    </MudStack>
                                                }
                                                else
                                                {
                                                    <MudStack Class="relative">
                                                        <MudStack Class="absolute ml-3 mt-3 z-10">
                                                            <MudChip Icon="@Icons.Material.Filled.CircleNotifications" T="string" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small">
                                                                Not on live
                                                            </MudChip>
                                                        </MudStack>
                                                        <MudImage Src="@($"media/sports/icons/white/{eventDetail.Sport}.webp")"
                                                                  Style="width: 50px; height: 50px; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10"
                                                                  Class="rounded-t absolute "
                                                                  ObjectFit="ObjectFit.Cover" />
                                                        <MudStack Style="background-color: rgba(0,0,0,0.5); width: 100%; height: 200px" Class="rounded-t absolute" />
                                                        <MudImage Src="@($"media/sports/images/{eventDetail.Sport}.webp")"
                                                                  Style="width: 100%; height: 200px"
                                                                  Class="rounded-t"
                                                                  ObjectFit="ObjectFit.Cover" />
                                                    </MudStack>
                                                }

                                                @* Title *@
                                                @* Sport Details *@
                                                <MudStack Justify="Justify.SpaceBetween" Style="height: 100%" Class="pa-3">
                                                    <MudStack Spacing="0">
                                                        <MudText Typo="Typo.body1" Style="line-height: 1.5">@eventDetail.Subcategory</MudText>
                                                        <MudText Typo="Typo.caption">@eventDetail.EventStage ∙ @eventDetail.Sport</MudText>
                                                        <MudText Typo="Typo.caption">
                                                            @{
                                                                var eventDate = eventDetail.Date;
                                                                var displayDate = eventDate.HasValue
                                                                ? (eventDate.Value.Date == DateTime.Today ? "Today"
                                                                : eventDate.Value.Date == DateTime.Today.AddDays(1) ? "Tomorrow"
                                                                : eventDate.Value.ToString("dddd - MMMM d"))
                                                                : "No Date";

                                                                var displayTime = eventDetail.Time.HasValue
                                                                ? DateTime.Today.Add(eventDetail.Time.Value).ToString("hh:mm tt")
                                                                : "No Time";
                                                            }
                                                            @displayDate - @displayTime ∙ @eventDetail.Venue
                                                        </MudText>
                                                    </MudStack>

                                                    <MudText Typo="Typo.caption" Class="mt-3" Style="word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">
                                                        #@eventDetail.Category?.Replace(" ", "") #@eventDetail.Level?.Replace(" ", "") #@eventDetail.EventStage?.Replace(" ", "")
                                                        <MudElement>
                                                            @if (eventDetail.Gender == "Male")
                                                            {
                                                                <MudText Typo="Typo.caption">
                                                                    #Male♂️
                                                                </MudText>
                                                            }
                                                            else if (eventDetail.Gender == "Female")
                                                            {
                                                                <MudText Typo="Typo.caption">
                                                                    #Female♀️
                                                                </MudText>
                                                            }
                                                            else
                                                            {
                                                                <MudText Typo="Typo.caption">
                                                                    #Mixed♂️♀️
                                                                </MudText>
                                                            }
                                                        </MudElement>
                                                    </MudText>
                                                </MudStack>
                                            </MudStack>
                                        </MudLink>
                                    </MudPaper>
                                </MudItem>
                            </MudVirtualize>
                        </MudGrid>
                    </MudTabPanel>
                </MudVirtualize>
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudContainer>
<FooterComponent />

@code {
    [Parameter]
    public string? EventStatus { get; set; }

    private List<EventsDTO.EventDetails.Event>? _events;

    private List<BreadcrumbItem> _items = new();

    private bool?[]? eventStatus;
    private int _activeTabIndex = 0;

    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public string? StreamTitle { get; set; }
                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                // public int? SchoolRegionID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                //

                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
    }

    private string GetThumbnailUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return string.Empty;

        if (url.Contains("youtube.com/watch?v="))
        {
            var videoId = url.Split("v=")[1].Split('&')[0];
            return $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg";
        }

        return "media/images/no-thumbnail-default.webp";
    }
    protected override async Task OnInitializedAsync()
    {
        featuresUnlockingService.OnLockChanged += HandleLockChanged;
        await featuresUnlockingService.LoadFromLocalStorageAsync();

        if (!featuresUnlockingService.IsUnlocked)
        {
            navigationManager.NavigateTo("/");
            return;
        }

        await GetEventsAsync();

        SetActiveTabIndexFromUrl();

        _items = new List<BreadcrumbItem>
        {
            new("Home", href: "./"),
            new("Events", href: null, disabled: true)
        };
    }

    private void SetActiveTabIndexFromUrl()
    {
        var uri = new Uri(navigationManager.Uri);
        var lastSegment = uri.Segments.LastOrDefault()?.TrimEnd('/').ToLower();

        if (!string.IsNullOrWhiteSpace(lastSegment))
        {
            switch (lastSegment)
            {
                case "finished":
                    _activeTabIndex = 1;
                    break;
                case "ongoing":
                    _activeTabIndex = 0;
                    break;
                default:
                    _activeTabIndex = 0;
                    break;
            }
        }
        else
        {
            _activeTabIndex = 0;
        }
    }


    private void HandleLockChanged()
    {
        if (!featuresUnlockingService.IsUnlocked)
        {
            navigationManager.NavigateTo("/");
        }
        else
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        featuresUnlockingService.OnLockChanged -= HandleLockChanged;
    }

    private async Task GetEventsAsync()
    {
        string url = "/Events/Details";
        _events = await apiService.GetAsync<EventsDTO.EventDetails.Event>(url);

        eventStatus = _events!
                      .Where(e => e.IsFinished.HasValue) // Optional: skip nulls
                      .Select(e => e.IsFinished)
                      .Distinct()
                      .OrderBy(status => status) // false comes before true
                      .ToArray();
    }
}
