@page "/"
@inject IJSRuntime JSRuntime
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks

<MudGrid Spacing="10">
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.False" Gutters=false>
            <MudStack Class="pt-20 absolute pa-5 z-10" Style="left: 0; top: 0" Spacing="2">
                <MudText Typo="Typo.h1" Class="mb-n5" Color="Color.Primary">Palarong Pambansa</MudText>
                <MudStack Row AlignItems="AlignItems.End" Spacing="2">
                    <MudStack Row Spacing="1" AlignItems="AlignItems.End">
                        <MudText Typo="Typo.h3" HtmlTag="h2" Class="mb-n1" Style="color: white">Agusan del Sur</MudText>
                        <MudText Typo="Typo.h3" HtmlTag="h2" Class="mb-n1" Color="Color.Secondary">2026</MudText>
                        <MudDivider Vertical="true" FlexItem="true" Class="border-2" Style="color: white" />
                    </MudStack>
                    <MudText Style="color: white" Typo="Typo.body2">@days d : @hours h : @min m : @sec s</MudText>
                </MudStack>
            </MudStack>
            <MudCarousel TData="SportsContent" Style="height: calc(100vh - 64px)" ItemsSource="sportContents" Context="sportData" EnableSwipeGesture ShowArrows="false" ShowBullets="false">
                <ItemTemplate>
                    <MudPaper Elevation="0" Class="rounded absolute z-2" Style="width: 100vw; height: 100vh; background-color: rgb(0,0,0, 0.60);"></MudPaper>
                    <MudStack Class="absolute pa-5 z-3" Style="left: 0; bottom: 0" Spacing="0">
                        <MudText Typo="Typo.h2" Color="Color.Secondary">@sportData.Sport</MudText>
                        <MudText Typo="Typo.body1" Style="color: white">@sportData.Description</MudText>
                    </MudStack>
                    <MudImage Style="width: 100vw; height: 100vh;" Class="z-1" Fluid ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Top" Src="@($"Media/Sports/Images/{sportData.Sport}.png")" />
                </ItemTemplate>
            </MudCarousel>
        </MudContainer>
    </MudItem>
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudGrid Spacing="10">
                <MudItem xs="12">
                    <MudGrid Spacing="10">
                        <!-- HOSPITALITY -->
                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudPaper Height="250px" Class="pa-0 relative" Elevation="0" Style="width: 100%; background-color: rgba(0, 0, 0, 0.60); background-image: url(Media/Images/Tourism.png); background-position: bottom; background-size: cover">
                                        <MudStack Class="absolute pa-5 z-2" Style="left: 0; bottom: 0" Spacing="0">
                                            <MudText Typo="Typo.h2" Style="color: white">
                                                Tourism
                                            </MudText>
                                            <MudText Typo="Typo.body2" Style="color: white">
                                                Discover the rich culture, scenic landscapes, and vibrant local attractions of Agusan del Sur that make Palaro 2026 an unforgettable experience.
                                            </MudText>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudPaper Height="250px" Class="pa-0 relative" Elevation="0" Style="width: 100%; background-color: rgba(0, 0, 0, 0.60); background-image: url(Media/Images/Accommodation.png); background-position: bottom; background-size: cover">
                                        <MudStack Class="absolute pa-5" Style="left: 0; bottom: 0" Spacing="0">
                                            <MudText Typo="Typo.h2" Style="color: white">
                                                Accommodation
                                            </MudText>
                                            <MudText Typo="Typo.body2" Style="color: white">
                                                Find the perfect place to stay in Agusan del Sur, offering a wide range of comfortable and convenient accommodations for all Palaro 2026 visitors.
                                            </MudText>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <!-- SPORTS -->
                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudGrid Spacing="10" Justify="Justify.Center">
                                        @if (sportCategoryContents == null || sportCategoryContents.Count == 0)
                                        {
                                            <MudItem xs="12">
                                                <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
                                            </MudItem>
                                        }
                                        else
                                        {
                                            <Virtualize Items="sportCategoryContents" Context="categoryData">
                                                <MudItem xs="12">
                                                    <MudStack Spacing="2">
                                                        <MudPaper Elevation="0" Class="gradient-orange-left pa-3">
                                                            <MudText Style="color: white" Typo="Typo.h3">
                                                                @categoryData.Category
                                                            </MudText>
                                                        </MudPaper>
                                                        <MudDivider />
                                                        <MudGrid>
                                                            <MudVirtualize Items="categoryData.SportList" Context="sportData">
                                                                <MudItem xs="6" sm="4" md="3" lg="2">
                                                                    <MudPaper Elevation="0">
                                                                        <MudStack Class="pa-3" Spacing="3">
                                                                            <MudImage Width="75" Src="@($"Media/Sports/Icons/{sportData.Sport}.png")"></MudImage>
                                                                            <MudText Color="Color.Tertiary">@sportData.Sport</MudText>
                                                                        </MudStack>
                                                                    </MudPaper>
                                                                </MudItem>
                                                            </MudVirtualize>
                                                        </MudGrid>
                                                    </MudStack>
                                                </MudItem>
                                            </Virtualize>
                                        }
                                    </MudGrid>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="12">
                    <FooterComponent />
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>
@code {
    // Get API URL
    private readonly string API_URL = APIService.Palaro2026API;

    private string eventStarted = string.Empty;
    private string days = string.Empty;
    private string hours = string.Empty;
    private string min = string.Empty;
    private string sec = string.Empty;
    private DateTime targetDate = new DateTime(2026, 7, 10, 0, 0, 0);
    private Timer? timer;
    private List<CategoriesContent>? sportCategoryContents;
    private List<SportsContent>? sportContents;


    //API/Sports/SportCategoryDetails
    public partial class CategoriesContent
    {
        public string? Category { get; set; }
        public List<SportsContent>? SportList { get; set; }
    }

    public partial class SportsContent
    {
        public string? Sport { get; set; }
        public string? Description { get; set; }
    }

    private async Task StartCountdown()
    {
        // Set up a timer to trigger every second
        timer = new Timer(UpdateCountdown, null, 0, 1000);
    }

    private void UpdateCountdown(object state)
    {
        var timeLeft = targetDate - DateTime.Now;

        if (timeLeft.TotalSeconds > 0)
        {

            days = String.Format($"{timeLeft.Days}");
            hours = String.Format($"{timeLeft.Hours}");
            min = String.Format($"{timeLeft.Minutes}");
            sec = String.Format($"{timeLeft.Seconds}");
        }
        else
        {
            eventStarted = "The event has started!";
            timer?.Dispose(); // Stop the timer when the countdown is over
        }

        InvokeAsync(StateHasChanged); // Ensure UI is updated
    }

    public void Dispose()
    {
        timer?.Dispose(); // Clean up the timer when the component is disposed
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await GetSportContentsList();
        await GetSportCategoryContentsList();
        await StartCountdown();
    }

    private async Task GetSportCategoryContentsList()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportCategoryDetails")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sportCategoryContents = await JsonSerializer.DeserializeAsync<List<CategoriesContent>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportContentsList()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/Sport")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sportContents = await JsonSerializer.DeserializeAsync<List<SportsContent>>(responseStream, options);

            // Shuffle the list to randomize order
            var random = new Random();
            sportContents = sportContents.OrderBy(_ => random.Next()).ToList();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}

