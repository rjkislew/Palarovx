@page "/"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject ColorService ColorService
@inject HttpClient httpClient

<MudGrid Spacing="10">
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.False" Gutters=false>
            <MudStack Class="pt-20 absolute pa-5 z-10" Style="left: 0; top: 0" Spacing="1">
                <MudHidden Breakpoint="Breakpoint.MdAndDown">
                    <MudStack Row Spacing="0" AlignItems="AlignItems.Center">
                        <MudImage Src="Media/Logo/Logo-with-2026.png" Height="200" Width="200" />
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.h2" Class="pl-2" HtmlTag="h1" Style="color: white">Palarong Pambansa <br> Agusan del Sur 2026</MudText>
                            <MudPaper Square Elevation="0" Class="pa-2" Style="@($"background-color: {ColorService.SelectedColor}")" Width="190px">
                                <MudText Typo="Typo.body2" Class="pl-2" Style="color: white">@days d : @hours h : @min m : @sec s</MudText>
                            </MudPaper>
                        </MudStack>
                    </MudStack>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert>
                    <MudStack Spacing="0">
                        <MudText Class="mb-n4" HtmlTag="h1" Typo="Typo.h2" Style="color: white; font-size: 40px">Palarong Pambansa</MudText>
                        <MudText HtmlTag="h1" Typo="Typo.h2" Style="color: white; font-size: 40px">Agusan del Sur 2026</MudText>
                    </MudStack>
                    <MudPaper Square Elevation="0" Class="pa-2" Style="@($"background-color: {ColorService.SelectedColor}")" Width="190px">
                        <MudText Typo="Typo.body2" Class="pl-2" Style="color: white">@days d : @hours h : @min m : @sec s</MudText>
                    </MudPaper>
                </MudHidden>
            </MudStack>
            @if (sportContents?.Any() == true)
            {
                <MudCarousel TData="object" Style="height: calc(100vh - 64px)" EnableSwipeGesture ShowArrows="false" ShowBullets="false">
                    <MudVirtualize Items="sportContents" Context="sportData">
                        <MudCarouselItem>
                            <MudPaper Elevation="0" Class="rounded absolute z-2" Style="width: 100vw; height: 100vh; background-color: rgba(0,0,0, 0.60);"></MudPaper>
                            <MudStack Class="absolute pa-5 z-3" Style="left: 0; bottom: 0" Spacing="0">
                                <MudText Typo="Typo.h2" Style="color: white">@sportData.Sport</MudText>
                                <MudText Typo="Typo.body1" Style="color: white">@sportData.Description</MudText>
                            </MudStack>
                            <MudImage Style="width: 100vw; height: 100vh;" Class="z-1" Fluid ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Top" Src="@($"Media/Sports/Images/{sportData.Sport}.png")" />
                        </MudCarouselItem>
                    </MudVirtualize>
                </MudCarousel>
            }
            else
            {
                <MudPaper Square Elevation="0" Style="height: 100vh; background-color: white" Class="z-1" />
            }
        </MudContainer>
    </MudItem>
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudGrid Spacing="10">
                <MudItem xs=12>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid Spacing="10">
                        <!-- HOSPITALITY -->
                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudPaper Square Height="250px" Class="pa-0 relative" Elevation="0" Style="width: 100%; background-color: rgba(0, 0, 0, 0.60); background-image: url(Media/Images/Tourism.png); background-position: bottom; background-size: cover">
                                        <MudStack Class="absolute pa-5 z-2" Style="left: 0; bottom: 0" Spacing="0">
                                            <MudText Typo="Typo.h2" Style="color: white">
                                                Tourism
                                            </MudText>
                                            <MudText Typo="Typo.body2" Style="color: white">
                                                Discover the rich culture, scenic landscapes, and vibrant local attractions of Agusan del Sur that make Palaro 2026 an unforgettable experience.
                                            </MudText>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudPaper Square Height="250px" Class="pa-0 relative" Elevation="0" Style="width: 100%; background-color: rgba(0, 0, 0, 0.60); background-image: url(Media/Images/Accommodation.png); background-position: bottom; background-size: cover">
                                        <MudStack Class="absolute pa-5" Style="left: 0; bottom: 0" Spacing="0">
                                            <MudText Typo="Typo.h2" Style="color: white">
                                                Accommodation
                                            </MudText>
                                            <MudText Typo="Typo.body2" Style="color: white">
                                                Find the perfect place to stay in Agusan del Sur, offering a wide range of comfortable and convenient accommodations for all Palaro 2026 visitors.
                                            </MudText>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <!-- MAP -->
                        <MudItem xs="12">
                            <MudStack Row Spacing="5">
                                <MudButton FullWidth DropShadow="false" Variant="Variant.Filled" Style="@($"background-color: {ColorService.SelectedColor}; color: white")" Class="rounded-0 pa-5" Href="./venues">
                                    <MudText Typo="Typo.h3" HtmlTag="h2">Event Venues</MudText>
                                </MudButton>
                                <MudButton FullWidth DropShadow="false" Variant="Variant.Filled" Style="@($"background-color: {ColorService.SelectedColor}; color: white")" Class="rounded-0 pa-5" Href="./billeting-quarters" >
                                    <MudText Typo="Typo.h3" HtmlTag="h2">Billeting Quarters</MudText>
                                </MudButton>
                            </MudStack>
                        </MudItem>
                        <!-- SPORTS -->
                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudGrid Spacing="10" Justify="Justify.Center">
                                        @if (sportCategoryContents == null || sportCategoryContents.Count == 0)
                                        {
                                            <MudItem xs="12">
                                                <MudProgressLinear Style="@($"background-color: {ColorService.SelectedColor}")" Indeterminate="true" />
                                            </MudItem>
                                        }
                                        else
                                        {
                                            <Virtualize Items="sportCategoryContents" Context="categoryData">
                                                <MudItem xs="12">
                                                    <MudStack Spacing="2">
                                                        <MudText Style="@($"color: {ColorService.SelectedColor}")" Typo="Typo.h3">
                                                            @categoryData.Category
                                                        </MudText>
                                                        <MudDivider />
                                                        <MudGrid>
                                                            <MudVirtualize Items="categoryData.SportList" Context="sportData">
                                                                <MudItem xs="6" sm="4" md="3" lg="2">
                                                                    <MudPaper Square Elevation="0">
                                                                        <MudStack Class="pa-3" Spacing="3" AlignItems="AlignItems.Center">
                                                                            <MudImage Width="75" Src="@($"Media/Sports/Icons/{sportData.Sport}.png")"></MudImage>
                                                                            <MudText>@sportData.Sport</MudText>
                                                                        </MudStack>
                                                                    </MudPaper>
                                                                </MudItem>
                                                            </MudVirtualize>
                                                        </MudGrid>
                                                    </MudStack>
                                                </MudItem>
                                            </Virtualize>
                                        }
                                    </MudGrid>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="12">
                    <FooterComponent />
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>
@code {
    // Get API URL
    private readonly string API_URL = APIService.Palaro2026API;
    private string mapboxToken = MapBoxService.mapboxToken;

    private string eventStarted = string.Empty;
    private string days = string.Empty;
    private string hours = string.Empty;
    private string min = string.Empty;
    private string sec = string.Empty;
    private DateTime targetDate = new DateTime(2026, 7, 10, 0, 0, 0);
    private Timer? timer;
    private List<CategoriesContent>? sportCategoryContents;
    private List<SportsContent>? sportContents;


    //API/Sports/SportCategoryDetails
    public partial class CategoriesContent
    {
        public string? Category { get; set; }
        public List<SportsContent>? SportList { get; set; }
    }

    public partial class SportsContent
    {
        public string? Sport { get; set; }
        public string? Description { get; set; }
    }

    private Task StartCountdown()
    {
        // Set up a timer to trigger every second
        timer = new Timer(UpdateCountdown, null, 0, 1000);
        return Task.CompletedTask;
    }

    private void UpdateCountdown(object? state) // Use nullable object
    {
        var timeLeft = targetDate - DateTime.Now;

        if (timeLeft.TotalSeconds > 0)
        {
            // Update countdown values
            days = timeLeft.Days.ToString();
            hours = timeLeft.Hours.ToString();
            min = timeLeft.Minutes.ToString();
            sec = timeLeft.Seconds.ToString();
        }
        else
        {
            // Event has started
            eventStarted = "The event has started!";
            timer?.Dispose(); // Stop the timer when the countdown is over
            timer = null; // Clear the reference to the disposed timer
        }

        InvokeAsync(StateHasChanged); // Update UI
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await ColorService.InitializeAsync();
        await StartCountdown();
        await GetSportContentsList();
        await GetSportCategoryContentsList();
    }

    protected override void OnInitialized()
    {
        ColorService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ColorService.OnChange -= StateHasChanged;
    }

    private async Task GetSportCategoryContentsList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportsCategoriesDetails")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sportCategoryContents = await JsonSerializer.DeserializeAsync<List<CategoriesContent>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportContentsList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/Sport")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sportContents = await JsonSerializer.DeserializeAsync<List<SportsContent>>(responseStream, options);

            // Shuffle the list to randomize order
            var random = new Random();
            sportContents = sportContents?.OrderBy(_ => random.Next()).ToList();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}

