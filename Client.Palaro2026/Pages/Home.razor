@page "/"
@inject IJSRuntime JSRuntime
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks

<MudGrid Spacing="20">
    <MudItem xs="12">
        <MudGrid Spacing="20">
            <MudItem xs="12">
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h1" Class="mb-n5" Color="Color.Primary">Palarong Pambansa</MudText>
                    <MudStack Row AlignItems="AlignItems.End" Spacing="2">
                        <MudStack Row Spacing="1" AlignItems="AlignItems.End">
                            <MudText Typo="Typo.h3" HtmlTag="h2" Class="mb-n1" Color="Color.Tertiary">Agusan del Sur</MudText>
                            <MudText Typo="Typo.h3" HtmlTag="h2" Class="mb-n1" Color="Color.Secondary">2026</MudText>
                            <MudDivider Vertical="true" FlexItem="true" Class="border-2 mud-border-tertiary" />
                        </MudStack>
                        <MudText Typo="Typo.body2">@days d : @hours h : @min m : @sec s</MudText>
                    </MudStack>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="12">
                        <MudGrid Spacing="10" Justify="Justify.Center">
                            @if (sports == null || sports.Count == 0)
                            {
                                <MudItem xs="12">
                                    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
                                </MudItem>
                            }
                            else
                            {
                                <Virtualize Items="sports" Context="categoryData">
                                    <MudItem xs="12">
                                        <MudStack Spacing="2">
                                            <MudText Color="Color.Secondary" Typo="Typo.h2">
                                                @categoryData.category
                                            </MudText>
                                            <MudDivider Class="mud-border-tertiary" />
                                            <MudGrid>
                                                <Virtualize Items="categoryData.sports" Context="sportData">
                                                    <MudItem xs="6" sm="4" md="3" lg="2">
                                                        <MudPaper Height="200px" Outlined Class="pa-3 mud-border-tertiary">
                                                            <MudStack Spacing="3">
                                                                <MudImage Width="50" Src="@($"Media/Sports/Icons/{sportData.sport}.png")"></MudImage>
                                                                <MudText Typo="Typo.h3" Color="Color.Primary">@sportData.sport</MudText>
                                                                <MudText Typo="Typo.caption" Color="Color.Tertiary">@sportData.description</MudText>
                                                            </MudStack>
                                                        </MudPaper>
                                                    </MudItem>
                                                </Virtualize>
                                            </MudGrid>
                                        </MudStack>
                                    </MudItem>
                                </Virtualize>
                            }
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudPaper Height="250px" Class="pa-0 relative mud-border-tertiary" Outlined>
                            <MudStack Class="absolute pa-5" Style="left: 0; bottom: 0" Spacing="0">
                                <MudText Typo="Typo.h2" Color="Color.Primary">
                                    Tourism
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Tertiary">
                                    Discover the rich culture, scenic landscapes, and vibrant local attractions of Agusan del Sur that make Palaro 2026 an unforgettable experience.
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudPaper Height="250px" Class="pa-0 relative mud-border-tertiary" Outlined>
                            <MudStack Class="absolute pa-5" Style="left: 0; bottom: 0" Spacing="0">
                                <MudText Typo="Typo.h2" Color="Color.Primary">
                                    Accommodation
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Tertiary">
                                    Find the perfect place to stay in Agusan del Sur, offering a wide range of comfortable and convenient accommodations for all Palaro 2026 visitors.
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12">
                <SponsorsComponent />
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12">
        <FooterComponent />
    </MudItem>
</MudGrid>
@code {
    // Get API URL
    private readonly string API_URL = APIService.Palaro2026API;

    private string eventStarted = string.Empty;
    private string days = string.Empty;
    private string hours = string.Empty;
    private string min = string.Empty;
    private string sec = string.Empty;
    private DateTime targetDate = new DateTime(2026, 7, 10, 0, 0, 0);
    private Timer? timer;
    private List<sc_CategoriesDTO>? sports;

    //Data Entities
    public class sc_CategoriesDTO
    {
        public string? category { get; set; }
        public List<sc_SportsDTO>? sports { get; set; }
    }

    public class sc_SportsDTO
    {
        public string? sport { get; set; }
        public string? description { get; set; }
    }


    protected override void OnInitialized()
    {
        StartCountdown();
    }

    private void StartCountdown()
    {
        // Set up a timer to trigger every second
        timer = new Timer(UpdateCountdown, null, 0, 1000);
    }

    private void UpdateCountdown(object state)
    {
        var timeLeft = targetDate - DateTime.Now;

        if (timeLeft.TotalSeconds > 0)
        {

            days = String.Format($"{timeLeft.Days}");
            hours = String.Format($"{timeLeft.Hours}");
            min = String.Format($"{timeLeft.Minutes}");
            sec = String.Format($"{timeLeft.Seconds}");
        }
        else
        {
            eventStarted = "The event has started!";
            timer?.Dispose(); // Stop the timer when the countdown is over
        }

        InvokeAsync(StateHasChanged); // Ensure UI is updated
    }

    public void Dispose()
    {
        timer?.Dispose(); // Clean up the timer when the component is disposed
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await GetSportsList();
    }

    private async Task GetSportsList()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportCategories")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sports = await JsonSerializer.DeserializeAsync<List<sc_CategoriesDTO>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}

