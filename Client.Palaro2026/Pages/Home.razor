@page "/"

@using System.Text.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="20">
    <!-- Hero Content / Header -->
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.False" Gutters=false>
            <MudStack Class="pt-20 absolute pa-5 z-10" Style="left: 0; top: 0" Spacing="1">
                <MudHidden Breakpoint="Breakpoint.MdAndDown">
                    <MudStack Row Spacing="0" AlignItems="AlignItems.Center">
                        <MudImage Src="media/logo/logo with 2026.png" Height="200" Width="200" />
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.h2" Class="pl-2" HtmlTag="h1" Style="color: white">Palarong Pambansa <br> Agusan del Sur 2026</MudText>
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudChip T="string" Color="Color.Primary" Class="rounded-0">
                                    <MudText Typo="Typo.body2" Style="color: white; font-family: 'Space Mono', monospace;">
                                        @days d : @hours h : @min m : @sec s
                                    </MudText>

                                </MudChip>
                                <MudText Typo="Typo.body2" Color="Color.Tertiary">Ongoing Development</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert>
                    <MudImage Src="media/logo/Logo with 2026.png" Height="200" Width="200" />
                    <MudStack Spacing="0">
                        <MudText Class="mb-n4" HtmlTag="h1" Typo="Typo.h2" Style="color: white; font-size: 40px">Palarong Pambansa</MudText>
                        <MudText HtmlTag="h1" Typo="Typo.h2" Style="color: white; font-size: 40px">Agusan del Sur 2026</MudText>
                    </MudStack>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudChip T="string" Color="Color.Primary" Class="rounded-0">
                            <MudText Typo="Typo.body2" Style="color: white; font-family: 'Space Mono', monospace;">
                                @days d : @hours h : @min m : @sec s
                            </MudText>

                        </MudChip>
                        <MudText Typo="Typo.body2" Color="Color.Tertiary">Ongoing Development</MudText>
                    </MudStack>
                </MudHidden>
            </MudStack>
            @if (_sports?.Any() == true)
            {
                <MudCarousel TData="object" Style="height: calc(100vh - 48px)" EnableSwipeGesture ShowArrows="false" ShowBullets="false">
                    <MudVirtualize Items="_randomSports" Context="sportData">
                        <MudCarouselItem>
                            <MudPaper Elevation="0" Class="rounded absolute z-2" Style="width: 100vw; height: 100vh; background-color: rgba(0,0,0, 0.60);"></MudPaper>
                            <MudStack Class="absolute pa-5 z-3" Style="left: 0; bottom: 0" Spacing="0">
                                <MudText Typo="Typo.h2" Style="color: white">@sportData.Sport</MudText>
                                <MudText Typo="Typo.body1" Style="color: white">@sportData.Description</MudText>
                            </MudStack>
                            <MudImage Style="width: 100vw; height: 100vh;" Class="z-1 rounded-0" Fluid ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Top" Src="@($"media/sports/images/{sportData.Sport}.png")" />
                        </MudCarouselItem>
                    </MudVirtualize>
                </MudCarousel>
            }
            else
            {
                <MudPaper Square Elevation="0" Style="height: 100vh; background-color: white" Class="z-1" />
            }
        </MudContainer>
    </MudItem>

    <!-- Home Content -->
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudGrid Spacing="20">

                <!-- Featured News Section -->
                <MudItem xs="12">
                    <MudStack Spacing="0">
                        <MudImage ObjectFit="ObjectFit.Contain" Style="height: 100%; width: 100%" Src="media/images/DO-Plaza-Memorial-Sports-Complex.jpg" />
                        <MudText Typo="Typo.caption" Class="mb-3"><b>Aerial View of Sports Complex:</b> A drone shot showcasing the expansive layout of the D.O. Plaza Memorial Sports Complex, highlighting its modern infrastructure.</MudText>
                        <MudText Typo="Typo.body2" Style="line-height: 2">
                            The 66th Palarong Pambansa is scheduled to be held in 2026 in Prosperidad, Agusan del Sur, marking the first time the province will host this national sporting event. This opportunity is considered a <i>"dream come true"</i> for the province, which has been aspiring to host the Palaro for about three decades.

                            The decision to award the hosting rights to Agusan del Sur was announced during the closing ceremonies of the 2024 Palarong Pambansa in Cebu City. The province's bid highlighted its extensive sports facilities, accommodations, and transportation infrastructure, emphasizing its readiness to welcome athletes, coaches, and spectators from across the Philippines.
                        </MudText>
                    </MudStack>
                </MudItem>

                <!-- Tourism Section -->
                <MudItem xs="12">
                    <MudStack Class="flex-md-row">
                        <MudStack Spacing="0">
                            <MudImage ObjectFit="ObjectFit.Contain" Style="height: 100%; width: 100%" Src="media/images/unlock-the-landlocked.png" />
                        </MudStack>
                        <MudStack>
                            <MudText Typo="Typo.body1">
                                <b>
                                    Discover Agusan del Sur: Beyond the Games
                                </b>
                            </MudText>
                            <MudText Typo="Typo.body2" Style="line-height: 2">
                                Welcome to Palaro 2026 in Agusan del Sur—where the excitement goes beyond the competition! Explore hidden gems like the serene Agusan Marsh, the stunning Gibong River, and the untouched beauty of Lake Himbang. Dive into the rich culture of the Manobo people, savor local flavors, and experience warm hospitality. Whether you’re up for adventure or relaxation, Agusan del Sur is ready to amaze you. Come for the games, stay for the experience!
                            </MudText>
                            <MudButton Href="https://tourism.agusandelsur.gov.ph/" Target="blank" Style="text-transform: none">Visit the Official Site</MudButton>
                        </MudStack>
                    </MudStack>
                </MudItem>

                <!-- SPORTS -->
                <MudItem xs="12">
                    <MudStack>
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h2">Sports</MudText>
                            <MudText Typo="Typo.caption">Palaro Sports features diverse athletic events, promoting competition, teamwork, and inclusivity across various disciplines.</MudText>
                        </MudStack>
                        <MudTabs Elevation="0" ApplyEffectsToContainer="true" PanelClass="pa-6">
                            <MudVirtualize Items="_sportCategories" Context="categoryData">
                                <MudTabPanel Style="text-transform: none" Text="@categoryData.Category">
                                    <MudStack Row Wrap="Wrap.Wrap">
                                        <MudVirtualize Items="_sports?.Where(s => s.SportCategoryID == categoryData.ID).ToList()" Context="sport">
                                            <MudChip T="string" Variant="Variant.Outlined">
                                                <MudStack Row AlignItems="AlignItems.Center">
                                                    <MudImage ObjectFit="ObjectFit.Contain" Height="15" Src="@($"media/sports/icons/{sport.Sport}.png")" />
                                                    @sport.Sport
                                                </MudStack>
                                            </MudChip>
                                        </MudVirtualize>
                                    </MudStack>
                                </MudTabPanel>
                            </MudVirtualize>
                        </MudTabs>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>
<FooterComponent />

@code
{
    private string eventStarted = string.Empty;
    private string days = string.Empty;
    private string hours = string.Empty;
    private string min = string.Empty;
    private string sec = string.Empty;
    private DateTime targetDate = new DateTime(2026, 7, 10, 0, 0, 0);
    private Timer? timer;
    private List<SportsDTO.Sports>? _sports;
    private List<SportsDTO.Sports>? _randomSports;
    private List<SportsDTO.SportCategories>? _sportCategories;


    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await StartCountdown();
        await GetSportsAsync();
        await GetSportCategoriesAsync();
    }


    private Task StartCountdown()
    {
        // Set up a timer to trigger every second
        timer = new Timer(UpdateCountdown, null, 0, 1000);
        return Task.CompletedTask;
    }

    private void UpdateCountdown(object? state)
    {
        var timeLeft = targetDate - DateTime.Now;

        if (timeLeft.TotalSeconds > 0)
        {
            days = timeLeft.Days.ToString("D2");
            hours = timeLeft.Hours.ToString("D2");
            min = timeLeft.Minutes.ToString("D2");
            sec = timeLeft.Seconds.ToString("D2");
        }
        else
        {
            // Event has started
            eventStarted = "The event has started!";
            timer?.Dispose(); // Stop the timer when the countdown is over
            timer = null; // Clear the reference to the disposed timer
        }

        InvokeAsync(StateHasChanged); // Update UI
    }

    private async Task GetSportsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sports = await JsonSerializer.DeserializeAsync<List<SportsDTO.Sports>>(responseStream, options);

            // Shuffle the list to randomize order
            var random = new Random();
            _randomSports = _sports?.OrderBy(_ => random.Next()).ToList();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
    private async Task GetSportCategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Categories";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}