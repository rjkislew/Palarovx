@page "/"

@using System.Text.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="10">
    <!-- Hero Content / Header -->
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.False" Gutters=false>
            <MudStack Class="pt-20 absolute pa-5 z-10" Style="left: 0; top: 0" Spacing="1">
                <MudHidden Breakpoint="Breakpoint.MdAndDown">
                    <MudStack Row Spacing="0" AlignItems="AlignItems.Center">
                        <MudImage Src="media/logo/logo with 2026.png" Height="200" Width="200" />
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.h2" Class="pl-2" HtmlTag="h1" Style="color: white">Palarong Pambansa <br> Agusan del Sur 2026</MudText>
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudChip T="string" Color="Color.Primary" Class="rounded-0">
                                    <MudText Typo="Typo.body2" Style="color: white; font-family: 'Space Mono', monospace;">
                                        @days d : @hours h : @min m : @sec s
                                    </MudText>

                                </MudChip>
                                <MudText Typo="Typo.body2" Color="Color.Tertiary">Ongoing Development</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert>
                    <MudImage Src="media/logo/Logo with 2026.png" Height="200" Width="200" />
                    <MudStack Spacing="0">
                        <MudText Class="mb-n4" HtmlTag="h1" Typo="Typo.h2" Style="color: white; font-size: 40px">Palarong Pambansa</MudText>
                        <MudText HtmlTag="h1" Typo="Typo.h2" Style="color: white; font-size: 40px">Agusan del Sur 2026</MudText>
                    </MudStack>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudChip T="string" Color="Color.Primary" Class="rounded-0">
                            <MudText Typo="Typo.body2" Style="color: white; font-family: 'Space Mono', monospace;">
                                @days d : @hours h : @min m : @sec s
                            </MudText>

                        </MudChip>
                        <MudText Typo="Typo.body2" Color="Color.Tertiary">Ongoing Development</MudText>
                    </MudStack>
                </MudHidden>
            </MudStack>
            @if (_sports?.Any() == true)
            {
                <MudCarousel TData="object" Style="height: calc(100vh - 48px)" EnableSwipeGesture ShowArrows="false" ShowBullets="false">
                    <MudVirtualize Items="_sports" Context="sportData">
                        <MudCarouselItem>
                            <MudPaper Elevation="0" Class="rounded absolute z-2" Style="width: 100vw; height: 100vh; background-color: rgba(0,0,0, 0.60);"></MudPaper>
                            <MudStack Class="absolute pa-5 z-3" Style="left: 0; bottom: 0" Spacing="0">
                                <MudText Typo="Typo.h2" Style="color: white">@sportData.Sport</MudText>
                                <MudText Typo="Typo.body1" Style="color: white">@sportData.Description</MudText>
                            </MudStack>
                            <MudImage Style="width: 100vw; height: 100vh;" Class="z-1 rounded-0" Fluid ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Top" Src="@($"media/sports/images/{sportData.Sport}.png")" />
                        </MudCarouselItem>
                    </MudVirtualize>
                </MudCarousel>
            }
            else
            {
                <MudPaper Square Elevation="0" Style="height: 100vh; background-color: white" Class="z-1" />
            }
        </MudContainer>
    </MudItem>

    <!-- Home Content -->
    <MudItem xs="12">
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudGrid Spacing="10">
                <!-- HOSPITALITY -->
                <!-- Tourism Card -->
                <MudItem xs="12" md="6">
                    <MudPaper Height="250px" Class="pa-0 relative" Style="width: 100%; background-color: rgba(0, 0, 0, 0.80); background-image: url(media/images/Tourism.png); background-position: bottom; background-size: cover">
                        <MudStack Class="absolute pa-5 z-2" Style="left: 0; bottom: 0" Spacing="0">
                            <MudText Typo="Typo.h2" Style="color: white">
                                Tourism
                            </MudText>
                            <MudText Typo="Typo.body2" Style="color: white">
                                Discover the rich culture, scenic landscapes, and vibrant local attractions of Agusan del Sur that make Palaro 2026 an unforgettable experience.
                            </MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Accommodation Card -->
                <MudItem xs="12" md="6">
                    <MudPaper Height="250px" Class="pa-0 relative" Style="width: 100%; background-color: rgba(0, 0, 0, 0.80); background-image: url(media/images/Accommodation.png); background-position: bottom; background-size: cover">
                        <MudStack Class="absolute pa-5" Style="left: 0; bottom: 0" Spacing="0">
                            <MudText Typo="Typo.h2" Style="color: white">
                                Accommodation
                            </MudText>
                            <MudText Typo="Typo.body2" Style="color: white">
                                Find the perfect place to stay in Agusan del Sur, offering a wide range of comfortable and convenient accommodations for all Palaro 2026 visitors.
                            </MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Venues and Quarters Cards -->
                <!-- Venue -->
                <MudItem xs="12" md="6">
                    <MudLink Href="./venues" Underline="Underline.None">
                        <MudPaper>
                            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="pa-5">
                                <MudText Typo="Typo.h3" Color="Color.Primary" HtmlTag="h2">Event Venues</MudText>
                            </MudStack>
                        </MudPaper>
                    </MudLink>
                </MudItem>


                <!-- Billeting Quarters -->
                <MudItem xs="12" md="6">
                    <MudLink Href="./billeting-quarters" Underline="Underline.None">
                        <MudPaper>
                            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="pa-5">
                                <MudText Typo="Typo.h3" Color="Color.Primary" HtmlTag="h2">Billeting Quarters</MudText>
                            </MudStack>
                        </MudPaper>
                    </MudLink>
                </MudItem>

                <!-- SPORTS -->
                <MudItem xs="12">
                    @if (_sportCategories == null || _sportCategories.Count == 0)
                    {
                        <MudGrid>
                            @for (int i = 0; i < 3; i++)
                            {
                                <MudItem xs="12" sm="4">
                                    <MudSkeleton Height="250px"></MudSkeleton>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <MudGrid>
                            <MudVirtualize Items="_sportCategories" Context="categoryData">
                                <MudItem xs="12" sm="4">
                                    <MudLink Href="@($"./sports/{categoryData.Category}")" Underline="Underline.None">
                                        <MudPaper Height="250px" Elevation="1">
                                            <MudStack Style="height: 100%" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="pa-5">
                                                <MudText Typo="Typo.h2" Color="Color.Primary">@categoryData.Category</MudText>
                                            </MudStack>
                                        </MudPaper>
                                    </MudLink>
                                </MudItem>
                            </MudVirtualize>
                        </MudGrid>
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>
<FooterComponent />

@code
{
    private string eventStarted = string.Empty;
    private string days = string.Empty;
    private string hours = string.Empty;
    private string min = string.Empty;
    private string sec = string.Empty;
    private DateTime targetDate = new DateTime(2026, 7, 10, 0, 0, 0);
    private Timer? timer;
    private List<SportsDTO.Sports>? _sports;
    private List<SportsDTO.SportCategories>? _sportCategories;


    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        await StartCountdown();
        await GetSportsAsync();
        await GetSportCategoriesAsync();
    }


    private Task StartCountdown()
    {
        // Set up a timer to trigger every second
        timer = new Timer(UpdateCountdown, null, 0, 1000);
        return Task.CompletedTask;
    }

    private void UpdateCountdown(object? state)
    {
        var timeLeft = targetDate - DateTime.Now;

        if (timeLeft.TotalSeconds > 0)
        {
            days = timeLeft.Days.ToString("D2");
            hours = timeLeft.Hours.ToString("D2");
            min = timeLeft.Minutes.ToString("D2");
            sec = timeLeft.Seconds.ToString("D2");
        }
        else
        {
            // Event has started
            eventStarted = "The event has started!";
            timer?.Dispose(); // Stop the timer when the countdown is over
            timer = null; // Clear the reference to the disposed timer
        }

        InvokeAsync(StateHasChanged); // Update UI
    }

    private async Task GetSportsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sports = await JsonSerializer.DeserializeAsync<List<SportsDTO.Sports>>(responseStream, options);

            // Shuffle the list to randomize order
            var random = new Random();
            _sports = _sports?.OrderBy(_ => random.Next()).ToList();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
    private async Task GetSportCategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Categories";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}