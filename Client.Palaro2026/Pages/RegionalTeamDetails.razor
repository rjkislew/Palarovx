@page "/regional-teams/{Abbreviation}-{Region}"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient


<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12" md="4">
            <MudStack Row AlignItems="AlignItems.Center">
                <MudImage Src="@($"media/regions/{Abbreviation}.png")" Height="100" />
                <MudStack Spacing="0">
                    <MudText Style="font-size: 40px">@Abbreviation</MudText>
                    <MudText>@Region</MudText>
                </MudStack>
            </MudStack>
        </MudItem>
        <MudItem xs="12" md="8">
            <MudPaper Outlined Class="pa-3">
                <MudGrid>
                    <MudItem xs="3">
                        <MudStack Spacing="2" AlignItems="AlignItems.Center">
                            <MudText>Gold</MudText>
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Style="@($"color: {Colors.Amber.Accent4}")" />
                            <MudText Style="font-size: 20px">
                                @((_regionalMedalTallies?.Gold ?? 0) == 0 ? "-" : _regionalMedalTallies?.Gold)
                            </MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="3">
                        <MudStack Spacing="2" AlignItems="AlignItems.Center">
                            <MudText>Silver</MudText>
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Style="@($"color: {Colors.BlueGray.Lighten4}")" />
                            <MudText Style="font-size: 20px">
                                @((_regionalMedalTallies?.Silver ?? 0) == 0 ? "-" : _regionalMedalTallies?.Silver)
                            </MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="3">
                        <MudStack Spacing="2" AlignItems="AlignItems.Center">
                            <MudText>Bronze</MudText>
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Style="@($"color: {Colors.DeepOrange.Lighten1}")" />
                            <MudText Style="font-size: 20px">
                                @((_regionalMedalTallies?.Bronze ?? 0) == 0 ? "-" : _regionalMedalTallies?.Bronze)
                            </MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="3">
                        <MudStack Spacing="2" AlignItems="AlignItems.Center">
                            <MudText>Total</MudText>
                            <MudText Style="font-size: 40px; font: bold">@_regionalMedalTallies?.Total</MudText>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <MudFlexBreak />

        <MudItem xs="12">
            @if (isEmpty)
            {
                <MudText>No ongoing events for this region, yet.</MudText>
            }
            else if (noConnection)
            {
                <MudText>Check your internet connection.    </MudText>   
            }
            else
            {
                <MudTabs Elevation="0" ApplyEffectsToContainer="true" PanelClass="pa-6" Centered>
                    @foreach (var isFinished in new[] { false, true }) // Loop for both Ongoing & Finished
                    {
                        var filteredEvents = _eventDetails?.Where(e => e.IsFinished == isFinished).ToList();

                        if (filteredEvents?.Any() == true) // Create tab only if there are events
                        {
                            <MudTabPanel Style="text-transform: none" Text="@(isFinished ? "Finished" : "Ongoing")">
                                <MudGrid>
                                    <MudVirtualize Items="filteredEvents" Context="eventDetail">
                                        <MudItem xs="12" sm="6" md="4">
                                            <MudPaper Outlined Style="height: 100%" Class="hover-effect">
                                                @* Content *@
                                                <MudLink Href="@($"./events/{eventDetail.ID}")" Underline="Underline.None" Color="Color.Dark" Style="height: 100%; user-select: text; -webkit-user-drag: none;" draggable="auto">
                                                    <MudStack Style="height: 100%" Spacing="0">

                                                        @* Image *@
                                                        @if (eventDetail.OnStream == true && eventDetail.IsFinished == false)
                                                        {
                                                            <MudStack Class="relative">
                                                                <MudChip Icon="@Icons.Material.Filled.FiberManualRecord" T="string" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" Class="absolute ml-3 mt-3 animate-blink">
                                                                    Live
                                                                </MudChip>
                                                                <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                                          Style="width: 100%; height: 250px"
                                                                          Class="rounded-t"
                                                                          ObjectFit="ObjectFit.Cover" />
                                                            </MudStack>
                                                        }
                                                        else if (eventDetail.OnStream == true && eventDetail.IsFinished == true)
                                                        {
                                                            <MudStack Class="relative">
                                                                <MudChip Icon="@Icons.Material.Filled.PlayCircleFilled" T="string" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Class="absolute ml-3 mt-3">
                                                                    Was Live
                                                                </MudChip>
                                                                <MudImage Src="@GetThumbnailUrl(eventDetail.StreamURL)"
                                                                          Style="width: 100%; height: 250px"
                                                                          Class="rounded-t"
                                                                          ObjectFit="ObjectFit.Cover" />
                                                            </MudStack>
                                                        }
                                                        else
                                                        {
                                                            <MudStack Class="relative">
                                                                <MudChip Icon="@Icons.Material.Filled.CircleNotifications" T="string" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Style="z-index: 10" Class="absolute ml-3 mt-3">
                                                                    Not on live
                                                                </MudChip>
                                                                <MudImage Src="@($"media/sports/icons/white/{eventDetail.Sport}.png")"
                                                                          Style="width: 50px; height: 50px; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10"
                                                                          Class="rounded-t absolute "
                                                                          ObjectFit="ObjectFit.Cover" />
                                                                <MudStack Style="background-color: rgba(0,0,0,0.5); width: 100%; height: 250px" Class="rounded-t absolute" />
                                                                <MudImage Src="@($"media/sports/images/{eventDetail.Sport}.png")"
                                                                          Style="width: 100%; height: 250px"
                                                                          Class="rounded-t"
                                                                          ObjectFit="ObjectFit.Cover" />
                                                            </MudStack>
                                                        }

                                                        @* Title *@
                                                        @* Sport Details *@
                                                        <MudStack Justify="Justify.SpaceBetween" Style="height: 100%" Class="pa-3">
                                                            <MudStack Spacing="0">
                                                                <MudText Style="font-weight: bold">@eventDetail.Subcategory</MudText>
                                                                <MudText Typo="Typo.caption">@eventDetail.EventStage ∙ @eventDetail.Sport</MudText><MudText Typo="Typo.caption">
                                                                    @{
                                                                        var eventDate = eventDetail.Date;
                                                                        var displayDate = eventDate.HasValue
                                                                        ? (eventDate.Value.Date == DateTime.Today ? "Today"
                                                                        : eventDate.Value.Date == DateTime.Today.AddDays(1) ? "Tomorrow"
                                                                        : eventDate.Value.ToString("dddd - MMMM d"))
                                                                        : "No Date";

                                                                        var displayTime = eventDetail.Time.HasValue
                                                                        ? DateTime.Today.Add(eventDetail.Time.Value).ToString("hh:mm tt")
                                                                        : "No Time";
                                                                    }
                                                                    @displayDate - @displayTime ∙ @eventDetail.Venue
                                                                </MudText>
                                                            </MudStack>

                                                            <MudText Typo="Typo.caption" Class="mt-3" Style="word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">
                                                                #@eventDetail.Category?.Replace(" ", "") #@eventDetail.Level?.Replace(" ", "") #@eventDetail.EventStage?.Replace(" ", "")
                                                                <MudElement>
                                                                    #
                                                                    @if (eventDetail.Gender == "Male")
                                                                    {
                                                                        <MudText Typo="Typo.caption">Male♂️</MudText>
                                                                    }
                                                                    else if (eventDetail.Gender == "Female")
                                                                    {
                                                                        <MudText Typo="Typo.caption">Female♀️</MudText>
                                                                    }
                                                                    else
                                                                    {
                                                                        <MudText Typo="Typo.caption">Mixed♂️♀️</MudText>
                                                                    }
                                                                </MudElement>
                                                            </MudText>
                                                        </MudStack>
                                                    </MudStack>
                                                </MudLink>
                                            </MudPaper>
                                        </MudItem>
                                    </MudVirtualize>
                                </MudGrid>
                            </MudTabPanel>
                        }
                    }
                </MudTabs>
            }
        </MudItem>
    </MudGrid>
</MudContainer>
<FooterComponent />

@code {
    [Parameter]
    public string? Region { get; set; }
    [Parameter]
    public string? Abbreviation { get; set; }

    private List<EventsDTO.EventDetails.Event>? _eventDetails;
    private MedalTallyDTO.RegionalMedalTally? _regionalMedalTallies;

    private bool isEmpty = false;
    private bool noConnection = false;

    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public string? StreamTitle { get; set; }
                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                // public int? SchoolRegionID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                //

                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
    }

    public class MedalTallyDTO
    {
        public class RegionalMedalTally
        {
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
            public int? Gold { get; set; }
            public int? Silver { get; set; }
            public int? Bronze { get; set; }
            public int? Total { get; set; }
        }
    }

    private string GetThumbnailUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return string.Empty;

        if (url.Contains("youtube.com/watch?v="))
        {
            var videoId = url.Split("v=")[1].Split('&')[0];
            return $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg";
        }

        return "media/images/no-thumbnail-default.png";
    }

    private string GetMedalColor(int index)
    {
        return index switch
        {
            0 => Colors.Amber.Accent4,   // First place (Gold)
            1 => Colors.BlueGray.Lighten4, // Second place (Silver)
            2 => Colors.DeepOrange.Lighten1, // Third place (Bronze)
            _ => "transparent" // Default color for others
        };
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Abbreviation))
        {
            Abbreviation = Uri.UnescapeDataString(Abbreviation);
        }
        if (!string.IsNullOrEmpty(Region))
        {
            Region = Uri.UnescapeDataString(Region);
        }
        await GetEventsAsync();
        await GetMedalTallyByRegionAsync();
    }

    private async Task GetEventsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Details?region={Region}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventDetails = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventDetails.Event>>(responseStream, options);

            if (!httpResponse.IsSuccessStatusCode)
            {
                noConnection = true;
            }

            if (_eventDetails == null || !_eventDetails.Any())
            {
                isEmpty = true;
            }
        }
        catch (HttpRequestException)
        {
            _eventDetails = null;
        }
    }

    private async Task GetMedalTallyByRegionAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/MedalTally/ByRegion?regionFilter={Region}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var medalTallyArray = JsonSerializer.Deserialize<List<MedalTallyDTO.RegionalMedalTally>>(responseStream, options);

            _regionalMedalTallies = medalTallyArray?.FirstOrDefault();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON Deserialization Error: {ex.Message}");
        }
    }
}
