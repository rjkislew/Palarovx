@page "/news"
@page "/news/{NewsCategory}"

@using System.Text.Json
@using System.Threading.Tasks
@using Client.Palaro2026.Services
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject APIService apiService
@inject HttpClient httpClient

<PageTitle>News and updates | PALARO 2026 - Agusan del Sur</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h2">News and Updates</MudText>
            <MudText Typo="Typo.subtitle1">Catch up on the latest updates and highlights.</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudBreadcrumbs Style="font-size: 15px" Class="pa-0" Items="_items"></MudBreadcrumbs>
            <MudDivider />
        </MudItem>
        <MudItem xs="12">
            @if (_newsContents != null)
            {
                <MudStack AlignItems="AlignItems.Start" Spacing="10">
                    <MudSelect T="string"
                               Label="Select News Category"
                               Margin="Margin.Dense"
                               FullWidth="true"
                               Clearable="true"
                               Value="_selectedNewsCategory"
                               ValueChanged="OnNewsCategoryChangedAsync">
                        @if (_newsCategories != null)
                        {
                            @foreach (var category in _newsCategories)
                            {
                                <MudSelectItem Value="@category">@category</MudSelectItem>
                            }
                        }
                    </MudSelect>


                    <MudGrid>
                        @if (_newsContents?.Any() == true)
                        {
                            @foreach (var news in _newsContents.Take(3))
                            {
                                <MudItem xs="12" md="4">
                                    <MudLink Href="@($"news/{news.Category}/{news.Title}")" Underline="Underline.None">
                                        <MudPaper Outlined Style="height: 100%; position: relative;" Class="scale-up-center">
                                            <MudStack Spacing="0" AlignItems="AlignItems.Start" Style="height: 100%">

                                                @if (_newsImageMap.TryGetValue(news.ID!, out var images) && images?.Any() == true)
                                                {
                                                    <MudImage ObjectFit="ObjectFit.Cover"
                                                              Style="height: 100%; width: 100%"
                                                              Src="@images.First()">
                                                    </MudImage>

                                                    <!-- Gradient Overlay from top to bottom -->
                                                    <MudStack Style="position: absolute; top: 0; left: 0;  width: 100%; height: 40%; background: linear-gradient(to bottom, rgba(0, 0, 0, 0.6), transparent); z-index: 2; padding: 8px;">
                                                        <MudLink Href="@($"./news/{news.Category}")" Underline="Underline.None">
                                                            <MudText Typo="Typo.subtitle2" Style="color: white;">
                                                                @news.Category
                                                            </MudText>
                                                        </MudLink>
                                                    </MudStack>
                                                }

                                                <MudStack Class="pa-3" Style="height: 100%; width: 100%" Justify="Justify.SpaceBetween">
                                                    <MudStack Spacing="0">
                                                        <MudText Typo="Typo.body1">
                                                            <b>@news.Title</b>
                                                        </MudText>
                                                        <MudText Typo="Typo.caption">@news.Excerpt</MudText>
                                                    </MudStack>

                                                    <MudSpacer />

                                                    <MudStack Spacing="0" Row Justify="Justify.SpaceBetween" Style="width: 100%">
                                                        <MudText Typo="Typo.body2">
                                                            @news?.DatePublished?.ToString("MMMM dd, yyyy")
                                                        </MudText>
                                                        <MudText Typo="Typo.caption">
                                                            @GetRelativeTime(news?.DatePublished)
                                                        </MudText>
                                                    </MudStack>
                                                </MudStack>
                                            </MudStack>
                                        </MudPaper>
                                    </MudLink>
                                </MudItem>
                            }
                        }
                        else
                        {
                            for (int i = 0; i < 12; i++)
                            {
                                <MudItem xs="12" md="4">
                                    <MudPaper Outlined>
                                        <MudStack Spacing="0">
                                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                                            <MudStack Class="pa-3 mt-n2" Spacing="0">
                                                <MudSkeleton Height="100px"></MudSkeleton>
                                                <MudSkeleton></MudSkeleton>
                                                <MudSkeleton></MudSkeleton>
                                                <MudSkeleton></MudSkeleton>
                                                <MudSkeleton></MudSkeleton>
                                                <MudStack Row Justify="Justify.SpaceBetween" Class="mt-5">
                                                    <MudSkeleton Width="50px" />
                                                    <MudSkeleton Width="50px" />
                                                </MudStack>
                                            </MudStack>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </MudStack>
            }
            else
            {
                <MudText>Loading categories...</MudText>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<!-- Footer -->
<FooterComponent />

@code {
    /* ---------------------------
       Parameters, & Variables

       - stores parameters passed to the component - URL parameters
       - manages and stores and data coming from API calls

    --------------------------- */

    // URL parameter for filtering news by category
    [Parameter] public string? NewsCategory { get; set; }

    // To store the fetched news details
    private List<NewsDTO.NewsDetails.NewsContent>? _newsContents;

    // To map news IDs to their corresponding image URLs
    private Dictionary<string, List<string>> _newsImageMap = new();

    // To temporarily hold image URLs during loading
    private List<string>? _imagesValues = new();

    // To store distinct news categories for the dropdown
    private List<string?>? _newsCategories = new();

    // Breadcrumb items
    private List<BreadcrumbItem> _items = new();

    // To track the selected category in the dropdown
    private string? _selectedNewsCategory = null;

    /* ---------------------------
        Lifecycle Methods

        - methods that manage the component's lifecycle and state

    --------------------------- */

    // on component initialization fetch news details and setup breadcrumbs
    protected override async Task OnInitializedAsync()
    {
        // Fetch initial news details
        await GetNewsDetailsAsync();

        // Initialize breadcrumb items
        _items = new List<BreadcrumbItem>
        {
            new("Home", href: "./"),
            new("News", href: null, disabled: true)
        };

    }

    // Update news when the category parameter changes
    protected override async Task OnParametersSetAsync()
    {
        _selectedNewsCategory = NewsCategory;
        await GetNewsDetailsBySelectedCategoryAsync();
    }

    // Utility to convert DateTime to relative time string - displays how long ago the post was
    private string GetRelativeTime(DateTime? date)
    {
        if (date == null) return "";

        var timeSpan = DateTime.Now - date.Value;

        if (timeSpan.TotalSeconds < 60) return "just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes} minute{(timeSpan.TotalMinutes < 2 ? "" : "s")} ago";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours} hour{(timeSpan.TotalHours < 2 ? "" : "s")} ago";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays} day{(timeSpan.TotalDays < 2 ? "" : "s")} ago";
        if (timeSpan.TotalDays < 30) return $"{(int)(timeSpan.TotalDays / 7)} week{((int)(timeSpan.TotalDays / 7) == 1 ? "" : "s")} ago";
        if (timeSpan.TotalDays < 365) return $"{(int)(timeSpan.TotalDays / 30)} month{((int)(timeSpan.TotalDays / 30) == 1 ? "" : "s")} ago";

        return $"{(int)(timeSpan.TotalDays / 365)} year{((int)(timeSpan.TotalDays / 365) == 1 ? "" : "s")} ago";
    }

    /* ---------------------------
       API Calls

       - methods for fetching data from APIs

    --------------------------- */

    // Fetch all news details
    private async Task GetNewsDetailsAsync()
    {
        const string url = "/News/Details?&isArchived=false&isPublished=false";
        _newsContents = await apiService.GetAsync<NewsDTO.NewsDetails.NewsContent>(url);
        await LoadNewsImagesAsync(_newsContents!.Select(n => n.ID!));

        _newsCategories = _newsContents?
            .Select(n => n.Category)
            .Distinct()
            .OrderBy(c => c)
            .ToList();
    }

    // Fetch news details based on the selected category
    private async Task GetNewsDetailsBySelectedCategoryAsync()
    {
        var categoryEncoded = Uri.EscapeDataString(_selectedNewsCategory ?? string.Empty);
        string url = $"/News/Details?category={categoryEncoded}&isArchived=false&isPublished=false";

        _newsContents = await apiService.GetAsync<NewsDTO.NewsDetails.NewsContent>(url);
        await LoadNewsImagesAsync(_newsContents!.Select(n => n.ID!));

        NewsCategory = _selectedNewsCategory;
    }

    // Load images for each news item
    private async Task LoadNewsImagesAsync(IEnumerable<string>? newsIDs)
    {
        const string baseUrl = "https://palarongpambansa2026.com/attachments/media/news";

        foreach (var newsID in newsIDs!)
        {
            try
            {
                var apiUrl = $"/News/NewsImages?newsID={newsID}";
                var imageFiles = await apiService.GetAsync<string>(apiUrl);

                if (imageFiles is { Count: > 0 })
                {
                    var fullUrls = imageFiles
                        .Where(file => !string.IsNullOrWhiteSpace(file))
                        .Select(file => $"{baseUrl}/{newsID}/{file}")
                        .ToList();

                    _newsImageMap[newsID] = fullUrls;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading images for news {newsID}: {ex.Message}");
            }
        }
    }

    /* ---------------------------
       Methods

       - methods for handling data and events

    --------------------------- */

    // Handle changes in the news category selection
    private async Task OnNewsCategoryChangedAsync(string? category)
    {
        _selectedNewsCategory = category;

        if (!string.IsNullOrWhiteSpace(category))
            navigationManager.NavigateTo($"/news/{Uri.EscapeDataString(category)}");
        else
            navigationManager.NavigateTo("/news");

        await GetNewsDetailsBySelectedCategoryAsync();
    }

    /* ---------------------------
       DTO Classes

       - Data Transfer Objects for handling API responses
       Note: Please refer to the API documentation for more details.

    --------------------------- */

    // DTO for News Details
    public class NewsDTO
    {
        public class NewsDetails
        {
            public class NewsContent
            {
                public string? ID { get; set; }
                public string? Category { get; set; }
                public string? Author { get; set; }
                public string? Title { get; set; }
                public string? Content { get; set; }
                public string? Excerpt { get; set; }
                public DateTime? DateCreated { get; set; }
                public bool? IsPublished { get; set; }
                public DateTime? DatePublished { get; set; }
                public bool? IsArchived { get; set; }
                public List<string> ImageUrls { get; set; } = new();
            }
        }
    }
}

