@page "/events/management"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient httpClient
@inject ColorService ColorSettings

<MudGrid>
    <MudItem xs="12">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.False">
            <MudPaper Height="150px" Square Elevation="0" Class="mud-theme-primary">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Style="height: 100%">
                    <MudText Typo="Typo.h2" Style="color: white">Admin Control</MudText>
                    <MudText Typo="Typo.h3" Style="color: white">Events Management</MudText>
                </MudStack>
            </MudPaper>
        </MudContainer>
    </MudItem>
    <MudItem xs="12">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.False">
            <MudGrid Class="pa-5">

                <MudItem xs="12">
                    <MudButton OnClick="OpenLoginDialog">Add Event</MudButton>
                </MudItem>

                <!-- List of Events -->
                <MudItem xs="12">
                    <MudPaper Class="pa-3" Outlined>
                        <MudVirtualize Items="dateDetails" Context="dateList">
                            <MudVirtualize Items="dateList.CategoryList" Context="sportCategoriesDetails">
                                <MudText Typo="Typo.h3" Class="mt-5">@sportCategoriesDetails.Category</MudText>
                                <MudDivider Class="mb-5" />
                                <MudGrid>
                                    <MudVirtualize Items="sportCategoriesDetails.SportList" Context="sportsDetail">
                                        <MudVirtualize Items="sportsDetail.LevelList" Context="levelsDetail">
                                            <MudVirtualize Items="levelsDetail.GenderList" Context="gendersDetail">
                                                <MudVirtualize Items="gendersDetail.SportSubcategoryList" Context="sportSubcategoriesDetail">
                                                    <MudVirtualize Items="sportSubcategoriesDetail.EventList" Context="eventsDetails">
                                                        <MudItem xs="12" sm="6" md="4" lg="3">
                                                            <MudPaper Class="pa-1">
                                                                <MudStack Spacing="1">
                                                                    <MudStack Row AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween">
                                                                        <MudStack Spacing="0">
                                                                            <MudStack Class="flex-md-row" Justify="Justify.FlexEnd">
                                                                                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                                                                    <MudText><b>@sportsDetail.Sport</b></MudText>
                                                                                    <MudText Typo="Typo.caption">[@sportSubcategoriesDetail.Subcategory]</MudText>
                                                                                    @if (gendersDetail.Gender == "Male")
                                                                                    {
                                                                                        <MudIcon Icon="@Icons.Material.Filled.Male" Color="Color.Info" />
                                                                                    }
                                                                                    else if (gendersDetail.Gender == "Female")
                                                                                    {
                                                                                        <MudIcon Icon="@Icons.Material.Filled.Female" Color="Color.Error" />
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        <MudStack Row Spacing="0">
                                                                                            <MudIcon Icon="@Icons.Material.Filled.Male" Color="Color.Info" />
                                                                                            <MudIcon Icon="@Icons.Material.Filled.Female" Color="Color.Error" />
                                                                                        </MudStack>
                                                                                    }
                                                                                </MudStack>
                                                                            </MudStack>
                                                                            <MudText Typo="Typo.caption">@eventsDetails.ID</MudText>
                                                                            <MudText Typo="Typo.caption">@levelsDetail.Level</MudText>
                                                                        </MudStack>
                                                                        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="() => ToggleOpenEventSettings(eventsDetails.ID)" Size="Size.Small" />
                                                                    </MudStack>
                                                                    <!-- Event Time, Venue, Stream -->
                                                                    <MudPaper Outlined Class="pa-2">
                                                                        <MudStack Row Wrap="Wrap.Wrap" Spacing="0">
                                                                            @{
                                                                                string displayTime = eventsDetails.Time.HasValue
                                                                                ? DateTime.Today.Add(eventsDetails.Time.Value).ToString("hh:mm tt")
                                                                                : "No time available";
                                                                            }

                                                                            <!-- Time Chip -->
                                                                            <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.AccessTime" Color="Color.Primary" Variant="Variant.Text">
                                                                                <MudText Typo="Typo.caption" Color="Color.Tertiary">@displayTime</MudText>
                                                                            </MudChip>

                                                                            <!-- Venue Chip -->
                                                                            <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.LocationOn" Color="Color.Primary" Variant="Variant.Text">
                                                                                <MudText Typo="Typo.caption" Color="Color.Tertiary">@eventsDetails.Venue</MudText>
                                                                            </MudChip>

                                                                            <!-- Stream Chip -->
                                                                            @if (eventsDetails.OnStream == true)
                                                                            {
                                                                                @if (dateList.Date?.Date == DateTime.Today)
                                                                                {
                                                                                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.FiberManualRecord" Color="Color.Primary" Variant="Variant.Text">
                                                                                        <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                                                                            On stream
                                                                                        </MudText>
                                                                                    </MudChip>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.FiberManualRecord" Color="Color.Primary" Variant="Variant.Text">
                                                                                        <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                                                                            Was on stream
                                                                                        </MudText>
                                                                                    </MudChip>
                                                                                }
                                                                            }
                                                                        </MudStack>
                                                                    </MudPaper>
                                                                    <MudButton OnClick="() => ToggleTeamsButtonExpandedState(eventsDetails.ID)">
                                                                        <MudText Typo="Typo.caption" Color="Color.Primary">
                                                                            @(GetTeamsButtonExpandedState(eventsDetails.ID) ? "Close" : "Teams")
                                                                        </MudText>
                                                                        <MudPopover Elevation="3" RelativeWidth AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Open="@GetTeamsButtonExpandedState(eventsDetails.ID)">
                                                                            <MudStack Class="pa-5">
                                                                                @if (eventsDetails.TeamList != null && eventsDetails.TeamList.Any())
                                                                                {
                                                                                    int rank = 1;
                                                                                    foreach (var teamsDetail in eventsDetails.TeamList.OrderByDescending(t => t.Score))
                                                                                    {
                                                                                        if (teamsDetail.Score != null)
                                                                                        {
                                                                                            <div style="display: flex; align-items: center;">
                                                                                                <MudAvatar Size="Size.Small"
                                                                                                           Style="@($"background-color:{GetRankColor(rank)}; margin-right: 8px;")" />
                                                                                                <MudText Typo="Typo.caption">
                                                                                                    [@teamsDetail.Score] @teamsDetail.Region (@teamsDetail.Abbreviation)
                                                                                                </MudText>
                                                                                            </div>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            <MudText Typo="Typo.caption">
                                                                                                @teamsDetail.Region (@teamsDetail.Abbreviation)
                                                                                            </MudText>
                                                                                        }
                                                                                        rank++;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    <MudText Typo="Typo.caption">No teams available.</MudText>
                                                                                }
                                                                            </MudStack>
                                                                        </MudPopover>
                                                                    </MudButton>
                                                                </MudStack>
                                                                <MudPopover Open="@GetOpenEventSettings(eventsDetails.ID)" RelativeWidth AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                                                                    <MudStack>
                                                                        <MudButton>Delete</MudButton>
                                                                        <MudButton>Update</MudButton>
                                                                    </MudStack>
                                                                </MudPopover>
                                                            </MudPaper>
                                                        </MudItem>
                                                    </MudVirtualize>
                                                </MudVirtualize>
                                            </MudVirtualize>
                                        </MudVirtualize>
                                    </MudVirtualize>
                                </MudGrid>
                            </MudVirtualize>
                        </MudVirtualize>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>
@code {

    private async Task OpenLoginDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = true };

        // Show the dialog and await its result
        var dialog = DialogService.Show<Dialogs.AddEventDialog>("", options);
        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result.Canceled)
        {
            await GetEventDetails();
        }
    }


    private readonly string API_URL = APIService.Palaro2026API;
    private List<EventDetail.ED_DateContent>? dateDetails;
    private Dictionary<string, bool> expandedStatesTeams = new();
    private Dictionary<string, bool> expandedStatesSettings = new();

    private bool _openTeamsPopOver;

    private bool GetTeamsButtonExpandedState(string id)
    {
        return expandedStatesTeams.TryGetValue(id, out var isExpanded) && isExpanded;
    }

    private void ToggleTeamsButtonExpandedState(string id)
    {
        if (expandedStatesTeams.ContainsKey(id))
        {
            expandedStatesTeams[id] = !expandedStatesTeams[id];
            _openTeamsPopOver = !_openTeamsPopOver;
        }
        else
        {
            expandedStatesTeams[id] = true;
        }
    }

    private bool _openEventSettings;

    private bool GetOpenEventSettings(string id)
    {
        return expandedStatesSettings.TryGetValue(id, out var isExpanded) && isExpanded;
    }

    private void ToggleOpenEventSettings(string id)
    {
        if (expandedStatesSettings.ContainsKey(id))
        {
            expandedStatesSettings[id] = !expandedStatesSettings[id];
            _openEventSettings = !_openEventSettings;
        }
        else
        {
            expandedStatesSettings[id] = true;
        }
    }

    private string GetRankColor(int rank)
    {
        return rank switch
        {
            1 => MudBlazor.Colors.Amber.Accent4,
            2 => MudBlazor.Colors.Gray.Lighten2,
            3 => MudBlazor.Colors.Brown.Lighten3,
            _ => "inherit" // Default color for others
        };
    }

    public class EventDetail
    {
        public class ED_DateContent
        {
            public DateTime? Date { get; set; }
            public List<ED_SportCategoriesContent>? CategoryList { get; set; }
        }

        public class ED_SportCategoriesContent
        {
            public string? Category { get; set; }
            public List<ED_SportsContent>? SportList { get; set; }
        }

        public class ED_SportsContent
        {
            public string? Sport { get; set; }
            public List<ED_SchoolLevelsContent>? LevelList { get; set; }
        }

        public class ED_SchoolLevelsContent
        {
            public string? Level { get; set; }
            public List<ED_GenderCategoriesContent>? GenderList { get; set; }
        }

        public class ED_GenderCategoriesContent
        {
            public string? Gender { get; set; }
            public List<ED_SubCategoriesContent>? SportSubcategoryList { get; set; }
        }

        public class ED_SubCategoriesContent
        {
            public string? Subcategory { get; set; }
            public List<ED_EventsContent>? EventList { get; set; }
        }

        public class ED_EventsContent
        {
            public string ID { get; set; } = null!;
            public string? Venue { get; set; }
            public DateTime? Date { get; set; }
            public TimeSpan? Time { get; set; }
            public bool? OnStream { get; set; }
            public string? StreamURL { get; set; }
            public bool? IsFinished { get; set; }
            public byte[]? Attachement { get; set; }
            public bool? Archived { get; set; }
            public bool? Deleted { get; set; }
            public List<ED_RegionsContent>? TeamList { get; set; }
        }

        public class ED_RegionsContent
        {
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
            public int? Score { get; set; }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEventDetails();
    }

    
    private async Task GetEventDetails()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Events/EventDetails");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            dateDetails = await JsonSerializer.DeserializeAsync<List<EventDetail.ED_DateContent>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}