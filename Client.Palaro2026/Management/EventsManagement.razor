@page "/events/management"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text

@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject ColorService ColorSettings

<MudGrid>
    <MudItem xs="12">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.False">
            <MudPaper Height="150px" Square Elevation="0" Class="mud-theme-primary">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%">
                    <MudText Typo="Typo.h2" Style="color: white">Admin Control</MudText>
                    <MudText Typo="Typo.h3" Style="color: white">Events Management</MudText>
                </MudStack>
            </MudPaper>
        </MudContainer>
    </MudItem>
    <MudItem xs="12">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.False">
            <MudGrid Class="pa-5">
                <!-- Event Form -->
                <MudItem xs="12" md="4">
                    <MudPaper Class="pa-3 square">
                        <MudText Typo="Typo.h3" Color="Color.Primary">Event Form</MudText>
                        <MudStack Spacing="1" Class="pt-5">
                            <!-- Match ID -->
                            <MudField Margin="Margin.Dense" @bind-Value="eventIDValue" Label="Match ID" Variant="Variant.Outlined" FullWidth>@eventIDValue</MudField>

                            <!-- Category Selection -->
                            <MudSelect Margin="Margin.Dense" T="string" Label="Category" AdornmentColor="Color.Primary" Variant="Variant.Outlined" @bind-Value="categoryValue" FullWidth Clearable SelectedValuesChanged="GetSportList">
                                <MudVirtualize Items="categories" Context="category">
                                    <MudSelectItem Value="category.Category">@category.Category</MudSelectItem>
                                </MudVirtualize>
                            </MudSelect>


                            <!-- Venue Selection -->
                            <MudSelect Margin="Margin.Dense" T="string" Label="Venue" Variant="Variant.Outlined" @bind-Value="venueValue" AdornmentColor="Color.Primary" FullWidth Clearable>
                                <MudVirtualize Items="venues" Context="venue">
                                    <MudSelectItem Value="venue.Venue">@venue.Venue</MudSelectItem>
                                </MudVirtualize>
                            </MudSelect>

                            <!-- Team Versus Selection -->
                            <MudField Label="Regional Teams" Variant="Variant.Outlined">
                                <MudStack Spacing="2">
                                    <MudChipSet @bind-SelectedValues="regionalTeamsValue" SelectionMode="SelectionMode.MultiSelection" CheckMark Variant="Variant.Outlined" Class="gap-3">
                                        <MudVirtualize Items="regions" Context="region">
                                            <MudChip SelectedColor="Color.Primary" Value="@region.ID.ToString()">
                                                <MudText Typo="Typo.caption">
                                                    @region.Region (@region.Abbreviation)
                                                </MudText>
                                            </MudChip>
                                        </MudVirtualize>
                                    </MudChipSet>
                                    <MudStack Row Justify="Justify.FlexEnd" Class="pt-3">
                                        <MudPaper>
                                            <MudButton Class="rounded-0"
                                                       Size="Size.Small"
                                                       Color="@(regionalTeamsValue.Any() ? Color.Error : Color.Primary)"
                                                       Style="text-transform:none"
                                                       OnClick="ToggleSelectAll">
                                                @(regionalTeamsValue.Any() ? "Clear" : "Select All")
                                            </MudButton>
                                        </MudPaper>
                                    </MudStack>
                                </MudStack>
                            </MudField>

                            <!-- Schedule -->
                            <MudField Label="Schedule" Variant="Variant.Outlined">
                                <MudStack Row>
                                    <!-- Date -->
                                    <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" Color="Color.Primary" AdornmentColor="Color.Primary" @bind-Date="dateValue" />

                                    <!-- Time -->
                                    <MudTimePicker Variant="Variant.Outlined" Margin="Margin.Dense" Color="Color.Primary" AdornmentColor="Color.Primary" @bind-Time="timeValue" AmPm />
                                </MudStack>
                            </MudField>

                            <!-- On Stream Checker -->
                            <MudField Label="Stream" Variant="Variant.Outlined">
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <MudCheckBox Size="Size.Small" Color="Color.Primary" T="bool" Label="On Stream" @bind-Checked="onStreamChecked" />
                                    <MudTextField T="string" Margin="Margin.Dense" Label="Stream URL" @bind-Value="streamURLValue" Variant="Variant.Outlined"></MudTextField>
                                </MudStack>
                            </MudField>

                            <MudStack Row Justify="Justify.FlexEnd" Class="pt-5">
                                <MudPaper>
                                    <MudButton Class="rounded-0"
                                               Size="Size.Small"
                                               Variant="Variant.Text"
                                               Color="Color.Error"
                                               Style="text-transform:none">
                                        Clear
                                    </MudButton>
                                </MudPaper>
                                <MudPaper>
                                    <MudButton OnClick="AddEvent"
                                               Class="rounded-0"
                                               Size="Size.Small"
                                               Variant="Variant.Text"
                                               Color="Color.Primary"
                                               Style="text-transform:none">
                                        Add Event
                                    </MudButton>
                                </MudPaper>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" md="8">
                    <MudPaper Class="pa-3" Outlined>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>
<FooterComponent />
@code {
    private readonly string API_URL = APIService.Palaro2026API;
    private List<SportCategories>? categories; private string? categoryValue;
    private List<Venues>? venues;
    private List<Regions>? regions;
    private IReadOnlyCollection<string> regionalTeamsValue = new List<string>();
    private bool selectAllChecked;

    private string? eventIDValue;
    
    private string? sportValue;
    private string? levelValue;
    private string? genderValue;
    private string? subCategoryValue;
    private string? venueValue;
    private bool onStreamChecked = false;
    private string? streamURLValue;
    private DateTime? dateValue = DateTime.Today;
    private TimeSpan? timeValue = DateTime.Now.TimeOfDay;

    public class SportCategories
    {
        public int ID { get; set; }
        public string? Category { get; set; }
    }

    public class SportsContent
    {
        public int ID { get; set; }
        public string? Sport { get; set; }
        public string? Description { get; set; }
        public int? SportCategoryID { get; set; }
    }

    public class SchoolLevelsContent
    {
        public int ID { get; set; }
        public string? Level { get; set; }
    }

    public class GenderCategoriesContent
    {
        public int ID { get; set; }
        public string? Gender { get; set; }
    }

    public class SportSubCategoriesContent
    {
        public int ID { get; set; }
        public string? SubCategory { get; set; }
        public int? SportID { get; set; }
        public int? GenderCategoryID { get; set; }
        public int? SchoolLevelID { get; set; }
    }

    public class Venues
    {
        public int? ID { get; set; }
        public string? Venue { get; set; }
    }

    public class Regions
    {
        public int? ID { get; set; }
        public string? Region { get; set; }
        public string? Abbreviation { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSportCategoryList();
        await GetVenueList();
        await GetRegionList();

        eventIDValue = GenerateRandomString();
    }

    private async Task ToggleSelectAll()
    {
        if (regionalTeamsValue.Any())
        {
            // Deselect all (clear selection)
            regionalTeamsValue = new List<string>().AsReadOnly();
        }
        else
        {
            // Select all region IDs as strings (populate as needed)
            regionalTeamsValue = regions.Select(r => r.ID.ToString()).ToList().AsReadOnly();
        }

        // Toggle the selectAllChecked flag
        selectAllChecked = !selectAllChecked;

        // Force UI update
        StateHasChanged();
    }

    private void AddEvent()
    {
        eventIDValue = GenerateRandomString();
    }

    public string GenerateRandomString(int length = 20)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"; // Uppercase alphabet and digits
        Random random = new Random();
        char[] stringChars = new char[length];

        for (int i = 0; i < length; i++)
        {
            stringChars[i] = chars[random.Next(chars.Length)];
        }

        return new string(stringChars);
    }

    private async Task GetSportCategoryList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportCategory");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportsDetailsFiltered?category={categoryValue}");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetLevelList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportsDetailsFiltered?category={categoryValue}&sport={sportValue}");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetGenderList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportsDetailsFiltered?category={categoryValue}&sport={sportValue}&level={levelValue}");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSubCategoryList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportsDetailsFiltered?category={categoryValue}&sport={sportValue}&level={levelValue}&gender={genderValue}");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetVenueList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Venues/Venue");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            venues = await JsonSerializer.DeserializeAsync<List<Venues>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetRegionList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/RegionalTeams/Region");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            regions = await JsonSerializer.DeserializeAsync<List<Regions>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}