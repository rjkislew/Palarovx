@page "/events/management"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text

@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject ColorService ColorSettings

<MudGrid>
    <MudItem xs="12">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.False">
            <MudPaper Height="150px" Square Elevation="0" Class="mud-theme-primary">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%">
                    <MudText Typo="Typo.h2" Style="color: white">Admin Control</MudText>
                    <MudText Typo="Typo.h3" Style="color: white">Events Management</MudText>
                </MudStack>
            </MudPaper>
        </MudContainer>
    </MudItem>
    <MudItem xs="12">
        <MudContainer Gutters="false" MaxWidth="MaxWidth.False">
            <MudGrid Class="pa-5">
                <MudItem xs="12" md="4">
                    <MudPaper Class="pa-3" Outlined>
                        <MudText>Event Form</MudText>
                        <MudField Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Numbers" Label="Match ID" AdornmentColor="Color.Primary" Variant="Variant.Outlined" FullWidth></MudField>
                        <MudField Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Title" Label="Event Title" AdornmentColor="Color.Primary" Variant="Variant.Outlined" FullWidth></MudField>

                        <MudSelect Margin="Margin.Dense" T="string" Label="Sport Category" AdornmentColor="Color.Primary" Variant="Variant.Outlined" @bind-Value="categoryValue" FullWidth Clearable SelectedValuesChanged="GetSportList">
                            <MudVirtualize Items="categories" Context="category">
                                <MudSelectItem Value="category.Category">@category.Category</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>

                        <MudSelect Margin="Margin.Dense" T="string" Label="Sport" AdornmentColor="Color.Primary" Variant="Variant.Outlined" @bind-Value="sportValue" FullWidth Clearable SelectedValuesChanged="GetLevelList">
                            <MudVirtualize Items="categories" Context="category">
                                <MudVirtualize Items="category.SportList" Context="sport">
                                    <MudSelectItem Value="sport.Sport">@sport.Sport</MudSelectItem>
                                </MudVirtualize>
                            </MudVirtualize>
                        </MudSelect>

                        <MudSelect Margin="Margin.Dense" T="string" Label="Level" AdornmentColor="Color.Primary" Variant="Variant.Outlined" @bind-Value="levelValue" FullWidth Clearable SelectedValuesChanged="GetGenderList">
                            <MudVirtualize Items="categories" Context="category">
                                <MudVirtualize Items="category.SportList" Context="sport">
                                    <MudVirtualize Items="sport.LevelList" Context="level">
                                        <MudSelectItem Value="level.Level">@level.Level</MudSelectItem>
                                    </MudVirtualize>
                                </MudVirtualize>
                            </MudVirtualize>
                        </MudSelect>

                        <MudSelect Margin="Margin.Dense" T="string" Label="Gender" AdornmentColor="Color.Primary" Variant="Variant.Outlined" @bind-Value="genderValue" FullWidth Clearable SelectedValuesChanged="GetSubCategoryList">
                            <MudVirtualize Items="categories" Context="category">
                                <MudVirtualize Items="category.SportList" Context="sport">
                                    <MudVirtualize Items="sport.LevelList" Context="level">
                                        <MudVirtualize Items="level.GenderList" Context="gender">
                                            <MudSelectItem Value="gender.Gender">@gender.Gender</MudSelectItem>
                                        </MudVirtualize>
                                    </MudVirtualize>
                                </MudVirtualize>
                            </MudVirtualize>
                        </MudSelect>

                        <MudSelect Margin="Margin.Dense" T="string" Label="Sub Category" AdornmentColor="Color.Primary" Variant="Variant.Outlined" @bind-Value="subCategoryValue" FullWidth Clearable>
                            <MudVirtualize Items="categories" Context="category">
                                <MudVirtualize Items="category.SportList" Context="sport">
                                    <MudVirtualize Items="sport.LevelList" Context="level">
                                        <MudVirtualize Items="level.GenderList" Context="gender">
                                            <MudVirtualize Items="gender.SubCategoryList" Context="subCategory">
                                                <MudSelectItem Value="subCategory.SubCategory">@subCategory.SubCategory</MudSelectItem>
                                            </MudVirtualize>
                                        </MudVirtualize>
                                    </MudVirtualize>
                                </MudVirtualize>
                            </MudVirtualize>
                        </MudSelect>


                        <MudSelect Margin="Margin.Dense" T="string" Label="Venue" AdornmentColor="Color.Primary" Variant="Variant.Outlined" @bind-Value="venueValue" FullWidth Clearable>
                            <MudVirtualize Items="venues" Context="venue">
                                <MudSelectItem Value="venue.Venue">@venue.Venue</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" md="8">
                    <MudPaper Class="pa-3" Outlined>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudItem>
</MudGrid>

@code {
    private readonly string API_URL = APIService.Palaro2026API;
    private List<SportCategories>? categories;
    private List<Venues>? venues;

    private string? categoryValue;
    private string? sportValue;
    private string? levelValue;
    private string? genderValue;
    private string? subCategoryValue;
    private string? venueValue;

    public class SportCategories
    {
        public string? Category { get; set; }
        public List<Sports>? SportList { get; set; }
    }
    public class Sports
    {
        public string? Sport { get; set; }
        public List<SchoolLevels>? LevelList { get; set; }
    }
    public class SchoolLevels
    {
        public string? Level { get; set; }
        public List<GenderCategories>? GenderList { get; set; }
    }
    public class GenderCategories
    {
        public string? Gender { get; set; }
        public List<SubCategories>? SubCategoryList { get; set; }
    }
    public class SubCategories
    {
        public string? SubCategory { get; set; }
    }

    public class Venues
    {
        public string? Venue { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSportCategoryList();
        await GetVenueList();
    }

    private async Task GetSportCategoryList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportCategory");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportsDetailsFiltered?category={categoryValue}");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetLevelList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportsDetailsFiltered?category={categoryValue}&sport={sportValue}");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetGenderList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportsDetailsFiltered?category={categoryValue}&sport={sportValue}&level={levelValue}");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSubCategoryList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SportsDetailsFiltered?category={categoryValue}&sport={sportValue}&level={levelValue}&gender={genderValue}");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            categories = await JsonSerializer.DeserializeAsync<List<SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }



    private async Task GetVenueList()
    {
        try
        {
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Venues/Venue");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            venues = await JsonSerializer.DeserializeAsync<List<Venues>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}