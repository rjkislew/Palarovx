@page "/events-control"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12">
        <MudStack Spacing="1">
            <MudText Typo="Typo.h2" Class="mb-n3" Color="Color.Secondary">Admin Control</MudText>
            <MudText Typo="Typo.h3" Color="Color.Tertiary">Events Management</MudText>
        </MudStack>
    </MudItem>
    <MudItem xs="12" md=6>
        <MudPaper Class="pa-3 mud-border-tertiary" Outlined>
            <MudStack Spacing="3">
                <MudStack Spacing="0">
                    <MudField Adornment="Adornment.Start" HelperText="This is an auto generated field" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Filled.Title" Margin="Margin.Dense" Label="Event Title" Variant="Variant.Outlined">@eventTitle</MudField>
                </MudStack>

                <MudDivider />

                <MudDivider />

                <MudStack Spacing="0">
                    <!-- Category Select -->
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Category" Color="Color.Primary"></MudIcon>
                        <MudSelect T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable Label="Category" @bind-Value="selectedCategory" SelectedValuesChanged="GetLevels">
                            @if (sportCategoryContent != null)
                            {
                                <MudVirtualize Items="sportCategoryContent" Context="category">
                                    <MudSelectItem T="string" Value="@category.Category">@category.Category</MudSelectItem>
                                </MudVirtualize>
                            }
                        </MudSelect>
                    </MudStack>

                    <!-- Level Select -->
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.SignalCellularAlt2Bar" Color="Color.Primary"></MudIcon>
                        <MudSelect Disabled="enableLevel" T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable Label="Level" @bind-Value="selectedLevel" SelectedValuesChanged="GetSports">
                            @if (schoolLevelContent != null)
                            {
                                <MudVirtualize Items="schoolLevelContent" Context="level">
                                    <MudSelectItem T="string" Value="@level.Level">@level.Level</MudSelectItem>
                                </MudVirtualize>
                            }
                        </MudSelect>
                    </MudStack>

                    <!-- Sport Select -->
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Sports" Color="Color.Primary"></MudIcon>
                        <MudSelect Disabled="enableSport" T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable Label="Sport" @bind-Value="selectedSport" SelectedValuesChanged="GetGenders">
                            @if (sportContent != null)
                            {
                                <MudVirtualize Items="sportContent" Context="sport">
                                    <MudSelectItem T="string" Value="@sport.Sport">@sport.Sport</MudSelectItem>
                                </MudVirtualize>
                            }
                        </MudSelect>
                    </MudStack>

                    <!-- Gender Select -->
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Color="Color.Primary"></MudIcon>
                        <MudSelect Disabled="enableGender" T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable Label="Gender" @bind-Value="selectedGender" SelectedValuesChanged="GetSubCategories">
                            @if (genderCategoryContent != null)
                            {
                                <MudVirtualize Items="genderCategoryContent" Context="gender">
                                    <MudSelectItem T="string" Value="@gender.Gender">@gender.Gender</MudSelectItem>
                                </MudVirtualize>
                            }
                        </MudSelect>
                    </MudStack>

                    <!-- SubCategory Select -->
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Sports" Color="Color.Primary"></MudIcon>
                        <MudSelect Disabled="enableSubCategory" T="SportSubCategoriesContent" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable Label="Sub Category" @bind-Value="selectedSubCategory" SelectedValuesChanged="GetVenues">
                            @if (sportSubCategortContent != null)
                            {
                                <MudVirtualize Items="sportSubCategortContent" Context="subCategory">
                                    <MudSelectItem T="SportSubCategoriesContent" Value="@subCategory">@subCategory.SubCategory</MudSelectItem>
                                </MudVirtualize>
                            }
                        </MudSelect>
                    </MudStack>

                    <!-- Venue Select -->
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.HomeWork" Color="Color.Primary"></MudIcon>
                        <MudSelect Disabled="enableVenue" T="VenuesContents" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable Label="Venue" @bind-Value="selectedVenue" SelectedValuesChanged="EnableDate">
                            @if (venueContent != null)
                            {
                                <MudVirtualize Items="venueContent" Context="venue">
                                    <MudSelectItem T="VenuesContents" Value="@venue">@venue.Venue</MudSelectItem>
                                </MudVirtualize>
                            }
                        </MudSelect>
                    </MudStack>

                    <!-- Date Time -->
                    <MudStack Row>
                        <MudDatePicker @bind-Date="selectedDate"
                                       Disabled="@enableDate"
                                       Adornment="Adornment.Start"
                                       AdornmentColor="Color.Primary"
                                       Margin="Margin.Dense"
                                       Label="Date"
                                       PickerClosed="EnableTime"
                                       Variant="Variant.Outlined"
                                       DateFormat="yyyy-MM-dd" />

                        <MudTimePicker @bind-Time="selectedTime" 
                                       Disabled="enableTime"
                                       Adornment="Adornment.Start"
                                       AdornmentColor="Color.Primary"
                                       Margin="Margin.Dense"
                                       Label="Time"
                                       PickerClosed="EnableStreamCheck"
                                       Variant="Variant.Outlined"
                                       AmPm />
                    </MudStack>

                    <!-- Stream Checkbox and URL Field -->
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudCheckBox Value="hasStreamURL" Disabled="enableStreamCheck" T="bool" Label="On Stream" @bind-Checked="enableOnStream" ValueChanged="ToggleStream" Size="Size.Small"></MudCheckBox>
                        <MudTextField Disabled="enableOnStream" Adornment="Adornment.Start" AdornmentColor="Color.Primary" Margin="Margin.Dense" AdornmentIcon="@Icons.Material.Filled.Link" T="string" @bind-Value="streamURL" Label="Stream URL" Variant="Variant.Outlined"></MudTextField>
                    </MudStack>
                </MudStack>

                <MudDivider />

                <MudStack Row Justify="Justify.FlexEnd">
                    <MudButton Size="Size.Small" StartIcon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Error" @onclick="ClearFields">
                        <MudText Typo="Typo.body2" Color="Color.Tertiary">Clear Fields</MudText>
                    </MudButton>
                    <MudButton Size="Size.Small" StartIcon="@Icons.Material.Filled.AddBox" Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddEvent">
                        <MudText Typo="Typo.body2" Color="Color.Tertiary">Add Event</MudText>
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private readonly string API_URL = APIService.Palaro2026API;
    private List<SportCategoriesContent>? sportCategoryContent;
    private List<SportsContent>? sportContent;
    private List<SchoolLevelsContent>? schoolLevelContent;
    private List<GenderCategoriesContent>? genderCategoryContent;
    private List<SportSubCategoriesContent>? sportSubCategortContent;
    private List<VenuesContents>? venueContent;
    private List<RegionsContent>? regionContent;

    private string? selectedCategory;
    private string? selectedLevel;
    private string? selectedSport;
    private string? selectedGender;
    private SportSubCategoriesContent? selectedSubCategory;
    private VenuesContents? selectedVenue;
    private string? eventTitle;
    private DateTime? selectedDate;
    private TimeSpan? selectedTime;
    private bool hasStreamURL = false;
    private string? streamURL;

    private bool enableLevel = true;
    private bool enableSport = true;
    private bool enableGender = true;
    private bool enableSubCategory = true;
    private bool enableVenue = true;
    private bool enableDate = true;
    private bool enableTime = true;
    private bool enableStreamCheck = true;
    private bool enableOnStream = true;

    private void ToggleCheck()
    {
        hasStreamURL = !hasStreamURL;
    }

    private void eventTitleUpdate()
    {
        // Generate eventTitle, handling potential nulls and empty strings
        var titleParts = new List<string>();

        if (!string.IsNullOrEmpty(selectedCategory))
            titleParts.Add(selectedCategory);

        if (!string.IsNullOrEmpty(selectedLevel))
            titleParts.Add(selectedLevel);

        if (!string.IsNullOrEmpty(selectedSport))
            titleParts.Add(selectedSport);

        if (!string.IsNullOrEmpty(selectedGender))
            titleParts.Add(selectedGender);

        if (selectedSubCategory != null)
            titleParts.Add(selectedSubCategory.SubCategory);

        if (selectedVenue != null)
            titleParts.Add(selectedVenue.Venue);

        // Join the non-empty parts with " | " separator
        eventTitle = string.Join(" | ", titleParts);
    }

    public partial class VenuesContents
    {
        public int ID { get; set; }
        public string? Venue { get; set; }
        public decimal? Latitude { get; set; }
        public decimal? Longitude { get; set; }

    }

    public partial class RegionsContent
    {
        public int ID { get; set; }
        public string? Region { get; set; }
        public string? Abbreviation { get; set; }
    }


    public class SportCategoriesContent
    {
        public int ID { get; set; }
        public string? Category { get; set; }
    }

    public class SportsContent
    {
        public int ID { get; set; }
        public string? Sport { get; set; }
        public string? Description { get; set; }
    }


    public class SchoolLevelsContent
    {
        public int ID { get; set; }
        public string? Level { get; set; }
    }

    public class GenderCategoriesContent
    {
        public int ID { get; set; }
        public string? Gender { get; set; }
    }

    public class SportSubCategoriesContent
    {
        public int ID { get; set; }
        public string? SubCategory { get; set; }
        public int? SportID { get; set; }
        public int? GenderCategoryID { get; set; }
        public int? SchoolLevelID { get; set; }
    }

    public class EventsContent
    {
        public int ID { get; set; }
        public int? SportSubCategoryID { get; set; }
        public int? VenueID { get; set; }
        public string? EventTitle { get; set; }
        public DateTime? Date { get; set; }
        public TimeSpan? Time { get; set; }
        public bool? OnStream { get; set; }
        public string? StreamURL { get; set; }
        public bool? IsFinished { get; set; }
        public byte[]? Attachement { get; set; }
        public bool? Archived { get; set; }
        public bool? Deleted { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetRegionalTeams();
        await GetCategories();
        EnableElementFlag();
    }

    private void EnableElementFlag()
    {
        enableLevel = true;
        enableSport = true;
        enableGender = true;
        enableSubCategory = true;
        enableVenue = true;
        enableDate = true;
        enableTime = true;
        enableStreamCheck = true;
        enableOnStream = true;
    }

    public void ToggleStream()
    {
        enableOnStream = !enableOnStream;
        ToggleCheck();
    }

    private void ClearFields()
    {
        eventTitle = null;
        selectedCategory = null;
        selectedLevel = null;
        selectedSport = null;
        selectedGender = null;
        selectedSubCategory = null;
        selectedVenue = null;
        selectedDate = null;
        selectedTime = null;
        enableOnStream = true;
        streamURL = null;

        enableLevel = true;
        enableSport = true;
        enableGender = true;
        enableSubCategory = true;
        enableVenue = true;
        enableDate = true;
        enableTime = true;
        enableStreamCheck = true;

        hasStreamURL = false;

        StateHasChanged();
    }

    private async Task GetCategories()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/Categories");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sportCategoryContent = await JsonSerializer.DeserializeAsync<List<SportCategoriesContent>>(responseStream, options);

            eventTitleUpdate();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.Write($"Error fetching categories: {ex.Message}");
        }
    }

    private async Task GetRegionalTeams()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/RegionalTeams/Teams");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            regionContent = await JsonSerializer.DeserializeAsync<List<RegionsContent>>(responseStream, options);

            eventTitleUpdate();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.Write($"Error fetching categories: {ex.Message}");
        }
    }

    private async Task GetLevels()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/Levels?category={selectedCategory}");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            schoolLevelContent = await JsonSerializer.DeserializeAsync<List<SchoolLevelsContent>>(responseStream, options);

            enableLevel = false;
            eventTitleUpdate();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.Write($"Error fetching categories: {ex.Message}");
        }
    }

    private async Task GetSports()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/Sports?category={selectedCategory}&level={selectedLevel}");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sportContent = await JsonSerializer.DeserializeAsync<List<SportsContent>>(responseStream, options);

            enableSport = false;
            eventTitleUpdate();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.Write($"Error fetching categories: {ex.Message}");
        }
    }

    private async Task GetGenders()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/Genders?category={selectedCategory}&level={selectedLevel}&sport={selectedSport}");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            genderCategoryContent = await JsonSerializer.DeserializeAsync<List<GenderCategoriesContent>>(responseStream, options);

            enableGender = false;
            eventTitleUpdate();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.Write($"Error fetching categories: {ex.Message}");
        }
    }

    private async Task GetSubCategories()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Sports/SubCategories?category={selectedCategory}&level={selectedLevel}&sport={selectedSport}&gender={selectedGender}");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            sportSubCategortContent = await JsonSerializer.DeserializeAsync<List<SportSubCategoriesContent>>(responseStream, options);

            enableSubCategory = false;
            eventTitleUpdate();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.Write($"Error fetching categories: {ex.Message}");
        }
    }

    private async Task GetVenues()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/Venues/Venues")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            venueContent = await JsonSerializer.DeserializeAsync<List<VenuesContents>>(responseStream, options);

            enableVenue = false;
            eventTitleUpdate();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void EnableDate()
    {
        enableDate = false;
        eventTitleUpdate();

        StateHasChanged();
    }

    private void EnableTime()
    {
        enableTime = false;
    }

    private void EnableStreamCheck()
    {
        enableStreamCheck = false;
    }

    private static readonly HttpClient httpClient = new HttpClient();

    private async Task AddEvent()
    {
        // Check for null or empty fields
        if (selectedVenue == null || selectedSubCategory == null ||
            string.IsNullOrEmpty(eventTitle) || selectedDate == null || selectedTime == null)
        {
            Console.WriteLine("Please fill in all required fields.");
            return;
        }

        // Create a new event object
        EventsContent newEvent = new EventsContent
        {
                SportSubCategoryID = selectedSubCategory.ID,
                VenueID = selectedVenue.ID,
                EventTitle = eventTitle,
                Date = selectedDate,
                Time = selectedTime,
                OnStream = enableOnStream,
                StreamURL = enableOnStream ? streamURL : null,
                IsFinished = false,
                Archived = false,
                Deleted = false,
                Attachement = null,
            };

        try
        {
            // Serialize the newEvent object to JSON
            string jsonContent = JsonSerializer.Serialize(newEvent);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            // Send the POST request
            HttpResponseMessage response = await httpClient.PostAsync($"{API_URL}/Events/AddEvent", content);
            response.EnsureSuccessStatusCode();

            /*
            // Optionally read the response content
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response from server: {responseBody}");
            */

            await GetCategories();

            Console.WriteLine("Event added successfully.");
            // Clear fields and reset state
            ClearFields();
            Snackbar.Add($"Successfully Added Event", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error adding event: {ex.Message}");
        }
        catch (JsonException jsonEx)
        {
            Console.WriteLine($"Error serializing or deserializing event data: {jsonEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }
}