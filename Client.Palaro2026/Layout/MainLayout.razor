@using Client.Palaro2026.Services
@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService dialogService
@inject HttpClient httpClient
@inject APIService apiService
@inject ThemeService themeService
@inject MapBoxService mapBoxService
@inject FeaturesUnlockingService featuresUnlockingService

<!-- Required -->
<MudThemeProvider @ref="_mudThemeProvider" Theme="_palaroTheme" DefaultScrollbar="true" IsDarkMode="@(themeService.IsDarkMode)" />
<MudPopoverProvider />

<!-- Required for dialogs, tooltips, and popovers -->
<MudDialogProvider />

<!-- Required for snackbar notifications -->
<MudSnackbarProvider />

<MudLayout>
    <!-- AppBar for larger screens, hidden on smaller screens -->
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudAppBar Elevation="0">

            <!-- Link to the home page with logo and title -->
            <MudLink Href="./" Underline="Underline.None">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
                    <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="height: 100%" Class="mr-10">
                        <MudText Typo="Typo.h5" Color="Color.Dark" Style="font-weight: bold" Class="mb-n2">PALARO 2026</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Dark">Agusan del Sur</MudText>
                    </MudStack>
                </MudStack>
            </MudLink>

            <!-- Navigation menu for larger screens -->
            <NavigationMenu />

            <!-- Spacer to push icons to the right side of the AppBar -->
            <MudSpacer />

            <!-- Stack for icons on the right side of the AppBar -->
            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">

                <!-- Icon button for unlocking features -->
                <MudTooltip Arrow Text="Unlock Features">
                    <MudIconButton OnClick="@(featuresUnlockingService.IsUnlocked? OpenLockFeaturesDialog : OpenUnlockFeaturesDialog)"
                                   Icon="@(featuresUnlockingService.IsUnlocked ? Icons.Material.Filled.Lock : Icons.Material.Filled.LockOpen)" />
                </MudTooltip>

                <!-- Online grocery store link (Hatod) -->
                <MudTooltip Arrow Text="Delivery Service">
                    <MudIconButton Icon="@Icons.Material.Filled.LocalGroceryStore" Href="https://serve.pgas.ph/hatud" Target="_Blank" />
                </MudTooltip>

                <!-- Conditional install button, only shown if the app is not installed as a PWA -->
                @if (_showInstallButton)
                {
                    <MudTooltip Arrow Text="Download App">
                        <MudIconButton OnClick="@InstallApp" Icon="@Icons.Material.Filled.Download" />
                    </MudTooltip>
                }

                <!-- Icon button for toggling dark mode -->
                <MudTooltip Arrow Text="@GetThemeTooltipDescription()">
                    <MudIconButton OnClick="ToggleDarkMode" Icon="@GetThemeIcon()" />
                </MudTooltip>
            </MudStack>

        </MudAppBar>
    </MudHidden>

    <!-- Drawer for smaller screens, hidden when on larger screens -->
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudAppBar Elevation="0">
            <!-- Icon button to toggle the drawer -->
            <MudIconButton Icon="@Icons.Material.Filled.Menu" OnClick="@ToggleDrawer" />

            <MudSpacer />

            <!-- Link to the home page with logo -->
            <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />


            <MudSpacer />

            <!-- Stack for icons on the right side of the AppBar -->
            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">

                <!-- Icon button for unlocking features -->
                <MudIconButton OnClick="@(featuresUnlockingService.IsUnlocked? OpenLockFeaturesDialog : OpenUnlockFeaturesDialog)"
                               Icon="@(featuresUnlockingService.IsUnlocked ? Icons.Material.Filled.Lock : Icons.Material.Filled.LockOpen)" />

                <!-- Icon button for toggling dark mode -->
                <MudIconButton OnClick="ToggleDarkMode" Icon="@GetThemeIcon()" />
            </MudStack>

        </MudAppBar>

        <!-- Drawer component for navigation on smaller screens -->
        <MudDrawer @bind-Open="@_isDrawOpen">
            <!-- Drawer header with logo and title -->
            <MudDrawerHeader Dense="true" Class="pa-1">
                <MudStack Row Justify="Justify.FlexStart">
                    <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
                    <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="height: 100%" Class="mr-10">
                        <MudText Style="font-weight: bold; font-size: 20px" Class="mb-n2">PALARO 2026</MudText>
                        <MudText Typo="Typo.caption">Agusan del Sur</MudText>
                    </MudStack>
                </MudStack>
            </MudDrawerHeader>

            <!-- Navigation menu inside the drawer -->
            <MudDrawerContainer Class="mt-3">
                <MudStack>
                    <NavigationMenu />
                    <MudDivider />
                    <MudNavMenu Rounded>
                        <MudStack>
                            <MudNavLink Ripple="false" Href="https://serve.pgas.ph/hatud" Match="NavLinkMatch.All">Hatud (Delivery Service)</MudNavLink>
                            @if (_showInstallButton)
                            {
                                <MudNavLink Ripple="false" OnClick="@InstallApp" Match="NavLinkMatch.All">Download App</MudNavLink>
                            }
                            <MudNavLink Ripple="false" Href="./policies" Match="NavLinkMatch.All">Policies</MudNavLink>
                        </MudStack>
                    </MudNavMenu>
                </MudStack>
            </MudDrawerContainer>
        </MudDrawer>
    </MudHidden>

    <!-- Main content area where the body of the page will be rendered -->
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code
{
    // Reference to the MudThemeProvider for theme management
    private MudThemeProvider? _mudThemeProvider;

    // Dialog instance for notice dialog
    private IMudDialogInstance? _MudDialog { get; set; }

    // Flag to indicate if the notice is agreed
    private bool? _isNoticeAgreed;

    // Flag to control the visibility of the install button
    private bool _showInstallButton = false;

    // Flag to indicate if the system preference mode is active
    private bool _systemPreferenceMode;


    protected override async Task OnInitializedAsync()
    {
        // remove this method if you don't want to unlock features on initialization or when governor cane is done checking
        // await featuresUnlockingService.UnlockFeaturesAsync(); // Ensure features are unlocked on initialization

        // Handle system preferred theme from localStorage
        var systemPreferred = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "systemPreferred");

        if (string.IsNullOrEmpty(systemPreferred))
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "systemPreferred", "true");
            _systemPreferenceMode = true;
        }
        else
        {
            _systemPreferenceMode = systemPreferred.Equals("true", StringComparison.OrdinalIgnoreCase);
        }

        if (_systemPreferenceMode)
        {
            await _mudThemeProvider!.WatchSystemDarkModeAsync(OnSystemDarkModeChanged);
        }
        else
        {
            var darkModeValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isDarkMode");
            var isDark = darkModeValue?.Equals("true", StringComparison.OrdinalIgnoreCase) == true;
            themeService.IsDarkMode = isDark;
            await themeService.SystemThemeModeAsync(isDark);
        }


        // Subscribe to theme and feature change events
        themeService.OnThemeChanged += StateHasChanged;
        featuresUnlockingService.OnLockChanged += StateHasChanged;

        // Load user's theme preference
        await themeService.LoadThemePreference();

        // Check PWA installation status
        var isStandalone = await JSRuntime.InvokeAsync<bool>("pwaHelper.isRunningStandalone");
        if (isStandalone)
        {
            _showInstallButton = false;
        }
        else
        {
            var canInstall = await JSRuntime.InvokeAsync<bool>("pwaHelper.isInstallPromptAvailable");
            _showInstallButton = canInstall;
        }

        // Initial checks
        await CheckFeaturesUnlocked();
        await CheckNoticeAgreed();

        if (_isNoticeAgreed != true)
        {
            await OpenNoticeDialog();
        }

        StateHasChanged(); // Trigger UI update
    }






    // Method to install the app
    private async Task InstallApp()
    {
        await JSRuntime.InvokeVoidAsync("pwaHelper.installApp");
    }



    // <summary>
    // Method to handle the dark mode toggle
    // This methods toggles between system preference, manual dark mode, and manual light mode.
    // </summary>

    // Method to handle system dark mode changes
    private async Task OnSystemDarkModeChanged(bool newValue)
    {
        themeService.IsDarkMode = newValue;
        await themeService.SystemThemeModeAsync(newValue);
    }

    // Dark mode toggle method
    private async Task ToggleDarkMode()
    {
        if (_systemPreferenceMode)
        {
            // Step 1: System → Manual Dark
            _systemPreferenceMode = false;
            themeService.IsDarkMode = true;
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "systemPreferred", "false");
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isDarkMode", "true");
            await themeService.SystemThemeModeAsync(true);
        }
        else if (themeService.IsDarkMode)
        {
            // Step 2: Manual Dark → Manual Light
            themeService.IsDarkMode = false;
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isDarkMode", "false");
            await themeService.SystemThemeModeAsync(false);
        }
        else
        {
            // Step 3: Manual Light → System
            _systemPreferenceMode = true;
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "systemPreferred", "true");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "isDarkMode");

            // 🔽 Get the current system theme mode immediately
            var isSystemDark = await _mudThemeProvider.GetSystemPreference();
            themeService.IsDarkMode = isSystemDark;
            await themeService.SystemThemeModeAsync(isSystemDark);

            // 🔽 Then start watching for changes
            await _mudThemeProvider.WatchSystemDarkModeAsync(OnSystemDarkModeChanged);
        }

        StateHasChanged();
    }

    // Get icon based on theme mode
    private string GetThemeIcon()
    {
        return _systemPreferenceMode
            ? Icons.Material.Filled.DarkMode
            : themeService.IsDarkMode
                ? Icons.Material.Filled.LightMode
                : Icons.Material.Filled.AutoMode;
    }

    // Get tooltip text for current theme mode
    private string GetThemeTooltipDescription()
    {
        return _systemPreferenceMode
            ? "Dark mode"
            : themeService.IsDarkMode
                ? "Light mode"
                : "System preference mode";
    }






    // <summary>
    // Dialog opening methods
    // These methods handle the opening of various dialogs in the application.
    // </summary>

    // Method to check if the notice is agreed
    private async Task CheckNoticeAgreed()
    {
        var isNoticeAgreedString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "agreeNotice");
        _isNoticeAgreed = bool.TryParse(isNoticeAgreedString, out var result) && result;
    }

    // Method to open the notice dialog
    private async Task OpenNoticeDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, NoHeader = true };

        var dialog = await dialogService.ShowAsync<Notice>("Notice", options);

        var result = await dialog.Result;
    }






    // <summary>
    // Lock features dialog
    // This method opens a confirmation dialog to lock features.
    // </summary>

    // Method to check if features are unlocked
    private async Task CheckFeaturesUnlocked()
    {
        await featuresUnlockingService.LoadFromLocalStorageAsync();
    }

    // Unlock features dialog
    private async Task OpenUnlockFeaturesDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true, NoHeader = true };

        var dialog = await dialogService.ShowAsync<UnlockFeatures>("Unlock", options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await CheckFeaturesUnlocked(); // Refresh the unlocked state after dialog closes
        }
    }

    // Method to open the lock features confirmation dialog
    private async Task OpenLockFeaturesDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await dialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm locking of features?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await featuresUnlockingService.ToggleUnlockFeaturesAsync();
        }
    }



    // <summary>
    // Define the Palaro 2026 theme
    // This theme is designed to be visually appealing and accessible, with a focus on usability.
    // </summary>
    private MudTheme _palaroTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Dark = "#121212",
            White = "#FFFFFF",
            Primary = "1E4CA1",
            Secondary = "EBB94D",
            Tertiary = "BA3535",
            ActionDefault = "#121212",
            AppbarBackground = "#FFFFFF",
            AppbarText = "#121212",
            TextPrimary = "#121212",
        },
        PaletteDark = new PaletteDark()
        {
            Dark = "#FFFFFF",
            White = "#121212",
            Primary = "7099E6",
            Secondary = "F0D498",
            Tertiary = "E77A7A",
            Background = "#121212",
            Surface = "#121212",
            DrawerBackground = "#121212",
            ActionDefault = "#FFFFFF",
            AppbarBackground = "#121212",
            AppbarText = "#FFFFFF",
            TextPrimary = "#FFFFFF",
        },
        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "280px"
        },
        Typography = new Typography()
        {
            Default = new DefaultTypography()
            {
                FontFamily = new[] { "Inter", "sans-serif" },
            },
            H1 = new H1Typography()
            {
                FontSize = "clamp(2rem, 5vw + 1rem, 4rem)",
                FontWeight = "700"
            },
            H2 = new H2Typography()
            {
                FontSize = "clamp(1.75rem, 4vw + 0.5rem, 3rem)",
                FontWeight = "600"
            },
            H3 = new H3Typography()
            {
                FontSize = "clamp(1.5rem, 3vw + 0.5rem, 2.5rem)",
                FontWeight = "600"
            },
            H4 = new H4Typography()
            {
                FontSize = "clamp(1.25rem, 2.5vw + 0.5rem, 2rem)",
                FontWeight = "600"
            },
            H5 = new H5Typography()
            {
                FontSize = "clamp(1rem, 2vw + 0.5rem, 1.5rem)",
                FontWeight = "600"
            },
            H6 = new H6Typography()
            {
                FontSize = "clamp(0.875rem, 1.5vw + 0.5rem, 1.25rem)",
                FontWeight = "700"
            },
            Subtitle1 = new Subtitle1Typography()
            {
                FontSize = "clamp(1rem, 1.5vw + 0.25rem, 1.25rem)",
                FontWeight = "400"
            },
            Subtitle2 = new Subtitle2Typography()
            {
                FontSize = "clamp(0.875rem, 1.2vw + 0.25rem, 1rem)",
                FontWeight = "500"
            },
            Body1 = new Body1Typography()
            {
                FontSize = "clamp(1rem, 1.2vw + 0.25rem, 1.125rem)",
                FontWeight = "400"
            },
            Body2 = new Body2Typography()
            {
                FontSize = "clamp(0.875rem, 1vw + 0.25rem, 1rem)",
                FontWeight = "400"
            },
            Button = new ButtonTypography()
            {
                FontSize = "clamp(0.875rem, 0.8vw + 0.25rem, 1rem)",
                FontWeight = "700",
                TextTransform = "none"
            },
            Caption = new CaptionTypography()
            {
                FontSize = "clamp(0.75rem, 0.8vw + 0.25rem, 0.875rem)",
                FontWeight = "300"
            },
            Overline = new OverlineTypography()
            {
                FontSize = "clamp(0.625rem, 0.5vw + 0.25rem, 0.75rem)",
                FontWeight = "500",
                TextTransform = "uppercase",
                LetterSpacing = "0.1em"
            }
        }
    };




    // Drawer state management
    private bool _isDrawOpen = false;

    private void ToggleDrawer()
    {
        _isDrawOpen = !_isDrawOpen;
    }
}