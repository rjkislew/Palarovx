@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime
@inject NavigationManager uriHelper
@inject HttpClient httpClient
@inject ThemeService ThemeService
@inject APIService apiService

@* Required *@
<MudThemeProvider @ref="_mudThemeProvider" Theme="PalaroTheme" DefaultScrollbar="true" IsDarkMode="@(ThemeService.IsDarkMode ?? false)" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout>
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudAppBar Elevation="0">
            <MudLink Href="./" Underline="Underline.None">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
                    <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="height: 100%" Class="mr-10">
                        <MudText Typo="Typo.h5" Color="Color.Dark" Style="font-weight: bold" Class="mb-n2">PALARO 2026</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Dark">Agusan del Sur</MudText>
                    </MudStack>
                </MudStack>
            </MudLink>
            <NavigationMenu />
            <MudSpacer />

            <!-- Night mode button -->
            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                @if (showButton)
                {
                    <MudIconButton OnClick="@InstallApp" Icon="@Icons.Material.Filled.Download" />
                }
                <MudIconButton OnClick="ToggleDarkMode" Icon="@GetThemeIcon()" />
            </MudStack>

        </MudAppBar>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" OnClick="@ToggleDrawer" />
            <MudSpacer />
            <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
            <MudSpacer />
            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                @if (showButton)
                {
                    <MudIconButton OnClick="@InstallApp" Icon="@Icons.Material.Filled.Download" />
                }
                <MudIconButton OnClick="ToggleDarkMode" Icon="@GetThemeIcon()" />
            </MudStack>

        </MudAppBar>
        <MudDrawer @bind-Open="@_open">
            <MudDrawerHeader Dense="true" Class="pa-1">
                <MudStack Row Justify="Justify.FlexStart">
                    <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
                    <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="height: 100%" Class="mr-10">
                        <MudText Style="font-weight: bold; font-size: 20px" Class="mb-n2">PALARO 2026</MudText>
                        <MudText Typo="Typo.caption">Agusan del Sur</MudText>
                    </MudStack>
                </MudStack>
            </MudDrawerHeader>
            <MudDrawerContainer Class="mt-3">
                <NavigationMenu />
            </MudDrawerContainer>
        </MudDrawer>
    </MudHidden>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code
{
    private MudThemeProvider? _mudThemeProvider;

    private bool isAPIAvailable;

    private bool showButton = false;

    protected override async Task OnInitializedAsync()
    {
        ThemeService.OnThemeChanged += StateHasChanged;
        await ThemeService.LoadThemePreference();

        // Check if the app is running in standalone mode (PWA installed)
        var isStandalone = await JSRuntime.InvokeAsync<bool>("pwaHelper.isRunningStandalone");
        Console.WriteLine("isStandalone: " + isStandalone);

        if (isStandalone)
        {
            showButton = false; // Hide the button if the app is in standalone mode

            StateHasChanged(); // Trigger a re-render to update the UI
        }
        else
        {
            var canInstall = await JSRuntime.InvokeAsync<bool>("pwaHelper.isInstallPromptAvailable");
            Console.WriteLine("canInstall: " + canInstall); // Log whether install is possible

            showButton = canInstall; // Show the button if install is available

            StateHasChanged(); // Trigger a re-render to update the UI
        }

        StateHasChanged(); // Trigger a re-render after state change
    }

    private async Task InstallApp()
    {
        await JSRuntime.InvokeVoidAsync("pwaHelper.installApp");
    }

    private async Task ToggleDarkMode()
    {
        await ThemeService.ToggleDarkModeAsync();
    }

    private string GetThemeIcon()
    {
        if (!ThemeService.UserSelectedTheme)
            return Icons.Material.Filled.AutoMode;

        return ThemeService.IsDarkMode switch
        {
            true => Icons.Material.Filled.DarkMode,
            false => Icons.Material.Filled.LightMode,
            _ => Icons.Material.Filled.Help // fallback if something goes wrong
        };
    }


    private MudTheme PalaroTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Dark = Colors.Gray.Darken4,
            White = Colors.Gray.Lighten5,
            Primary = "1e4ca1",
            Secondary = "ebb94d",
            Tertiary = "ba3535",
            ActionDefault = Colors.Gray.Darken4,
            AppbarBackground = Colors.Shades.White,
            AppbarText = Colors.Shades.Black,
            TextPrimary = Colors.Shades.Black,
        },
        PaletteDark = new PaletteDark()
        {
            Dark = Colors.Gray.Lighten5,
            White = Colors.Gray.Darken4,
            Primary = "4a7ad3",
            Secondary = "f8d589",
            Tertiary = "db5a5a",
            Background = Colors.Gray.Darken4,
            Surface = Colors.Gray.Darken4,
            DrawerBackground = Colors.Gray.Darken4,
            ActionDefault = Colors.Gray.Lighten5,
            AppbarBackground = Colors.Gray.Darken4,
            AppbarText = Colors.Gray.Lighten5,
            TextPrimary = Colors.Shades.White
        },
        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "280px"
        },
        Typography = new Typography()
        {
            Default = new DefaultTypography()
            {
                FontFamily = new[] { "Inter", "sans-serif" },
            },
            H1 = new H1Typography()
            {
                FontSize = "clamp(2rem, 5vw + 1rem, 4rem)",
                FontWeight = "700"
            },
            H2 = new H2Typography()
            {
                FontSize = "clamp(1.75rem, 4vw + 0.5rem, 3rem)",
                FontWeight = "600"
            },
            H3 = new H3Typography()
            {
                FontSize = "clamp(1.5rem, 3vw + 0.5rem, 2.5rem)",
                FontWeight = "600"
            },
            H4 = new H4Typography()
            {
                FontSize = "clamp(1.25rem, 2.5vw + 0.5rem, 2rem)",
                FontWeight = "600"
            },
            H5 = new H5Typography()
            {
                FontSize = "clamp(1rem, 2vw + 0.5rem, 1.5rem)",
                FontWeight = "600"
            },
            H6 = new H6Typography()
            {
                FontSize = "clamp(0.875rem, 1.5vw + 0.5rem, 1.25rem)",
                FontWeight = "700"
            },
            Subtitle1 = new Subtitle1Typography()
            {
                FontSize = "clamp(1rem, 1.5vw + 0.25rem, 1.25rem)",
                FontWeight = "400"
            },
            Subtitle2 = new Subtitle2Typography()
            {
                FontSize = "clamp(0.875rem, 1.2vw + 0.25rem, 1rem)",
                FontWeight = "500"
            },
            Body1 = new Body1Typography()
            {
                FontSize = "clamp(1rem, 1.2vw + 0.25rem, 1.125rem)",
                FontWeight = "400",
                LineHeight = "2.3"
            },
            Body2 = new Body2Typography()
            {
                FontSize = "clamp(0.875rem, 1vw + 0.25rem, 1rem)",
                FontWeight = "400",
                LineHeight = "2.3"
            },
            Button = new ButtonTypography()
            {
                FontSize = "clamp(0.875rem, 0.8vw + 0.25rem, 1rem)",
                FontWeight = "700",
                TextTransform = "none"
            },
            Caption = new CaptionTypography()
            {
                FontSize = "clamp(0.75rem, 0.8vw + 0.25rem, 0.875rem)",
                FontWeight = "300"
            },
            Overline = new OverlineTypography()
            {
                FontSize = "clamp(0.625rem, 0.5vw + 0.25rem, 0.75rem)",
                FontWeight = "500",
                TextTransform = "uppercase",
                LetterSpacing = "0.1em"
            }
        }
    };

    private bool _open = false;

    private void ToggleDrawer()
    {
        _open = !_open;
    }
}