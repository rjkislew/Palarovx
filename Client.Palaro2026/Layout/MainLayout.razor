@using Client.Palaro2026.Services
@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService dialogService
@inject HttpClient httpClient
@inject ThemeService themeService
@inject APIService apiService
@inject FeaturesUnlockingService featuresUnlockingService

<!-- Required -->
<MudThemeProvider @ref="_mudThemeProvider" Theme="_palaroTheme" DefaultScrollbar="true" IsDarkMode="@(themeService.IsDarkMode ?? false)" />
<MudPopoverProvider />

<!-- Required for dialogs, tooltips, and popovers -->
<MudDialogProvider />

<!-- Required for snackbar notifications -->
<MudSnackbarProvider />

<MudLayout>
    <!-- AppBar for larger screens, hidden on smaller screens -->
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudAppBar Elevation="0">

            <!-- Link to the home page with logo and title -->
            <MudLink Href="./" Underline="Underline.None">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
                    <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="height: 100%" Class="mr-10">
                        <MudText Typo="Typo.h5" Color="Color.Dark" Style="font-weight: bold" Class="mb-n2">PALARO 2026</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Dark">Agusan del Sur</MudText>
                    </MudStack>
                </MudStack>
            </MudLink>

            <!-- Navigation menu for larger screens -->
            <NavigationMenu />

            <!-- Spacer to push icons to the right side of the AppBar -->
            <MudSpacer />

            <!-- Stack for icons on the right side of the AppBar -->
            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">

                <!-- Icon button for unlocking features -->
                <MudIconButton OnClick="@(featuresUnlockingService.IsUnlocked? OpenLockFeaturesDialog : OpenUnlockFeaturesDialog)"
                               Icon="@(featuresUnlockingService.IsUnlocked ? Icons.Material.Filled.Lock : Icons.Material.Filled.LockOpen)" />
                               
                <!-- Online grocery store link (Hatod) -->
                <MudIconButton Icon="@Icons.Material.Filled.LocalGroceryStore" Href="https://serve.pgas.ph/hatud" Target="_Blank" />

                <!-- Conditional install button, only shown if the app is not installed as a PWA -->
                @if (_showInstallButton)
                {
                    <MudIconButton OnClick="@InstallApp" Icon="@Icons.Material.Filled.Download" />
                }

                <!-- Icon button for toggling dark mode -->
                <MudIconButton OnClick="ToggleDarkMode" Icon="@GetThemeIcon()" />
            </MudStack>

        </MudAppBar>
    </MudHidden>

    <!-- Drawer for smaller screens, hidden when on larger screens -->
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudAppBar Elevation="0">
            <!-- Icon button to toggle the drawer -->
            <MudIconButton Icon="@Icons.Material.Filled.Menu" OnClick="@ToggleDrawer" />

            <MudSpacer />

            <!-- Link to the home page with logo -->
            <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />


            <MudSpacer />

            <!-- Stack for icons on the right side of the AppBar -->
            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">

                <!-- Icon button for unlocking features -->
                <MudIconButton OnClick="@(featuresUnlockingService.IsUnlocked? OpenLockFeaturesDialog : OpenUnlockFeaturesDialog)"
                               Icon="@(featuresUnlockingService.IsUnlocked ? Icons.Material.Filled.Lock : Icons.Material.Filled.LockOpen)" />

                <!-- Online grocery store link (Hatod) -->
                <MudIconButton Icon="@Icons.Material.Filled.LocalGroceryStore" Href="https://serve.pgas.ph/hatud" Target="_Blank" />

                <!-- Conditional install button, only shown if the app is not installed as a PWA -->
                @if (_showInstallButton)
                {
                    <MudIconButton OnClick="@InstallApp" Icon="@Icons.Material.Filled.Download" />
                }

                <!-- Icon button for toggling dark mode -->
                <MudIconButton OnClick="ToggleDarkMode" Icon="@GetThemeIcon()" />
            </MudStack>

        </MudAppBar>

        <!-- Drawer component for navigation on smaller screens -->
        <MudDrawer @bind-Open="@_isDrawOpen">
            <!-- Drawer header with logo and title -->
            <MudDrawerHeader Dense="true" Class="pa-1">
                <MudStack Row Justify="Justify.FlexStart">
                    <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
                    <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="height: 100%" Class="mr-10">
                        <MudText Style="font-weight: bold; font-size: 20px" Class="mb-n2">PALARO 2026</MudText>
                        <MudText Typo="Typo.caption">Agusan del Sur</MudText>
                    </MudStack>
                </MudStack>
            </MudDrawerHeader>

            <!-- Navigation menu inside the drawer -->
            <MudDrawerContainer Class="mt-3">
                <NavigationMenu />
            </MudDrawerContainer>
        </MudDrawer>
    </MudHidden>

    <!-- Main content area where the body of the page will be rendered -->
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code
{
    // Reference to the MudThemeProvider for theme management
    private MudThemeProvider? _mudThemeProvider;

    // Dialog instance for notice dialog
    private IMudDialogInstance? _MudDialog { get; set; }

    // Flag to indicate if the notice is agreed
    private bool? _isNoticeAgreed;

    // Flag to control the visibility of the install button
    private bool _showInstallButton = false;

    // Flag to indicate if a new version is available
    private bool _newVersionAvailable = false;


    protected override async Task OnInitializedAsync()
    {
        // Check if the app is running in a PWA context and register for update notifications
        await RegisterForUpdateAvailableNotification();

        // remove this method if you don't want to unlock features on initialization or when governor cane is done checking

        //await featuresUnlockingService.UnlockFeaturesAsync(); // Ensure features are unlocked on initialization

        themeService.OnThemeChanged += StateHasChanged;
        featuresUnlockingService.OnLockChanged += StateHasChanged;
        await themeService.LoadThemePreference();

        // Check if the app is running in standalone mode (PWA installed)
        var isStandalone = await JSRuntime.InvokeAsync<bool>("pwaHelper.isRunningStandalone");

        if (isStandalone)
        {
            _showInstallButton = false; // Hide the button if the app is in standalone mode

            StateHasChanged(); // Trigger a re-render to update the UI
        }
        else
        {
            var canInstall = await JSRuntime.InvokeAsync<bool>("pwaHelper.isInstallPromptAvailable");

            _showInstallButton = canInstall; // Show the button if install is available

            StateHasChanged(); // Trigger a re-render to update the UI
        }

        await CheckFeaturesUnlocked(); // Check if features are unlocked
        await CheckNoticeAgreed(); // Check if notice is agreed

        if (_isNoticeAgreed != true)
        {
            await OpenNoticeDialog(); // Check if notice is agreed
        }

        StateHasChanged(); // Trigger a re-render after state change
    }




    // Method to check if features are unlocked
    private async Task CheckFeaturesUnlocked()
    {
        await featuresUnlockingService.LoadFromLocalStorageAsync();
    }

    // Method to check if the notice is agreed
    private async Task CheckNoticeAgreed()
    {
        var isNoticeAgreedString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "agreeNotice");
        _isNoticeAgreed = bool.TryParse(isNoticeAgreedString, out var result) && result;
    }




    // Method to install the app
    private async Task InstallApp()
    {
        await JSRuntime.InvokeVoidAsync("pwaHelper.installApp");
    }

    // Dark mode toggle method
    private async Task ToggleDarkMode()
    {
        await themeService.ToggleDarkModeAsync();
    }

    private string GetThemeIcon()
    {
        if (!themeService.UserSelectedTheme)
            return Icons.Material.Filled.AutoMode;

        return themeService.IsDarkMode switch
        {
            true => Icons.Material.Filled.DarkMode,
            false => Icons.Material.Filled.LightMode,
            _ => Icons.Material.Filled.Help // Fallback if something goes wrong
        };
    }




    // Dialog opening methods

    // Notice dialog
    private async Task OpenNoticeDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, NoHeader = true };

        var dialog = await dialogService.ShowAsync<Notice>("Notice", options);

        var result = await dialog.Result;
    }

    // Unlock features dialog
    private async Task OpenUnlockFeaturesDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true, NoHeader = true};

        var dialog = await dialogService.ShowAsync<UnlockFeatures>("Unlock", options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await CheckFeaturesUnlocked(); // Refresh the unlocked state after dialog closes
        }
    }

    // Lock features dialog
    private async Task OpenLockFeaturesDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await dialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm locking of features?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await featuresUnlockingService.ToggleUnlockFeaturesAsync();
        }
    }




    // Define the Palaro 2026 theme
    private MudTheme _palaroTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Dark = Colors.Gray.Darken4,
            White = Colors.Gray.Lighten5,
            Primary = "1E4CA1",
            Secondary = "EBB94D",
            Tertiary = "BA3535",
            ActionDefault = Colors.Gray.Darken4,
            AppbarBackground = Colors.Shades.White,
            AppbarText = Colors.Shades.Black,
            TextPrimary = Colors.Shades.Black,
        },
        PaletteDark = new PaletteDark()
        {
            Dark = Colors.Gray.Lighten5,
            White = Colors.Shades.Black,
            Primary = "7099E6",
            Secondary = "F0D498",
            Tertiary = "E77A7A",
            Background = Colors.Shades.Black,
            Surface = Colors.Shades.Black,
            DrawerBackground = Colors.Shades.Black,
            ActionDefault = Colors.Gray.Lighten5,
            AppbarBackground = Colors.Shades.Black,
            AppbarText = Colors.Gray.Lighten5,
            TextPrimary = Colors.Shades.White,
        },
        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "280px"
        },
        Typography = new Typography()
        {
            Default = new DefaultTypography()
            {
                FontFamily = new[] { "Inter", "sans-serif" },
            },
            H1 = new H1Typography()
            {
                FontSize = "clamp(2rem, 5vw + 1rem, 4rem)",
                FontWeight = "700"
            },
            H2 = new H2Typography()
            {
                FontSize = "clamp(1.75rem, 4vw + 0.5rem, 3rem)",
                FontWeight = "600"
            },
            H3 = new H3Typography()
            {
                FontSize = "clamp(1.5rem, 3vw + 0.5rem, 2.5rem)",
                FontWeight = "600"
            },
            H4 = new H4Typography()
            {
                FontSize = "clamp(1.25rem, 2.5vw + 0.5rem, 2rem)",
                FontWeight = "600"
            },
            H5 = new H5Typography()
            {
                FontSize = "clamp(1rem, 2vw + 0.5rem, 1.5rem)",
                FontWeight = "600"
            },
            H6 = new H6Typography()
            {
                FontSize = "clamp(0.875rem, 1.5vw + 0.5rem, 1.25rem)",
                FontWeight = "700"
            },
            Subtitle1 = new Subtitle1Typography()
            {
                FontSize = "clamp(1rem, 1.5vw + 0.25rem, 1.25rem)",
                FontWeight = "400"
            },
            Subtitle2 = new Subtitle2Typography()
            {
                FontSize = "clamp(0.875rem, 1.2vw + 0.25rem, 1rem)",
                FontWeight = "500"
            },
            Body1 = new Body1Typography()
            {
                FontSize = "clamp(1rem, 1.2vw + 0.25rem, 1.125rem)",
                FontWeight = "400"
            },
            Body2 = new Body2Typography()
            {
                FontSize = "clamp(0.875rem, 1vw + 0.25rem, 1rem)",
                FontWeight = "400"
            },
            Button = new ButtonTypography()
            {
                FontSize = "clamp(0.875rem, 0.8vw + 0.25rem, 1rem)",
                FontWeight = "700",
                TextTransform = "none"
            },
            Caption = new CaptionTypography()
            {
                FontSize = "clamp(0.75rem, 0.8vw + 0.25rem, 0.875rem)",
                FontWeight = "300"
            },
            Overline = new OverlineTypography()
            {
                FontSize = "clamp(0.625rem, 0.5vw + 0.25rem, 0.75rem)",
                FontWeight = "500",
                TextTransform = "uppercase",
                LetterSpacing = "0.1em"
            }
        }
    };




    // Drawer state management
    private bool _isDrawOpen = false;

    private void ToggleDrawer()
    {
        _isDrawOpen = !_isDrawOpen;
    }


    // Register for update available notification
    private async Task RegisterForUpdateAvailableNotification()
    {
        await JSRuntime.InvokeAsync<object>(
            identifier: "registerForUpdateAvailableNotification",
            DotNetObjectReference.Create(this),
            nameof(OnUpdateAvailable));
    }

    [JSInvokable(nameof(OnUpdateAvailable))]
    public Task OnUpdateAvailable()
    {
        _newVersionAvailable = true;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Add("A new version is available.", Severity.Info, config =>
        {
            config.RequireInteraction = true; // Prevent auto-dismiss
            config.ShowCloseIcon = false;     // Hide close icon
            config.VisibleStateDuration = int.MaxValue; // Keeps snackbar indefinitely

            config.Action = "Update";
            config.ActionColor = Color.Primary;
            config.OnClick = snackbar =>
            {
                // Reload the page to get the latest version
                JSRuntime.InvokeVoidAsync("location.reload", true);
                return Task.CompletedTask;
            };
        });

        StateHasChanged();
        return Task.CompletedTask;
    }
}