@page "/users"

@using System.Net.Http
@using System.Text.Json
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    @if (_usersDetails != null && _usersDetails.Any())
    {
        <MudItem xs="12">
            <MudStack Class="flex-lg-row">
                <MudStack Row Spacing="0">
                    <MudChip T="string" Size="Size.Small" Color="Color.Default" Icon="@Icons.Material.Filled.Event">Users: @_usersDetails?.Count()</MudChip>
                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Person">Active: @_usersDetails?.Where(x => x.Active == true).Count()</MudChip>
                    <MudChip T="string" Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.PersonOff">Inactive: @_usersDetails?.Where(x => x.Active == false).Count()</MudChip>
                </MudStack>
                <MudSpacer/>
                <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                    <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddUserDialog">Add User</MudButton>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetUsersAsync">Refresh Table</MudButton>
                </MudStack>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_usersDetails" FixedHeader FixedFooter Height="calc(87vh - 150px)" Virtualize="true" Filter="FilterFunc" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Users</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 15%" />
                        <col style="width: 15%" />
                        <col style="width: 10%" />
                        <col style="width: 10%" />
                        <col style="width: 10%" />
                        <col style="width: 10%" />
                        <col style="width: 10%" />
                        <col style="width: 5%" />
                        <col style="width: 5%" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<UsersDTO.UsersDetails, object?>(x => (x.FirstName, x.LastName))">
                            Name
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Contact Details</MudTh>
                    <MudTh>Affiliation</MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<UsersDTO.UsersDetails, object?>(x => x.Role)">
                            Role
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<UsersDTO.UsersDetails, object?>(x => x.CreatedAt)">
                            Date Created
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Recent Update</MudTh>
                    <MudTh>Recent Log-in</MudTh>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UsersDTO.UsersDetails, object?>(x => x.Active)">
                            Status
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context="user">
                    <MudTd DataLabel="Name">
                        <MudStack Spacing="1">
                            <MudTooltip @onmouseover="() => OnHoverUser(user)">
                                <ChildContent>
                                    <MudText Typo="Typo.body2">@user.FirstName @user.LastName</MudText>
                                    <MudText Style="font-size: 12px">@($"@{user.Username}")</MudText>
                                </ChildContent>
                                <TooltipContent>
                                    @if (userQRCodes.TryGetValue(user.ID, out var qrCode))
                                    {
                                        <MudImage Class="mt-1 rounded" Src="@qrCode" Alt="QR Code" Style="width: 100px;" />
                                    }
                                    else
                                    {
                                        <MudText>Generating QR...</MudText>
                                    }
                                </TooltipContent>
                            </MudTooltip>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Contact Details">
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.caption">@user.EmailAddress</MudText>
                            <MudText Typo="Typo.caption">@user.ContactNumber?.ToString().Insert(4, " ").Insert(8, " ")</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Affiliation">
                        <MudText Typo="Typo.caption">@user.Affiliation</MudText>
                    </MudTd>
                    <MudTd DataLabel="Role">
                        <MudText Typo="Typo.caption">@user.Role</MudText>
                    </MudTd>
                    <MudTd DataLabel="Date Created">
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.caption">@user.CreatedAt?.ToString("MMM d, yyyy")</MudText>
                            <MudText Typo="Typo.caption">@user.CreatedAt?.ToString("h:mm tt")</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Recent Update">
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.caption">@user.UpdateAt?.ToString("MMM d, yyyy")</MudText>
                            <MudText Typo="Typo.caption">@user.UpdateAt?.ToString("h:mm tt")</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Recent Log-in">
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.caption">@user.LastLogin?.ToString("MMM d, yyyy")</MudText>
                            <MudText Typo="Typo.caption">@user.LastLogin?.ToString("h:mm tt")</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Status">
                        @if (user.Active == true)
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Success">Active</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Error">Inactive</MudChip>
                        }
                    </MudTd>
                    <MudTd Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditUserDialog(user.ID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // JSON storage
    private List<UsersDTO.UsersDetails>? _usersDetails;


    // DTOs
    public class UsersDTO
    {
        public class UsersDetails
        {
            public string ID { get; set; } = null!;
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public string? Username { get; set; }
            public string? Affiliation { get; set; }
            public string? EmailAddress { get; set; }
            public string? ContactNumber { get; set; }
            public DateTime? CreatedAt { get; set; }
            public DateTime? UpdateAt { get; set; }
            public DateTime? LastLogin { get; set; }
            public bool? Active { get; set; }
            public string? Role { get; set; }
        }
    }

    private string? qrBase64;
    private Dictionary<string, string> userQRCodes = new();
    private void OnHoverUser(UsersDTO.UsersDetails user)
    {
        if (user != null && !userQRCodes.ContainsKey(user.ID))
        {
            var qr = GenerateQrCodeBase64(user.ID.ToString());
            userQRCodes[user.ID] = qr;
            StateHasChanged(); // Force re-render to show QR code
        }
    }

    private string GenerateQrCodeBase64(string text)
    {
        using var qrGenerator = new QRCoder.QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(text, QRCoder.QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new QRCoder.PngByteQRCode(qrCodeData);
        byte[] qrCodeBytes = qrCode.GetGraphic(20);

        return $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
    }


    // Methods
    private string _searchString = "";

    private bool FilterFunc(UsersDTO.UsersDetails usersDetails)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        var searchableFields = new[] {
            usersDetails.FirstName,
            usersDetails.LastName,
            usersDetails.Role,
            usersDetails.Affiliation
    };

        return searchableFields
            .Where(field => !string.IsNullOrWhiteSpace(field))
            .Any(field => field!.Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }



    // Dialogs
    private async Task OpenEditUserDialog(string selectedID)
    {
        var parameter = new DialogParameters<EditUserDialog>
        {
            {x => x.selectedUserID, selectedID}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditUserDialog>("Edit User", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetUsersAsync();
        }
    }

    private async Task OpenAddUserDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddUserDialog>("Add User", options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetUsersAsync();
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetUsersAsync();
    }


    private async Task GetUsersAsync()
    {
        string url = "/Users/UsersDetails";
        _usersDetails = await apiService.GetAsync<UsersDTO.UsersDetails>(url);
    }
}
