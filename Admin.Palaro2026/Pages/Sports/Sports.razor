@page "/sports"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<PageTitle>Sports Management | PALARO 2026</PageTitle>

<MudGrid Spacing="0">
    @if (_sportsWithCategories != null && _sportsWithCategories.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddSportSubcategoryDialog">Add Sport</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Settings" OnClick="OpenSchoolManagementSettingsDialog">Sports Settings</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetSportsDetailsAsync">Refresh Data</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_sportsWithCategories" Context="sport" FixedHeader FixedFooter Height="calc(87vh - 150px)" Virtualize="true" Filter="FilterFunc" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Sport</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" Clearable/>
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 20%" />
                        <col style="width: 50%" />
                        <col style="width: 20%;" />
                        <col style="width: 5%;" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SportWithCategory, object?>(x => x.Sport)">
                            Subcategories
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SportWithCategory, object?>(x => x.Description)">
                            Gender
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SportWithCategory, object?>(x => x.Category)">
                            Category
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Subcategories">@sport.Sport</MudTd>
                    <MudTd DataLabel="Gender">@sport.Description</MudTd>
                    <MudTd DataLabel="Category">@sport.Category</MudTd>
                    <MudTd Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditSportSubcategoryDialog(sport.SportID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    private List<SportWithCategory>? _sportsWithCategories;


    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }
    }
    public class SportWithCategory
    {
        public int SportID { get; set; }
        public string? Sport { get; set; }
        public string? Description { get; set; }
        public int? SportCategoryID { get; set; }
        public string? Category { get; set; }
    }

    // Methods
    private string _searchString = "";

    private bool FilterFunc(SportWithCategory sportDetails)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return sportDetails.Sport!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               sportDetails.Category!.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }


    // Dialogs
    private async Task OpenEditSportSubcategoryDialog(int selectedID)
    {
        var parameter = new DialogParameters<EditSportDialog>
        {
            {x => x.SelectedSportID, selectedID}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, BackdropClick = false };

        var dialog = await DialogService.ShowAsync<EditSportDialog>("Edit Sport", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetSportsDetailsAsync();
        }
    }

    private async Task OpenAddSportSubcategoryDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, BackdropClick = false };

        var dialog = await DialogService.ShowAsync<AddSportDialog>("Add Sport", options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetSportsDetailsAsync();
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetSportsDetailsAsync();
    }

    private async Task GetSportsDetailsAsync()
    {
        var sportsList = await apiService.GetAsync<SportsDTO.Sports>("/Sports");
        var categoriesList = await apiService.GetAsync<SportsDTO.SportCategories>("/Sports/Categories");

        _sportsWithCategories = (from sport in sportsList
                                 join category in categoriesList!
                                 on sport.SportCategoryID equals category.ID into sc
                                 from category in sc.DefaultIfEmpty()
                                 select new SportWithCategory
                                 {
                                     SportID = sport.ID,
                                     Sport = sport.Sport,
                                     Description = sport.Description,
                                     SportCategoryID = sport.SportCategoryID,
                                     Category = category?.Category
                                 }).ToList();
    }


    private async Task OpenSchoolManagementSettingsDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, BackdropClick = false };

        var dialog = await DialogService.ShowAsync<SportsManagementSettings>("Sports Settings", options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetSportsDetailsAsync();
        }
    }
}
