@page "/sports"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    @if (_sportCategories != null && _sportCategories.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6">Sports</MudText>
                <MudButton Size="Size.Large" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetSportsDetailsAsync">Refresh Data</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudDivider />
            <MudTabs>
                <MudVirtualize Items="_sportCategories" Context="sportCategory">
                    <MudTabPanel Style="text-transform: none" Text="@sportCategory.Category">
                        <MudTabs Position="Position.Left" PanelClass="pa-3">
                            <MudVirtualize Items="sportCategory.SportsList" Context="sport">
                                <MudTabPanel Style="text-transform: none" Text="@sport.Sport">
                                    <MudGrid>
                                        <MudVirtualize Items="sport.SchoolLevelsList" Context="schoolLevel">
                                            <MudItem xs="12" md="6">
                                                <MudText>@schoolLevel.Level</MudText>
                                                <MudDivider Class="mb-5" />
                                                <MudGrid>
                                                    <MudVirtualize Items="schoolLevel.SportGenderCategoriesList" Context="gender">
                                                        <MudItem xs="12" sm="6" >
                                                            @{
                                                                string? genderCategory;

                                                                if (gender.Gender == "Male")
                                                                {
                                                                    genderCategory = "Male ♂️";
                                                                }
                                                                else if (gender.Gender == "Female")
                                                                {
                                                                    genderCategory = "Female ♀️";
                                                                }
                                                                else
                                                                {
                                                                    genderCategory = "Mixed ♂️♀️";
                                                                }
                                                            }
                                                            <MudText Typo="Typo.body2">@genderCategory</MudText>
                                                            <MudDivider/>
                                                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                                                            <MudText Style="font-size: 12px" Class="mb-2">@(gender.SportSubcategoriesList?.Count == 1 ? "Subcategory" : "Subcategories")</MudText>
                                                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Settings" />
                                                            </MudStack>
                                                            <MudStack>
                                                                @{
                                                                    int subcategoryIndex = 1;
                                                                }
                                                                <MudVirtualize Items="gender.SportSubcategoriesList" Context="subcategory">
                                                                    <MudText Typo="Typo.caption">
                                                                        @subcategoryIndex. @subcategory.Subcategory
                                                                        @{
                                                                            subcategoryIndex++;
                                                                        }
                                                                    </MudText>
                                                                </MudVirtualize>
                                                            </MudStack>

                                                        </MudItem>
                                                    </MudVirtualize>
                                                </MudGrid>
                                            </MudItem>
                                        </MudVirtualize>
                                    </MudGrid>
                                </MudTabPanel>
                            </MudVirtualize>
                        </MudTabs>
                    </MudTabPanel>
                </MudVirtualize>
            </MudTabs>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // JSON storage
    private List<SportsDTO.SportDetails.SportCategory>? _sportCategories;


    // DTOs

    public class SportsDTO
    {
        public class SportDetails
        {
            public class SportCategory
            {
                public int ID { get; set; }
                public string? Category { get; set; }
                public List<Sports>? SportsList { get; set; }
            }

            public class Sports
            {
                public int ID { get; set; }
                public string? Sport { get; set; }
                public string? Description { get; set; }
                public List<SchoolLevels>? SchoolLevelsList { get; set; }
            }

            public class SchoolLevels
            {
                public int ID { get; set; }
                public string? Level { get; set; }
                public List<SportGenderCategories>? SportGenderCategoriesList { get; set; }
            }

            public class SportGenderCategories
            {
                public int ID { get; set; }
                public string? Gender { get; set; }
                public List<SportSubcategories>? SportSubcategoriesList { get; set; }
            }

            public class SportSubcategories
            {
                public int ID { get; set; }
                public string? Subcategory { get; set; }
            }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetSportsDetailsAsync();
    }

    private async Task GetSportsDetailsAsync()
    {
        string url = "/Sports/Details";

        _sportCategories = await apiService.GetAsync<SportsDTO.SportDetails.SportCategory>(url);
    }
}
