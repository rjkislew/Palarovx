@page "/profiles/players"

@using System.Net.Http
@using System.Text.Json
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    @if (_profilePlayers != null && _profilePlayers.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddPlayerDialog">Add Player</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetPlayersProfileAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_profilePlayers" FixedHeader FixedFooter Height="calc(87vh - 150px)" Virtualize="true" Filter="FilterFunc" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Players</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.MdAndDown">
                        <col style="width: 15%" />
                        <col style="width: 20%" />
                        <col style="width: 15%" />
                        <col style="width: 45%" />
                        <col style="width: 5%" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProfilesDTO.ProfilePlayersDetails.ProfilePlayers, object?>(x => (x.FirstName, x.LastName))">
                            Player
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProfilesDTO.ProfilePlayersDetails.ProfilePlayers, object?>(x => (x.Region, x.Abbreviation))">
                            School
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        Sport
                    </MudTh>
                    <MudTh>
                        Sport Event
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context="player">
                    <MudTd DataLabel="Player">
                        <MudText Typo="Typo.body2">
                            @player.FirstName @player.LastName
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="School">
                        <MudText Typo="Typo.caption">
                            @player.Region (@player.Abbreviation), @player.Division
                            <br />
                            @player.School
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Sport">
                        <MudText Typo="Typo.body2">
                            @player.Sport <br />
                            <MudElement>
                                <MudText Typo="Typo.caption">
                                    @player.Level <br />
                                </MudText>
                            </MudElement>
                            <MudElement>
                                <MudText Typo="Typo.caption">
                                    @player.Category
                                </MudText>
                            </MudElement>
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Sport Event">
                        <MudGrid>
                            @if (player.ProfilePlayerSportsList?.Count() > 0)
                            {
                                <MudVirtualize Items="player.ProfilePlayerSportsList" Context="sport">
                                    <MudItem md="12" lg="6">
                                        <MudPaper Outlined Class="pa-3" Style="background-color: transparent; height: 100%">
                                            @* Sport Event *@
                                            <MudStack Spacing="1" Style="height: 100%" Justify="Justify.SpaceBetween">
                                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                                                    @* Subcategory *@
                                                    <MudText Typo="Typo.body2">
                                                        @sport.Subcategory |
                                                        <MudElement>
                                                            @{
                                                            string gender;

                                                            if (sport.Gender == "Male")
                                                            {
                                                                gender = "♂️";
                                                            }
                                                            else if (sport.Gender == "Female")
                                                            {
                                                                gender = "♀️";
                                                            }
                                                            else
                                                            {
                                                                gender = "♂️♀️";
                                                            }
                                                        }
                                                        <MudText Typo="Typo.caption">
                                                            @gender
                                                        </MudText>
                                                    </MudElement>
                                                </MudText>
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => OpenEditPlayerSportEventDialog(player.ID, player.SportID, player.SchoolLevelID, sport.ProfilePlayerSportID, player.RegionID)" />
                                            </MudStack>

                                            @* Coach *@
                                            <MudStack Spacing="1">

                                                <MudDivider />
                                                @if (sport.ProfilePlayerSportCoachesList?.Count > 1)
                                                {
                                                    <MudText Typo="Typo.caption">
                                                        Coaches:
                                                    </MudText>
                                                }
                                                else if (sport.ProfilePlayerSportCoachesList?.Count == 1)
                                                {
                                                    <MudText Typo="Typo.caption">
                                                        Coach:
                                                    </MudText>
                                                }

                                                <MudStack Row Spacing="0" Wrap="Wrap.Wrap">
                                                    <MudVirtualize Items="sport.ProfilePlayerSportCoachesList" Context="coach">
                                                        <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small">
                                                            @coach.CoachFirstName @coach.CoachLastName
                                                        </MudChip>
                                                    </MudVirtualize>
                                                </MudStack>

                                            </MudStack>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            </MudVirtualize>
                                <MudItem xs="12">
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" FullWidth Style="text-transform: none" OnClick="() => OpenAddPlayerSportEventDialog(player.ID, player.SportID, player.SchoolLevelID, player.RegionID)">Add sport event</MudButton>
                                </MudItem>
                            }
                            else
                            {
                                <MudItem xs="12">
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" FullWidth Style="text-transform: none" OnClick="() => OpenAddPlayerSportEventDialog(player.ID, player.SportID, player.SchoolLevelID, player.RegionID)">Add sport event</MudButton>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudTd>
                    <MudTd Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditPlayerDialog(player.ID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // JSON storage
    private List<ProfilesDTO.ProfilePlayersDetails.ProfilePlayers>? _profilePlayers;


    // DTOs
    public class ProfilesDTO
    {
        public class ProfilePlayersDetails
        {
            public class ProfilePlayers
            {
                public string? ID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
                public int? SchoolLevelID { get; set; }
                public string? Level { get; set; }
                public string? Division { get; set; }
                public int? RegionID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public string? Category { get; set; }
                public int? SportID { get; set; }
                public string? Sport { get; set; }
                public List<ProfilePlayerSports>? ProfilePlayerSportsList { get; set; }
            }

            public class ProfilePlayerSports
            {
                public int ProfilePlayerSportID { get; set; }
                public string? Gender { get; set; }
                public string? Subcategory { get; set; }
                public List<ProfilePlayerSportCoaches>? ProfilePlayerSportCoachesList { get; set; }
            }

            public class ProfilePlayerSportCoaches
            {
                public string? CoachFirstName { get; set; }
                public string? CoachLastName { get; set; }
            }
        }

        public class ProfilePlayers
        {
            public int ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolID { get; set; }
            public int? SportID { get; set; }
        }
    }

    public class SchoolsDTO
    {
        public class Schools
        {
            public int ID { get; set; }
            public string? School { get; set; }
            public int? SchoolDivisionID { get; set; }
            public int? SchoolLevelsID { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }

        public class SchoolDivisions
        {
            public int ID { get; set; }
            public string? Division { get; set; }
            public int? SchoolRegionID { get; set; }
        }

        public class SchoolLevels
        {
            public int ID { get; set; }
            public string? Level { get; set; }
        }
    }

    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }
    }


    // Methods
    private string _searchString = "";

    private bool FilterFunc(ProfilesDTO.ProfilePlayersDetails.ProfilePlayers profilePlayers)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        bool matchesBasicInfo = new[] {
             profilePlayers.FirstName,
             profilePlayers.LastName,
             profilePlayers.Region,
             profilePlayers.Abbreviation,
             profilePlayers.Sport,
             profilePlayers.Category
    }
        .Where(field => !string.IsNullOrWhiteSpace(field))
        .Any(field => field!.Contains(_searchString, StringComparison.OrdinalIgnoreCase));

        bool matchesProfilePlayerSports = profilePlayers.ProfilePlayerSportsList?
            .Where(sport =>
                (sport.Gender?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (sport.Subcategory?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (sport.ProfilePlayerSportCoachesList?.Any(coach =>
                    (coach.CoachFirstName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (coach.CoachLastName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)) ?? false)
            )
            .Any() ?? false;

        return matchesBasicInfo || matchesProfilePlayerSports;
    }



    // Dialogs
    private async Task OpenAddPlayerDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddPlayerDialog>("Add Player", options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetPlayersProfileAsync();
        }
    }

    private async Task OpenEditPlayerDialog(string? selectedID)
    {
        var parameter = new DialogParameters<EditPlayerDialog>
        {
            {x => x.selectedPlayerID, selectedID}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditPlayerDialog>("Edit Player", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetPlayersProfileAsync();
        }
    }

    private async Task OpenAddPlayerSportEventDialog(string? selectedID, int? selectedSportID, int? selectedSchoolLevelID, int? selectedRegionID)
    {
        var parameter = new DialogParameters<AddPlayerSportEventDialog>
        {
            {x => x.selectedPlayerID, selectedID},
            {x => x.selectedSportID, selectedSportID},
            {x => x.selectedSchoolLevelID, selectedSchoolLevelID},
            {x => x.selectedRegionID, selectedRegionID},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddPlayerSportEventDialog>("Add Sport Event for Player", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetPlayersProfileAsync();
        }
    }

    private async Task OpenEditPlayerSportEventDialog(string? selectedID, int? selectedSportID, int? selectedSchoolLevelID, int selectedPlayerSportID, int? selectedRegionID)
    {
        var parameter = new DialogParameters<EditPlayerSportEventDialog>
        {
            {x => x.selectedPlayerID, selectedID},
            {x => x.selectedSportID, selectedSportID},
            {x => x.selectedSchoolLevelID, selectedSchoolLevelID},
            {x => x.selectedPlayerSportsID, selectedPlayerSportID},
            {x => x.selectedRegionID, selectedRegionID},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditPlayerSportEventDialog>("Edit Sport Event for Player", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetPlayersProfileAsync();
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetPlayersProfileAsync();
    }

    private async Task GetPlayersProfileAsync()
    {
        string url = "/Profiles/Player/Details";

        _profilePlayers = await apiService.GetAsync<ProfilesDTO.ProfilePlayersDetails.ProfilePlayers>(url);
    }
}
