@page "/profiles/players"

@using System.Net.Http
@using System.Text.Json
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h4">Players</MudText>
        <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    </MudItem>
    @if (_profilePlayers != null && _profilePlayers.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddPlayerDialog">Add Player</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetPlayersProfileAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_profilePlayers" Striped Virtualize="true" Filter="FilterFunc" Elevation="0" Hover>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">List of Players</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 15%" />
                        <col style="width: 20%" />
                        <col style="width: 15%" />
                        <col style="width: 45%" />
                        <col style="width: 5%" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProfilesDTO.ProfilePlayersDetails.ProfilePlayers, object?>(x=>new {x.FirstName, x.LastName})">
                            Player
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProfilesDTO.ProfilePlayersDetails.ProfilePlayers, object?>(x=> new {x.Region, x.Abbreviation})">
                            School
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        Sport
                    </MudTh>
                    <MudTh>
                        Sport Event
                    </MudTh>
                    <MudTh Style="text-align: center">Settings</MudTh>
                </HeaderContent>
                <RowTemplate Context="player">
                    <MudTd DataLabel="Player">
                        <MudText Typo="Typo.body1">
                            @player.FirstName @player.LastName
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="School">
                        <MudText Typo="Typo.body2">
                            @player.Region (@player.Abbreviation),
                            <MudElement>
                                <MudText Typo="Typo.caption">
                                    @player.Division <br />
                                </MudText>
                            </MudElement>
                            <MudElement>
                                <MudText Typo="Typo.caption">
                                    @player.School
                                </MudText>
                            </MudElement>
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Sport">
                        <MudText Typo="Typo.body2">
                            @player.Sport <br />
                            <MudElement>
                                <MudText Typo="Typo.caption">
                                    @player.Level <br />
                                </MudText>
                            </MudElement>
                            <MudElement>
                                <MudText Typo="Typo.caption">
                                    @player.Category
                                </MudText>
                            </MudElement>
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Sport Event">
                        <MudGrid>
                            @if (player.ProfilePlayerSportsList?.Count() > 0)
                            {
                                <MudVirtualize Items="player.ProfilePlayerSportsList" Context="sport">
                                    <MudItem xs="12" md="6">
                                        <MudPaper Outlined Class="pa-3" Style="background-color: transparent">
                                            @* Sport Event *@
                                            <MudStack Spacing="1">

                                                <MudStack Row Justify="Justify.SpaceBetween">
                                                    @* Subcategory *@
                                                    <MudText Typo="Typo.body2">
                                                        @sport.Subcategory
                                                    </MudText>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => OpenEditPlayerSportEventDialog(player.ID, player.SportID, player.SchoolLevelID, sport.ProfilePlayerSportID, player.RegionID)" />

                                                </MudStack>

                                                @* Gender *@
                                                <MudStack Spacing="0">
                                                    @if (sport.Gender == "Male")
                                                {
                                                    <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                        <MudText Typo="Typo.caption">Male</MudText>
                                                        <MudIcon Icon="@Icons.Material.Filled.Male" Color="Color.Info" Size="Size.Small" />
                                                    </MudStack>
                                                }
                                                else if (sport.Gender == "Female")
                                                {
                                                    <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                        <MudText Typo="Typo.caption">Female</MudText>
                                                        <MudIcon Icon="@Icons.Material.Filled.Female" Color="Color.Error" Size="Size.Small" />
                                                    </MudStack>
                                                }
                                                else
                                                {
                                                    <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                        <MudStack Row Spacing="0">
                                                            <MudText Typo="Typo.caption">Mixed</MudText>
                                                            <MudIcon Icon="@Icons.Material.Filled.Male" Color="Color.Info" Size="Size.Small" />
                                                            <MudIcon Icon="@Icons.Material.Filled.Female" Color="Color.Error" Size="Size.Small" />
                                                        </MudStack>
                                                    </MudStack>
                                                }
                                            </MudStack>
                                            <MudDivider />

                                            @* Coach *@
                                            <MudStack Spacing="1">
                                                @if (sport.ProfilePlayerSportCoachesList?.Count > 1)
                                                {
                                                    <MudText Typo="Typo.caption">
                                                        Coaches:
                                                    </MudText>
                                                }
                                                else if (sport.ProfilePlayerSportCoachesList?.Count == 1)
                                                {
                                                    <MudText Typo="Typo.caption">
                                                        Coach:
                                                    </MudText>
                                                }

                                                <MudStack Class="ml-1" Spacing="0">
                                                    <MudVirtualize Items="sport.ProfilePlayerSportCoachesList" Context="coach">
                                                        <MudText Typo="Typo.caption">
                                                           - @coach.CoachFirstName @coach.CoachLastName
                                                        </MudText>
                                                    </MudVirtualize>
                                                </MudStack>

                                            </MudStack>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            </MudVirtualize>
                                <MudItem xs="12">
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Style="text-transform: none" OnClick="() => OpenAddPlayerSportEventDialog(player.ID, player.SportID, player.SchoolLevelID, player.RegionID)">Add sport event</MudButton>
                                </MudItem>
                            }
                            else
                            {
                                <MudItem xs="12">
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Style="text-transform: none" OnClick="() => OpenAddPlayerSportEventDialog(player.ID, player.SportID, player.SchoolLevelID, player.RegionID)">Add sport event</MudButton>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudTd>
                    <MudTd DataLabel="Settings" Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditPlayerDialog(player.ID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // JSON storage
    private List<ProfilesDTO.ProfilePlayersDetails.ProfilePlayers>? _profilePlayers;


    // Breadcrumbs
    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "./"),
    new("Profiles", href: "./profiles"),
    new("Players", href: null, disabled: true)
    ];


    // DTOs
    public class ProfilesDTO
    {
        public class ProfilePlayersDetails
        {
            public class ProfilePlayers
            {
                public int ID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
                public int? SchoolLevelID { get; set; }
                public string? Level { get; set; }
                public string? Division { get; set; }
                public int? RegionID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public string? Category { get; set; }
                public int? SportID { get; set; }
                public string? Sport { get; set; }
                public List<ProfilePlayerSports>? ProfilePlayerSportsList { get; set; }
            }

            public class ProfilePlayerSports
            {
                public int ProfilePlayerSportID { get; set; }
                public string? Gender { get; set; }
                public string? Subcategory { get; set; }
                public List<ProfilePlayerSportCoaches>? ProfilePlayerSportCoachesList { get; set; }
            }

            public class ProfilePlayerSportCoaches
            {
                public string? CoachFirstName { get; set; }
                public string? CoachLastName { get; set; }
            }
        }

        public class ProfilePlayers
        {
            public int ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolID { get; set; }
            public int? SportID { get; set; }
        }
    }

    public class SchoolsDTO
    {
        public class Schools
        {
            public int ID { get; set; }
            public string? School { get; set; }
            public int? SchoolDivisionID { get; set; }
            public int? SchoolLevelsID { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }

        public class SchoolDivisions
        {
            public int ID { get; set; }
            public string? Division { get; set; }
            public int? SchoolRegionID { get; set; }
        }

        public class SchoolLevels
        {
            public int ID { get; set; }
            public string? Level { get; set; }
        }
    }

    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }
    }


    // Methods
    private string _searchString = "";

    private bool FilterFunc(ProfilesDTO.ProfilePlayersDetails.ProfilePlayers profilePlayers)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        bool matchesBasicInfo = (profilePlayers.FirstName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (profilePlayers.LastName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (profilePlayers.Region?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (profilePlayers.Abbreviation?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (profilePlayers.Sport?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (profilePlayers.Category?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);

        bool matchesProfilePlayerSports = (profilePlayers.ProfilePlayerSportsList?.Any(sport =>
         (sport.Gender?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
         (sport.Subcategory?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
         (sport.ProfilePlayerSportCoachesList?.Any(coach =>
             (coach.CoachFirstName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
             (coach.CoachLastName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)) ?? false)
     ) ?? false);

        return matchesBasicInfo || matchesProfilePlayerSports;
    }




    // Dialogs
    private async Task OpenAddPlayerDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddPlayerDialog>("Add Player", options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetPlayersProfileAsync();
        }
    }

    private async Task OpenEditPlayerDialog(int selectedID)
    {
        var parameter = new DialogParameters<EditPlayerDialog>
        {
            {x => x.selectedPlayerID, selectedID}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditPlayerDialog>("Edit Player", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetPlayersProfileAsync();
        }
    }

    private async Task OpenAddPlayerSportEventDialog(int selectedID, int? selectedSportID, int? selectedSchoolLevelID, int? selectedRegionID)
    {
        var parameter = new DialogParameters<AddPlayerSportEventDialog>
        {
            {x => x.selectedPlayerID, selectedID},
            {x => x.selectedSportID, selectedSportID},
            {x => x.selectedSchoolLevelID, selectedSchoolLevelID},
            {x => x.selectedRegionID, selectedRegionID},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddPlayerSportEventDialog>("Add Sport Event for Player", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetPlayersProfileAsync();
        }
    }

    private async Task OpenEditPlayerSportEventDialog(int selectedID, int? selectedSportID, int? selectedSchoolLevelID, int selectedPlayerSportID, int? selectedRegionID)
    {
        var parameter = new DialogParameters<EditPlayerSportEventDialog>
        {
            {x => x.selectedPlayerID, selectedID},
            {x => x.selectedSportID, selectedSportID},
            {x => x.selectedSchoolLevelID, selectedSchoolLevelID},
            {x => x.selectedPlayerSportsID, selectedPlayerSportID},
            {x => x.selectedRegionID, selectedRegionID},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditPlayerSportEventDialog>("Edit Sport Event for Player", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetPlayersProfileAsync();
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetPlayersProfileAsync();
    }

    private async Task GetPlayersProfileAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Player/Details";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _profilePlayers = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfilePlayersDetails.ProfilePlayers>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
