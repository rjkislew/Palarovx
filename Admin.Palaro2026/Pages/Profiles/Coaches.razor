@page "/profiles/coaches"

@using System.Net.Http
@using System.Text.Json
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h4">Coaches</MudText>
        <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    </MudItem>
    @if (_profileCoachesDetails != null && _profileCoachesDetails.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddCoachDialog">Add School</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetCoachesAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_profileCoachesDetails" Striped Virtualize="true" Filter="FilterFunc" Elevation="0" Hover>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">List of Coaches</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 50%" />
                        <col style="width: 45%" />
                        <col style="width: 5%;" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProfilesDTO.ProfileCoachesDetails, object?>(x=>new {x.FirstName, x.LastName})">
                            Name
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProfilesDTO.ProfileCoachesDetails, object?>(x=> new {x.Region, x.Abbreviation})">
                            Region
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Settings</MudTh>
                </HeaderContent>
                <RowTemplate Context="coach">
                    <MudTd DataLabel="Firstname">@coach.FirstName @coach.LastName</MudTd>
                    <MudTd DataLabel="Region">
                        @coach.Region (@coach.Abbreviation)
                    </MudTd>
                    <MudTd DataLabel="Settings" Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditCoachDialog(coach.ID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // JSON storage
    private List<ProfilesDTO.ProfileCoachesDetails>? _profileCoachesDetails;


    // Breadcrumbs
    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "./"),
        new("Profiles", href: "./profiles"),
        new("Coaches", href: null, disabled: true)
    ];


    // DTOs
    public class ProfilesDTO
    {
        public class ProfileCoachesDetails
        {
            public int ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }
    }


    // Methods
    private string _searchString = "";

    private bool FilterFunc(ProfilesDTO.ProfileCoachesDetails profileCoachesDetails)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return profileCoachesDetails.FirstName!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               profileCoachesDetails.LastName!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               profileCoachesDetails.Region!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               profileCoachesDetails.Abbreviation!.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }


    // Dialogs
    private async Task OpenEditCoachDialog(int selectedID)
    {
        var parameter = new DialogParameters<EditCoachDialog>
        {
            {x => x.selectedCoachID, selectedID}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditCoachDialog>("Edit Coach", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetCoachesAsync();
        }
    }

    private async Task OpenAddCoachDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddCoachDialog>("Add Coach", options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetCoachesAsync();
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetCoachesAsync();
    }

    private async Task GetCoachesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Coach/Details";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _profileCoachesDetails = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfileCoachesDetails>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
