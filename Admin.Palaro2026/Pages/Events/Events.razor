@page "/events"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient


<MudGrid Spacing="0">

    <!-- checks if there are any error from API calls -->
    @if (_errorLoading == false)
    {
        <!-- if no error then display events -->
        <!-- Add Event and Refresh Table buttons -->
        <MudItem xs="12">
            <MudStack Class="flex-lg-row">
                <MudStack Row Spacing="0" Wrap="Wrap.Wrap">
                    <MudChip T="string" Size="Size.Small" Color="Color.Default" Icon="@Icons.Material.Filled.Event">Events: @_eventDetails?.Count()</MudChip>
                    <MudChip T="string" Size="Size.Small" Color="Color.Dark" Icon="@Icons.Material.Filled.NotificationImportant">Lacking Players: @_eventDetails?.Where(x => x.IsFinished == false && x.EventVersusList?.Count() < 2).Count()</MudChip>
                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.PlayCircleOutline">Ongoing: @_eventDetails?.Where(x => x.IsFinished == false && x.EventVersusList?.Count()! < 2).Count()</MudChip>
                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircleOutline">Finished: @_eventDetails?.Where(x => x.IsFinished == true).Count()</MudChip>
                </MudStack>
                <MudSpacer/>
                <MudStack Row Spacing="0">
                    <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddEventDialog">Add Event</MudButton>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetEventsAsync">Refresh Table</MudButton>
                </MudStack>
            </MudStack>
        </MudItem>

        <!-- table -->
        <MudItem xs="12">
            <MudTable Outlined Items="_eventDetails" Context="eventDetail" FixedHeader FixedFooter Height="calc(87vh - 150px)" Virtualize="true" Filter="FilterFunc" Elevation="0">

                <!--
                Toolbar content:
                - Table title
                - Search bar
                -->
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Events</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>

                <!-- colgroup: column fixed widths: disabled/hidden on mobile view port -->
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 20%" />
                        <col style="width: 20%" />
                        <col style="width: 15%" />
                        <col style="width: 10%" />
                        <col style="width: 20%" />
                        <col style="width: 10%" />
                        <col style="width: 5%" />
                    </MudHidden>
                </ColGroup>

                <!-- headers: default sort by schedule by descending order - display the recently added event first -->
                <HeaderContent>
                    <MudTh>Event</MudTh>
                    <MudTh>Opposing Teams</MudTh>
                    <MudTh>Venue</MudTh>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<EventsDTO.EventDetails.Event, object?>(x => x.Date)">
                            Schedule
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Stream Service</MudTh>
                    <MudTh>Tally Clerk</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <!-- rows: render all data from coming from events api -->
                <RowTemplate>
                    <MudTd Datalabel="Event">
                        <MudStack>
                            <MudStack Spacing="0">
                                <MudText Style="font-weight: bold">
                                    @eventDetail.Sport
                                    <MudElement>
                                        <MudText Typo="Typo.caption">
                                            | @eventDetail.Category
                                        </MudText>
                                    </MudElement>
                                </MudText>
                                <MudText Typo="Typo.caption">
                                    @eventDetail.Subcategory ∙ @eventDetail.Level ∙ @eventDetail.Gender
                                </MudText>
                            </MudStack>

                            <MudStack Row Spacing="0">
                                @if (@eventDetail.IsFinished == true)
                                {
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small">Finished</MudChip>
                                }
                                else if (eventDetail.IsFinished == false && eventDetail.EventVersusList?.Count() < 2)
                                {
                                    <MudChip T="string" Color="Color.Dark" Size="Size.Small">Add Players</MudChip>
                                }
                                else
                                {
                                    <MudChip T="string" Color="Color.Warning" Size="Size.Small">Ongoing</MudChip>
                                }
                                <MudChip T="string" Color="Color.Default" Size="Size.Small">@eventDetail.EventStage</MudChip>
                            </MudStack>
                        </MudStack>
                    </MudTd>
                    <MudTd Datalabel="Opposing Teams">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudVirtualize Items="@eventDetail.EventVersusList" Context="team">
                                    <MudTooltip Duration="0" Arrow="true">
                                        <ChildContent>
                                            <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small" Class="pa-0 pl-2">
                                                @team.Abbreviation [ @team.Score ]
                                                <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Settings" Size="Size.Small" OnClick="() => OpenEditEventTeamsDialog(eventDetail.ID, eventDetail.SubCategoryID, team.ID, eventDetail.EventStage)" />
                                            </MudChip>
                                        </ChildContent>
                                        <TooltipContent>
                                            <MudVirtualize Items="@team.EventVersusTeamPlayersList" Context="players">
                                                <MudStack Spacing="0">
                                                    <MudText Typo="Typo.caption">@players.FirstName @players.LastName</MudText>
                                                    <MudText style="font-size: 10px">@players.School</MudText>
                                                    @if (players != team.EventVersusTeamPlayersList?.Last())
                                                    {
                                                        <MudDivider />
                                                    }
                                                </MudStack>
                                            </MudVirtualize>
                                        </TooltipContent>
                                    </MudTooltip>
                                </MudVirtualize>
                            </MudItem>
                            <MudItem xs="12">
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" FullWidth Style="text-transform: none" OnClick="() => OpenAddEventTeamsDialog(eventDetail.ID, eventDetail.SubCategoryID)">Add Team Players</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudTd>
                    <MudTd Datalabel="Venue">
                        <MudLink Underline="Underline.Hover" Href="@($"https://www.google.com/maps/?q={eventDetail.Latitude},{eventDetail.Longitude}")" Target="_blank">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.body2">
                                        @eventDetail.Venue
                                    </MudText>
                                    <MudText Typo="Typo.caption">
                                        Lat: @eventDetail.Latitude
                                    </MudText>
                                    <MudText Typo="Typo.caption">
                                        Long: @eventDetail.Longitude
                                    </MudText>
                                </MudStack>
                                <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" />
                            </MudStack>
                        </MudLink>
                    </MudTd>
                    <MudTd Datalabel="Schedule">
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.caption">@(eventDetail.Date?.ToString("dddd - MMMM d") ?? "No Date")</MudText>
                            <MudText Typo="Typo.caption">@(eventDetail.Time.HasValue? DateTime.Today.Add(eventDetail.Time.Value).ToString("hh:mm tt") : "No Time")</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd Datalabel="Stream Service">
                        @if (eventDetail.OnStream == true)
                        {
                            <MudLink Underline="Underline.Hover" Href="@($"{@eventDetail.StreamURL}")" Target="_blank">
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.body2">
                                        @eventDetail.StreamService
                                    </MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" />
                                </MudStack>
                            </MudLink>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">No Stream Service Available</MudText>
                        }
                    </MudTd>
                    <MudTd Datalabel="Tally Clerk">
                        @eventDetail.FirstName @eventDetail.LastName
                    </MudTd>
                    <MudTd Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditEventDialog(eventDetail.ID)" />
                    </MudTd>
                </RowTemplate>

                <!-- if no record showing dispay this text -->
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No records found.</MudText>
                </NoRecordsContent>

                <!-- table pagination: max of 5 rows dispalyed at a time -->
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {

        <!-- if there are error/s display loading (mudprogress, indeterminate) -->
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Variables

    // mud dialog instance: required for dialogs to work
    private IMudDialogInstance? MudDialog { get; set; }

    // populated by API

    // list of events
    private List<EventsDTO.EventDetails.Event>? _eventDetails;


    private string _searchString = "";

    // when error occurs while loading data by requests to palaro API
    private bool _errorLoading;


    // filtering function from the table
    private bool FilterFunc(EventsDTO.EventDetails.Event events)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        // Split search terms by comma and trim spaces
        var searchTerms = _searchString.Split(',')
                                       .Select(term => term.Trim().ToLower())
                                       .Where(term => !string.IsNullOrEmpty(term))
                                       .ToList();

        bool matchesAnyTerm = false;

        foreach (var term in searchTerms)
        {
            // checks if the event is finished in event details: search from boolean value to string
            if ("finished".StartsWith(term) && events.IsFinished == true)
            {
                matchesAnyTerm = true;
                continue;
            }

            // checks if the event is ongoing in event details: search from boolean value to string
            if ("ongoing".StartsWith(term) && events.IsFinished == false)
            {
                matchesAnyTerm = true;
                continue;
            }

            // checks from event details
            bool eventDetails = (events.Category?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Sport?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Subcategory?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Gender?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Level?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.StreamService?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Venue?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.FirstName?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.LastName?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false);

            // checks from opposing teams in event details
            bool opposingTeamsMatch = (events.EventVersusList?.Any(team =>
                (team?.Region?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (team?.Abbreviation?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false)) ?? false);

            if (eventDetails || opposingTeamsMatch)
            {
                matchesAnyTerm = true;
            }
        }

        return matchesAnyTerm;
    }

    // data transfer object (DTO) for events
    public class EventsDTO
    {
        public class EventDetails
        {

            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public string? Rank { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetEventsAsync();
    }


    // API Call for Events
    private async Task GetEventsAsync()
    {
        string url = "/Events/Details";
        _eventDetails = await apiService.GetAsync<EventsDTO.EventDetails.Event>(url);
    }


    // opening dialog method: add event dialog
    private async Task OpenAddEventDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddEventDialog>("Add Event", options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetEventsAsync();
        }
    }


    // opening dialog method: edit event dialog
    private async Task OpenEditEventDialog(string? selectedEventID)
    {
        var parameter = new DialogParameters<EditEventDialog>
        {
            {x => x.SelectedEventID, selectedEventID},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditEventDialog>("Edit Event", parameter, options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetEventsAsync();
        }
    }


    // opening dialog method: add event teams dialog
    private async Task OpenAddEventTeamsDialog(string? selectedEventID, int? selectedSubSportID)
    {
        var parameter = new DialogParameters<AddEventTeamsDialog>
        {
            {x => x.SelectedEventID, selectedEventID},
            {x => x.SelectedSubCategoryID, selectedSubSportID},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, BackdropClick = false };

        var dialog = await DialogService.ShowAsync<AddEventTeamsDialog>("Add Team for the Event", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventsAsync();
        }
    }


    // opening dialog method: edit event teams dialog
    private async Task OpenEditEventTeamsDialog(string? selectedEventID, int? selectedSubSportID, int? selectedEventTeamsID, string? selectedEventStage)
    {
        var parameter = new DialogParameters<EditEventTeamsDialog>
        {
            {x => x.SelectedEventID, selectedEventID},
            {x => x.SelectedSubCategoryID, selectedSubSportID},
            {x => x.SelectedEventVersusTeamsID, selectedEventTeamsID},
            {x => x.SelectedEventStage, selectedEventStage}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditEventTeamsDialog>("Edit Team for the Event", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventsAsync();
        }
    }
}
