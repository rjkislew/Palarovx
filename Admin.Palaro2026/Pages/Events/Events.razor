@page "/events"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient


<MudGrid Spacing="0">
    @if (_errorLoading == false)
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddEventDialog">Add Event</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetEventsAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_eventDetails" Striped Context="eventDetail" Filter="FilterFunc" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Events</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 20%" />
                        <col style="width: 20%" />
                        <col style="width: 15%" />
                        <col style="width: 15%" />
                        <col style="width: 15%" />
                        <col style="width: 10%" />
                        <col style="width: 5%" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>Event</MudTh>
                    <MudTh>Opposing Teams</MudTh>
                    <MudTh>Venue</MudTh>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<EventsDTO.EventDetails.Event, object?>(x=>x.Date)">
                            Schedule
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Stream Service</MudTh>
                    <MudTh>Tally Clerk</MudTh>
                    <MudTh>Settings</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Datalabel="Event">
                        <MudStack Spacing="0">
                            <MudStack Row Class="mb-2" Spacing="1">
                                <MudText Typo="Typo.caption">[@eventDetail.EventStage] - </MudText>
                                @if (@eventDetail.IsFinished == true)
                                {
                                    <MudText Typo="Typo.caption">Finished</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption">Ongoing</MudText>
                                }
                            </MudStack>
                            <MudText>@eventDetail.Category</MudText>
                            <MudStack Row Spacing="1">
                                <MudText Typo="Typo.caption">

                                    @eventDetail.Sport
                                    <MudElement>
                                        <MudText Typo="Typo.caption">[@eventDetail.Subcategory]</MudText>
                                    </MudElement>
                                </MudText>
                            </MudStack>
                            <MudText Typo="Typo.caption">@eventDetail.Level</MudText>
                            <MudText Typo="Typo.caption">@eventDetail.Gender</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd Datalabel="Opposing Teams">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudVirtualize Items="@eventDetail.EventVersusList" Context="team">
                                    <MudTooltip>
                                        <ChildContent>
                                            <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small" Class="pa-0 pl-2">
                                                @team.Abbreviation [ @team.Score ]
                                                <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Settings" Size="Size.Small" OnClick="() => OpenEditEventTeamsDialog(eventDetail.ID, eventDetail.SubCategoryID, team.ID)" />
                                            </MudChip>
                                        </ChildContent>
                                        <TooltipContent>
                                            <MudVirtualize Items="@team.EventVersusTeamPlayersList" Context="players">
                                                <MudStack Spacing="0">
                                                    <MudText Typo="Typo.caption">@players.FirstName @players.LastName</MudText>
                                                    <MudText Typo="Typo.caption">@players.School</MudText>
                                                    @if (players != team.EventVersusTeamPlayersList?.Last())
                                                    {
                                                        <MudDivider Class="py-1" />
                                                    }
                                                </MudStack>
                                            </MudVirtualize>
                                        </TooltipContent>
                                    </MudTooltip>
                                </MudVirtualize>
                            </MudItem>
                            <MudItem xs="12">
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" FullWidth Style="text-transform: none" OnClick="() => OpenAddEventTeamsDialog(eventDetail.ID, eventDetail.SubCategoryID)">Add Team Players</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudTd>
                    <MudTd Datalabel="Venue">
                        <MudLink Underline="Underline.Hover" Href="@($"https://www.google.com/maps/?q={eventDetail.Latitude},{eventDetail.Longitude}")" Target="_blank">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.body2">
                                        @eventDetail.Venue
                                    </MudText>
                                    <MudText Typo="Typo.caption">
                                        Lat: @eventDetail.Latitude
                                    </MudText>
                                    <MudText Typo="Typo.caption">
                                        Long: @eventDetail.Longitude
                                    </MudText>
                                </MudStack>
                                <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" />
                            </MudStack>
                        </MudLink>
                    </MudTd>
                    <MudTd Datalabel="Schedule">
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.caption">@(eventDetail.Date?.ToString("dddd - MMMM d") ?? "No Date")</MudText>
                            <MudText Typo="Typo.caption">@(eventDetail.Time.HasValue ? DateTime.Today.Add(eventDetail.Time.Value).ToString("hh:mm tt") : "No Time")</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd Datalabel="Stream Service">
                        @if (eventDetail.OnStream == true)
                        {
                            <MudLink Underline="Underline.Hover" Href="@($"{@eventDetail.StreamURL}")" Target="_blank">
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.body2">
                                        @eventDetail.StreamService
                                    </MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" />
                                </MudStack>
                            </MudLink>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">No Stream Service Available</MudText>
                        }
                    </MudTd>
                    <MudTd Datalabel="Tally Clerk">
                        @eventDetail.FirstName @eventDetail.LastName
                    </MudTd>
                    <MudTd DataLabel="Settings" Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditEventDialog(eventDetail.ID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    private IMudDialogInstance? MudDialog { get; set; }

    private List<EventsDTO.EventDetails.Event>? _eventDetails;

    private string _searchString = "";
    private bool _errorLoading;

    private bool FilterFunc(EventsDTO.EventDetails.Event events)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        // Split search terms by comma and trim spaces
        var searchTerms = _searchString.Split(',')
                                       .Select(term => term.Trim().ToLower())
                                       .Where(term => !string.IsNullOrEmpty(term))
                                       .ToList();

        bool matchesAnyTerm = false;

        foreach (var term in searchTerms)
        {
            if ("finished".StartsWith(term) && events.IsFinished == true)
            {
                matchesAnyTerm = true;
                continue;
            }

            if ("ongoing".StartsWith(term) && events.IsFinished == false)
            {
                matchesAnyTerm = true;
                continue;
            }

            bool eventDetails = (events.Category?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.EventStage?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Sport?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Subcategory?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Gender?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Level?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.StreamService?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.Venue?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.FirstName?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (events.LastName?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false);

            bool opposingTeamsMatch = (events.EventVersusList?.Any(team =>
                (team?.Region?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (team?.Abbreviation?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false)) ?? false);

            if (eventDetails || opposingTeamsMatch)
            {
                matchesAnyTerm = true;
            }
        }

        return matchesAnyTerm;
    }

    // DTOs
    public class EventsDTO
    {
        public class EventDetails
        {

            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public string? Rank { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEventsAsync();
    }

    private async Task GetEventsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Details";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventDetails = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventDetails.Event>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            _errorLoading = true;
        }
    }

    // Dialog

    private async Task OpenAddEventDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddEventDialog>("Add Event", options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetEventsAsync();
        }
    }

    private async Task OpenEditEventDialog(string? selectedEventID)
    {
        var parameter = new DialogParameters<EditEventDialog>
        {
            {x => x.SelectedEventID, selectedEventID},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditEventDialog>("Edit Event", parameter, options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetEventsAsync();
        }
    }

    private async Task OpenAddEventTeamsDialog(string? selectedEventID, int? selectedSubSportID)
    {
        var parameter = new DialogParameters<AddEventTeamsDialog>
        {
            {x => x.SelectedEventID, selectedEventID},
            {x => x.SelectedSubCategoryID, selectedSubSportID},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddEventTeamsDialog>("Add Team for the Event", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventsAsync();
        }
    }

    private async Task OpenEditEventTeamsDialog(string? selectedEventID, int? selectedSubSportID, int? selectedEventTeamsID)
    {
        var parameter = new DialogParameters<EditEventTeamsDialog>
        {
            {x => x.SelectedEventID, selectedEventID},
            {x => x.SelectedSubCategoryID, selectedSubSportID},
            {x => x.SelectedEventVersusTeamsID, selectedEventTeamsID},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditEventTeamsDialog>("Edit Team for the Event", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventsAsync();
        }
    }
}
