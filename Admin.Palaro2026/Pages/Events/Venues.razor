@page "/events/venues"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    @if (_eventVenues != null && _eventVenues.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddVenueDialog">Add Venue</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetEventVenuesAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_eventVenues" FixedHeader FixedFooter Height="calc(87vh - 150px)" Virtualize="true" Filter="FilterFunc" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Event Venues</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 35%" />
                        <col style="width: 35%" />
                        <col style="width: 35%;" />
                        <col style="width: 5%;" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<EventsDTO.EventVenues, object?>(x=>x.Venue)">
                            Venue
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EventsDTO.EventVenues, object?>(x=>x.Address)">
                            Address
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Coordinates</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context="venue">
                    <MudTd DataLabel="Venue">
                        <MudText Typo="Typo.body2">@venue.Venue</MudText>
                    </MudTd>
                    <MudTd DataLabel="Address">
                        <MudText Typo="Typo.body2">@venue.Address</MudText>
                    </MudTd>
                    <MudTd DataLabel="Coordinates">
                        <MudLink Underline="Underline.Hover" Href="@($"https://www.google.com/maps/?q={venue.Latitude},{venue.Longitude}")" Target="_blank">
                            <MudText Typo="Typo.body2">
                                Lat: @venue.Latitude <br />
                                Long: @venue.Longitude
                            </MudText>
                        </MudLink>
                    </MudTd>
                    <MudTd Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditVenueDialog(venue.ID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // JSON storage
    private List<EventsDTO.EventVenues>? _eventVenues;


    // DTOs
    public class EventsDTO
    {
        public class EventVenues
        {
            public int ID { get; set; }
            public string? Address { get; set; }
            public string? Venue { get; set; }
            public decimal? Latitude { get; set; }
            public decimal? Longitude { get; set; }
        }
    }


    // Methods
    private string _searchString = "";

    private bool FilterFunc(EventsDTO.EventVenues venue)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return venue.Address!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               venue.Venue!.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }


    // Dialogs
    private async Task OpenEditVenueDialog(int selectedID)
    {
        var parameter = new DialogParameters<EditVenueDialog>
        {
            {x => x.selectedVenueID, selectedID}
        };
        var options = new DialogOptions {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditVenueDialog>("Edit Venue Settings", parameter, options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetEventVenuesAsync();
        }
    }

    private async Task OpenAddVenueDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddVenueDialog>("Add Venue Settings", options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetEventVenuesAsync();
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetEventVenuesAsync();
    }

    private async Task GetEventVenuesAsync()
    {
        string url = "/Events/Venues";
        _eventVenues = await apiService.GetAsync<EventsDTO.EventVenues>(url);
    }
}
