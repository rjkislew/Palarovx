@page "/events/venues"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h4">Event Venues</MudText>
        <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    </MudItem>
    @if (_eventVenues != null && _eventVenues.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0">
                <MudButton Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddVenueDialog">Add Venue</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetEventVenuesAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_eventVenues" Striped Virtualize="true" Filter="FilterFunc" Elevation="0" Hover>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">List of Event Venues</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 35%" />
                        <col style="width: 35%" />
                        <col style="width: 35%;" />
                        <col style="width: 5%;" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<EventsDTO.EventVenues, object?>(x=>x.Venue)">
                            Venue
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EventsDTO.EventVenues, object?>(x=>x.Address)">
                            Address
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Coordinates</MudTh>
                    <MudTh>Settings</MudTh>
                </HeaderContent>
                <RowTemplate Context="venue">
                    <MudTd DataLabel="Venue">@venue.Venue</MudTd>
                    <MudTd DataLabel="Address">@venue.Address</MudTd>
                    <MudTd DataLabel="Coordinates">
                        <MudLink Underline="Underline.Hover" Href="@($"https://www.google.com/maps/?q={venue.Latitude},{venue.Longitude}")" Target="_blank">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.body2">
                                        Lat: @venue.Latitude
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        Long: @venue.Longitude
                                    </MudText>
                                </MudStack>
                                <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" />
                            </MudStack>
                        </MudLink>
                    </MudTd>
                    <MudTd DataLabel="Settings" Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditVenueDialog(venue.ID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }
    private List<EventsDTO.EventVenues>? _eventVenues;

    private string? _addressValue;
    private string? _venueValue;
    private decimal? _latitudeValue;
    private decimal? _longitudeValue;
    private bool _addStreamDisabled =>
    string.IsNullOrEmpty(_addressValue) ||
    string.IsNullOrEmpty(_venueValue) ||
    !_latitudeValue.HasValue ||
    !_longitudeValue.HasValue;

    private string _searchString = "";

    bool _expandedAddEventVenue = false;

    private void OnExpandAddEventVenueButtonClick()
    {
        _expandedAddEventVenue = !_expandedAddEventVenue;
    }

    private void ClearFields()
    {
        _addressValue = null;
        _venueValue = null;
        _latitudeValue = null;
        _longitudeValue = null;
    }

    private bool FilterFunc(EventsDTO.EventVenues venue)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return venue.Address!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               venue.Venue!.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "./"),
    new("Events", href: "./events"),
    new("Venues", href: null, disabled: true)
    ];

    public class EventsDTO
    {
        public class EventVenues
        {
            public int ID { get; set; }
            public string? Address { get; set; }
            public string? Venue { get; set; }
            public decimal? Latitude { get; set; }
            public decimal? Longitude { get; set; }
        }
    }

    private async Task ConfirmPostEventVenuesAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm addition of {_venueValue ?? "this venue"}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await PostEventVenueAsync();
            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    private async Task OpenEditVenueDialog(int selectedID)
    {
        var parameter = new DialogParameters<EditVenueDialog>
        {
            {x => x.selectedVenueID, selectedID}
        };
        var options = new DialogOptions { NoHeader = true, CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditVenueDialog>("Edit Venue Settings", parameter, options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetEventVenuesAsync();
        }
    }

    private async Task OpenAddVenueDialog()
    {
        var options = new DialogOptions {CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddVenueDialog>("Add Venue Settings", options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetEventVenuesAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEventVenuesAsync();
    }

    private async Task GetEventVenuesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Venues";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventVenues = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventVenues>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task PostEventVenueAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_venueValue) || !_latitudeValue.HasValue || !_longitudeValue.HasValue)
            {
                Console.WriteLine("Stream service and URL cannot be empty.");
                return;
            }

            string url = $"{apiService.Palaro2026API}/Events/Venues";

            var eventStream = new EventsDTO.EventVenues
                {
                    Address = _addressValue,
                    Venue = _venueValue,
                    Latitude = _latitudeValue,
                    Longitude = _longitudeValue
                };

            var jsonContent = JsonSerializer.Serialize(eventStream);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            HttpResponseMessage httpResponse = await httpClient.PostAsync(url, content);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            ClearFields();

            await GetEventVenuesAsync();
            Snackbar.Add("Event venue added successfully.", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error posting data: {ex.Message}");
        }
    }
}
