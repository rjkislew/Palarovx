@page "/events/streams"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h4">Stream Services</MudText>
        <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    </MudItem>
    @if (_eventStreamServicesDetails != null && _eventStreamServicesDetails.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0">
                <MudButton Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddStreamServiceDialog">Add Stream Service</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetEventStreamServicesAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_eventStreamServicesDetails" Striped Context="streamService" Filter="FilterFunc" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">List of Stream Services</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 35%" />
                        <col style="width: 60%" />
                        <col style="width: 5%;" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>Stream Service</MudTh>
                    <MudTh>Stream</MudTh>
                    <MudTh>Settings</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Datalabel="Stream Service">@streamService.StreamService</MudTd>
                    <MudTd Datalabel="Stream">
                        <MudGrid>
                            <MudVirtualize Items="@streamService.EventStreamsList" Context="stream">
                                <MudItem xs="12" md="6">
                                    <MudPaper Outlined Class="pa-3" Style="background-color: transparent">
                                        <MudStack Spacing="0">
                                            <MudStack Row Justify="Justify.SpaceBetween">
                                                <MudStack Row Spacing="2" AlignItems="AlignItems.End">
                                                    <MudText>@stream.StreamTitle</MudText>
                                                    <MudText Typo="Typo.caption">[@(stream.StreamDate?.ToString("MMMM d - dddd") ?? "No Date")]</MudText>
                                                </MudStack>
                                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small"/>
                                            </MudStack>
                                            <MudLink Underline="Underline.Hover" Href="@($"{@stream.StreamURL}")">
                                                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Link" Size="Size.Small"/>
                                                    <MudText Typo="Typo.caption">@stream.StreamURL</MudText>
                                                </MudStack>
                                            </MudLink>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            </MudVirtualize>

                            <MudItem xs="12">
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Style="text-transform: none" >Add stream</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudTd>
                    <MudTd DataLabel="Settings" Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditStreamServiceDialog(streamService.ID)"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }
    private List<EventsDTO.EventStreamServicesDetails.EventStreamServices>? _eventStreamServicesDetails;

    private string _searchString = "";

    private bool FilterFunc(EventsDTO.EventStreamServicesDetails.EventStreamServices streams)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return streams.StreamService!.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "./"),
        new("Events", href: "./events"),
        new("Streams", href: null, disabled: true)
    ];

    public class EventsDTO
    {
        public class EventStreamServicesDetails
        {
            public class EventStreamServices
            {
                public int ID { get; set; }
                public string? StreamService { get; set; }
                public List<EventStreams>? EventStreamsList { get; set; }
            }

            public class EventStreams
            {
                public int StreamID { get; set; }
                public string? StreamTitle { get; set; }
                public string? StreamURL { get; set; }
                public DateTime? StreamDate { get; set; }

            }
        }
    }

    private async Task OpenEditStreamServiceDialog(int selectedID)
    {
        var parameter = new DialogParameters<EditStreamServiceDialog>
        {
            {x => x.SelectedStreamID, selectedID}
        };
        var options = new DialogOptions { NoHeader = true, CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditStreamServiceDialog>("Edit Stream Service", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventStreamServicesAsync();
        }
    }

    private async Task OpenAddStreamServiceDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddStreamServiceDialog>("Add Stream Service", options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventStreamServicesAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEventStreamServicesAsync();
    }

    private async Task GetEventStreamServicesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/StreamServices/Details";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventStreamServicesDetails = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventStreamServicesDetails.EventStreamServices>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
