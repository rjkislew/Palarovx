@page "/events/streams"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<PageTitle>Streams Management | PALARO 2026</PageTitle>

<MudGrid Spacing="0">
    @if (_eventStreamServicesDetails != null && _eventStreamServicesDetails.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddStreamServiceDialog">Add Stream Service</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetEventStreamServicesAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_eventStreamServicesDetails" Context="streamService" FixedHeader FixedFooter Height="calc(87vh - 150px)" Virtualize="true" Filter="FilterFunc" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Stream Services</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 30%" />
                        <col style="width: 65%" />
                        <col style="width: 5%;" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>Stream Service</MudTh>
                    <MudTh>Stream</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Datalabel="Stream Service">
                        <MudText Typo="Typo.body2">@streamService.StreamService</MudText>
                        <MudText Typo="Typo.caption">Streams Available: @streamService.EventStreamsList?.Count()</MudText>
                    </MudTd>
                    <MudTd Datalabel="Stream">
                        <MudGrid>
                            <MudVirtualize Items="@streamService.EventStreamsList" Context="stream">
                                <MudItem xs="12" sm="6" lg="4">
                                    <MudPaper Outlined>
                                        <MudStack Class="relative">
                                            <MudStack Row Style="width: 100%; background: linear-gradient(0deg,rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%); " Class="absolute" Justify="Justify.FlexEnd">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Style="color: white"
                                                               OnClick="() => OpenEditStreamDialog(stream.StreamID, streamService.ID)" />
                                            </MudStack>
                                            <MudImage Src="@GetThumbnailUrl(stream.StreamURL)"
                                                      Style="width: 100%; height: 150px"
                                                      Class="rounded-t"
                                                      ObjectFit="ObjectFit.Cover" />
                                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="px-3 pb-1 mt-n2">
                                                <MudStack Spacing="0" Style="flex: 1; min-width: 0;">
                                                    <MudTooltip Duration="0" Arrow="true" Placement="Placement.Top">
                                                        <ChildContent>
                                                            <MudLink Underline="Underline.None" Href="@stream.StreamURL" Target="_blank" Style="display: block;">
                                                                <MudText Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                                    @stream.StreamTitle
                                                                </MudText>
                                                            </MudLink>
                                                        </ChildContent>
                                                        <TooltipContent>
                                                            <MudStack Spacing="0" AlignItems="AlignItems.Start">
                                                                <MudText Typo="Typo.caption">@stream.StreamTitle</MudText>
                                                                <MudText Style="font-size: 10px">@stream.StreamURL</MudText>
                                                            </MudStack>
                                                        </TooltipContent>
                                                    </MudTooltip>
                                                    <MudText Typo="Typo.caption">
                                                        @(stream.StreamDate?.ToString("MMMM d - hh:mm tt") ?? "No Date")
                                                    </MudText>
                                                </MudStack>
                                            </MudStack>
                                        </MudStack>
                                    </MudPaper>

                                </MudItem>
                            </MudVirtualize>

                            <MudItem xs="12">
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Style="text-transform: none" OnClick="() => OpenAddStreamDialog(streamService.ID)">Add stream</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudTd>
                    <MudTd Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditStreamServiceDialog(streamService.ID)"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // JSON storage
    private List<EventsDTO.EventStreamServicesDetails.EventStreamServices>? _eventStreamServicesDetails;


    // Methods
    private string _searchString = "";

    private bool FilterFunc(EventsDTO.EventStreamServicesDetails.EventStreamServices streams)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        bool matchesStreamService = streams.StreamService?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false;

        bool matchesEventStream = streams.EventStreamsList?.Any(es => es.StreamTitle?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ?? false;

        return matchesStreamService || matchesEventStream;
    }

    private string GetThumbnailUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return string.Empty;

        if (url.Contains("youtube.com/watch?v="))
        {
            var videoId = url.Split("v=")[1].Split('&')[0];
            return $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg";
        }

        return "media/images/no-thumbnail-default.webp";
    }

    // DTOs
    public class EventsDTO
    {
        public class EventStreamServicesDetails
        {
            public class EventStreamServices
            {
                public int ID { get; set; }
                public string? StreamService { get; set; }
                public List<EventStreams>? EventStreamsList { get; set; }
            }

            public class EventStreams
            {
                public int StreamID { get; set; }
                public string? StreamTitle { get; set; }
                public string? StreamURL { get; set; }
                public DateTime? StreamDate { get; set; }

            }
        }
    }


    // Dialogs

    private async Task OpenEditStreamServiceDialog(int selectedID)
    {
        var parameter = new DialogParameters<EditStreamServiceDialog>
        {
            {x => x.SelectedStreamID, selectedID}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true, BackdropClick = false };

        var dialog = await DialogService.ShowAsync<EditStreamServiceDialog>("Edit Stream Service", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventStreamServicesAsync();
        }
    }

    private async Task OpenAddStreamServiceDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true, BackdropClick = false };

        var dialog = await DialogService.ShowAsync<AddStreamServiceDialog>("Add Stream Service", options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventStreamServicesAsync();
        }
    }

    private async Task OpenAddStreamDialog(int selectedID)
    {
        var parameter = new DialogParameters<AddStreamDialog>
        {
            {x => x.SelectedStreamID, selectedID}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true, BackdropClick = false };

        var dialog = await DialogService.ShowAsync<AddStreamDialog>("Add Stream", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventStreamServicesAsync();
        }
    }

    private async Task OpenEditStreamDialog(int selectedID, int selectedStreamServiceID)
    {
        var parameter = new DialogParameters<EditStreamDialog>
        {
            {x => x.SelectedStreamID, selectedID},
            {x => x.SelectedStreamServiceID, selectedStreamServiceID}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true, BackdropClick = false };

        var dialog = await DialogService.ShowAsync<EditStreamDialog>("Edit Stream", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetEventStreamServicesAsync();
        }
    }


    // Initialization

    protected override async Task OnInitializedAsync()
    {
        await GetEventStreamServicesAsync();
    }

    private async Task GetEventStreamServicesAsync()
    {
        string url = "/Events/StreamServices/Details";
        _eventStreamServicesDetails = await apiService.GetAsync<EventsDTO.EventStreamServicesDetails.EventStreamServices>(url);
    }
}
