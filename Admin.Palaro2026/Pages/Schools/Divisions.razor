@page "/divisions"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    @if (_schoolDetails != null && _schoolDetails.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddSchoolDialog">Add School</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetSchoolDetailsAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_schoolDetails" Context="school" Virtualize="true" Filter="FilterFunc" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Schools</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 30%" />
                        <col style="width: 20%" />
                        <col style="width: 20%;" />
                        <col style="width: 25%;" />
                        <col style="width: 5%;" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SchoolDTO.SchoolDetails.Schools, object?>(x=>x.School)">
                            School
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SchoolDTO.SchoolDetails.Schools, object?>(x=>x.Level)">
                            School Level
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SchoolDTO.SchoolDetails.Schools, object?>(x=>x.Division)">
                            Division
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SchoolDTO.SchoolDetails.Schools, object?>(x=>x.Region)">
                            Region
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="School">@school.School</MudTd>
                    <MudTd DataLabel="School Level">@school.Level</MudTd>
                    <MudTd DataLabel="Division">@school.Division</MudTd>
                    <MudTd DataLabel="Region">@school.Region (@school.Abbreviation)</MudTd>
                    <MudTd Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditSchoolDialog(school.ID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // JSON storage
    private List<SchoolDTO.SchoolDetails.Schools>? _schoolDetails;


    // DTOs
    public class SchoolDTO
    {
        public class SchoolDetails
        {
            public class Schools
            {
                public int ID { get; set; }
                public string? School { get; set; }
                public string? Level { get; set; }
                public string? Division { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
            }
        }
    }


    // Methods
    private string _searchString = "";

    private bool FilterFunc(SchoolDTO.SchoolDetails.Schools schoolDetails)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return schoolDetails.School!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               schoolDetails.Division!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               schoolDetails.Region!.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }


    // Dialogs
    private async Task OpenEditSchoolDialog(int selectedID)
    {
        var parameter = new DialogParameters<EditSchoolDialog>
        {
            {x => x.selectedSchoolID, selectedID}
        };
        var options = new DialogOptions {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditSchoolDialog>("Edit School", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetSchoolDetailsAsync();
        }
    }    

    private async Task OpenAddSchoolDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddSchoolDialog>("Add School", options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetSchoolDetailsAsync();
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetSchoolDetailsAsync();
    }

    private async Task GetSchoolDetailsAsync()
    {
        string url = "/Schools/Details";

        _schoolDetails = await apiService.GetAsync<SchoolDTO.SchoolDetails.Schools>(url);
    }
}
