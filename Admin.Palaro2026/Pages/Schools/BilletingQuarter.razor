@page "/schools/billeting-quarters"


@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid Spacing="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h4">Billeting Quarters</MudText>
        <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    </MudItem>
    @if (_schoolBilletingQuarterDetails != null && _schoolBilletingQuarterDetails.Any())
    {
        <MudItem xs="12">
            <MudStack Row Spacing="0" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddBilletingQuarterDialog">Add Billeting Quarter</MudButton>
                <MudDivider Vertical="true" FlexItem="true" />
                <MudButton Size="Size.Large" Style="text-transform: none" StartIcon="@Icons.Material.Filled.Refresh" OnClick="GetSchoolBilletingQuarterAsync">Refresh Table</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudTable Outlined Items="_schoolBilletingQuarterDetails" Context="billetingQuarter" Striped Virtualize="true" Filter="FilterFunc" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">List of Billeting Quarters</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Immediate Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" />
                </ToolBarContent>
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 25%" />
                        <col style="width: 25%" />
                        <col style="width: 20%;" />
                        <col style="width: 15%;" />
                        <col style="width: 20%;" />
                        <col style="width: 5%;" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SchoolDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters, object?>(x=>x.Region)">
                            Region
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SchoolDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters, object?>(x=>x.BilletingQuarter)">
                            Billeting Quarter
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SchoolDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters, object?>(x=>x.Address)">
                            Address
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Coordinates</MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SchoolDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters, object?>(x=>x.ContactPerson)">
                            Contact Person
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Settings</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Region">@billetingQuarter.Region (@billetingQuarter.Abbreviation)</MudTd>
                    <MudTd DataLabel="Billeting Quarter">@billetingQuarter.BilletingQuarter</MudTd>
                    <MudTd DataLabel="Address Level">@billetingQuarter.Address</MudTd>
                    <MudTd DataLabel="Coordinates">
                        <MudLink Style="text-transform: none" Underline="Underline.Hover" Href="@($"https://www.google.com/maps/?q={billetingQuarter.Latitude},{billetingQuarter.Longitude}")" Target="_blank">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.body2">
                                        Lat: @billetingQuarter.Latitude
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        Long: @billetingQuarter.Longitude
                                    </MudText>
                                </MudStack>
                                <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" />
                            </MudStack>
                        </MudLink>
                    </MudTd>
                    <MudTd DataLabel="Contact Person">@billetingQuarter.ContactPerson <br />@billetingQuarter.ContactPersonNumber</MudTd>
                    <MudTd DataLabel="Settings" Style="text-align: center">
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Class="pa-1" OnClick="() => OpenEditBilletingQuarterDialog(billetingQuarter.ID)" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.caption">No matching records found.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" />
        </MudItem>
    }
</MudGrid>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }
    private List<SchoolDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters>? _schoolBilletingQuarterDetails;

    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "./"),
        new("Schools", href: "./schools"),
        new("Billeting Quarters", href: null, disabled: true)
    ];

    private string _searchString = "";

    private bool FilterFunc(SchoolDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters schoolBilletingQuarters)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return
               schoolBilletingQuarters.Region!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               schoolBilletingQuarters.BilletingQuarter!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               schoolBilletingQuarters.Address!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               schoolBilletingQuarters.Abbreviation!.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               schoolBilletingQuarters.ContactPerson!.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenAddBilletingQuarterDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<AddBilletingQuarterDialog>("Add Billeting Quarter", options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await GetSchoolBilletingQuarterAsync();
        }
    }

    private async Task OpenEditBilletingQuarterDialog(int selectedID)
    {
        var parameter = new DialogParameters<EditBilletingQuarterDialog>
        {
            {x => x.selectedBilletingQuarterID, selectedID}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditBilletingQuarterDialog>("Edit Billeting Quarter", parameter, options);

        var result = await dialog.Result;

        // Check if the dialog was closed with a positive result (e.g., "OK")
        if (!result!.Canceled)
        {
            await GetSchoolBilletingQuarterAsync();
        }
    }

    public class SchoolDTO
    {
        public class SchoolBillingQuarterDetails
        {
            public class SchoolBilletingQuarters
            {
                public int ID { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public string? BilletingQuarter { get; set; }
                public string? Address { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public string? ContactPerson { get; set; }
                public string? ContactPersonNumber { get; set; }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSchoolBilletingQuarterAsync();
    }

    private async Task GetSchoolBilletingQuarterAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/BilletingQuarters/Details";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolBilletingQuarterDetails = await JsonSerializer.DeserializeAsync<List<SchoolDTO.SchoolBillingQuarterDetails.SchoolBilletingQuarters>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
