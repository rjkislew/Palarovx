@page "/"

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject APIService apiService
@inject HttpClient httpClient

<MudGrid>
    <MudItem xs="12">
        <MudButton OnClick="OnExpandFilterCollapseClick" StartIcon="@(_expandedFilter ? @Icons.Material.Filled.FilterAltOff : @Icons.Material.Filled.FilterAlt)">Filter</MudButton>
        <MudCollapse Expanded="_expandedFilter">
            <MudStack Row Wrap="Wrap.Wrap" Class="mt-3">
                <MudStack Style="width: 100%">
                    <MudStack Row Wrap="Wrap.Wrap">
                        @* Sport Categories *@
                        <MudSelect @bind-Value="_selectedSportCategory" Margin="Margin.Dense" Label="Sport Category" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetSportsAsync">
                            <MudVirtualize Items="_sportCategories" Context="sportCategory">
                                <MudSelectItem Value="new SelectedSportCategory { ID = sportCategory.ID, Category = sportCategory.Category }">@sportCategory.Category</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>

                        @* Sports *@
                        <MudSelect @bind-Value="_selectedSport" Margin="Margin.Dense" Label="Sport" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetEventsAsync">
                            <MudVirtualize Items="_sports" Context="sport">
                                <MudSelectItem Value="new SelectedSport { ID = sport.ID, Sport = sport.Sport }">@sport.Sport</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>

                        @* Gender Categories *@
                        <MudSelect @bind-Value="_selectedGenderCategories" Margin="Margin.Dense" Label="Gender" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetEventsAsync">
                            <MudVirtualize Items="_sportGenderCategories" Context="gender">
                                <MudSelectItem Value="new SelectedGenderCategories { ID = gender.ID, Gender = gender.Gender }">@gender.Gender</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>

                        @* School Levels *@
                        <MudSelect @bind-Value="_selectedSchoolLevels" Margin="Margin.Dense" Label="School Level" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetSportSubcategoriesAsync">
                            <MudVirtualize Items="_schoolLevels" Context="level">
                                <MudSelectItem Value="new SelectedSchoolLevels { ID = level.ID, Level = level.Level }">@level.Level</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>

                        @* Sport Subcategory *@
                        <MudSelect @bind-Value="_selectedSubcategories" Margin="Margin.Dense" Label="Sport Subcategory" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetEventsAsync">
                            <MudVirtualize Items="_sportSubcategories" Context="subCategories">
                                <MudSelectItem Value="new SelectedSubcategories { ID = subCategories.ID, Subcategory = subCategories.Subcategory }">@subCategories.Subcategory</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>
                    </MudStack>
                    <MudStack Row Wrap="Wrap.Wrap">
                        @* Venue *@
                        <MudSelect @bind-Value="_selectedEventVenue" Margin="Margin.Dense" Label="Venues" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetEventsAsync">
                            <MudVirtualize Items="_eventVenues" Context="venues">
                                <MudSelectItem Value="venues.Venue">@venues.Venue</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>

                        @* Date *@
                        <MudDateRangePicker DateRange="@_dateRange" DateRangeChanged="OnDateRangeChanged" Margin="Margin.Dense" Clearable Variant="Variant.Outlined" PlaceholderStart="Start Date" PlaceholderEnd="End Date" Label="Date" />

                        @* User *@
                        <MudSelect @bind-Value="_selectedUser" Margin="Margin.Dense" Label="Designated Person" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetEventsAsync">
                            <MudVirtualize Items="_userLists" Context="user">
                                <MudSelectItem Value="new SelectedUser { ID = user.ID, Name = user.Name }">@user.Name</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>

                        @* Region *@
                        <MudSelect @bind-Value="_selectedRegion" Margin="Margin.Dense" Label="Region" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetEventsAsync">
                            <MudVirtualize Items="_schoolRegions" Context="region">
                                <MudSelectItem Value="new SelectedRegion { ID = region.ID, Region = region.Region, Abbreviation = region.Abbreviation }">@region.Region (@region.Abbreviation)</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>
                    </MudStack>
                    <MudStack Row Wrap="Wrap.Wrap">
                        @* Stream *@
                        <MudCheckBox Value="_isOnStream" ValueChanged="@((bool? onStream) => OnStreamBoolChanged(onStream))" Color="@Color.Secondary" TriState="true">On Stream</MudCheckBox>

                        @* Status *@
                        <MudCheckBox Value="_isFinished" ValueChanged="@((bool? finished) => OnFinishedBoolChanged(finished))" Color="@Color.Secondary">Finished</MudCheckBox>
                    </MudStack>
                </MudStack>
            </MudStack>
            <MudDivider />
        </MudCollapse>
    </MudItem>
    @if (_eventDetails == null || !_eventDetails.Any())
    {
        for (int i = 0; i < 4; i++)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" />
            </MudItem>
        }
    }
    else
    {
        <MudVirtualize Items="_eventDetails" Context="eventDetail">
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudPaper Outlined Class="pa-3" Style="height: 100%">
                    <MudStack Style="height: 100%" Justify="Justify.SpaceBetween">
                        <MudStack>
                            @* Sport Details *@
                            <MudStack AlignItems="AlignItems.Start" Row Justify="Justify.SpaceBetween">
                                <MudStack Spacing="0">
                                    <MudStack Row>

                                        @* Category *@
                                        <MudText Typo="Typo.h6" HtmlTag="p">@eventDetail.Category</MudText>

                                        @* Gender *@
                                        <MudStack>
                                            @if (eventDetail.Gender == "Male")
                                            {
                                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Male" Color="Color.Info" Size="Size.Small" />
                                                    <MudText Typo="Typo.caption">Male</MudText>
                                                </MudStack>
                                            }
                                            else if (eventDetail.Gender == "Female")
                                            {
                                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Female" Color="Color.Error" Size="Size.Small" />
                                                    <MudText Typo="Typo.caption">Female</MudText>
                                                </MudStack>
                                            }
                                            else
                                            {
                                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                    <MudStack Row Spacing="0">
                                                        <MudIcon Icon="@Icons.Material.Filled.Male" Color="Color.Info" Size="Size.Small" />
                                                        <MudIcon Icon="@Icons.Material.Filled.Female" Color="Color.Error" Size="Size.Small" />
                                                        <MudText Typo="Typo.caption">Mixed</MudText>
                                                    </MudStack>
                                                </MudStack>
                                            }
                                        </MudStack>
                                    </MudStack>

                                    @* Subcategory *@
                                    <MudText Typo="Typo.caption">@eventDetail.Sport [@eventDetail.Subcategory]</MudText>

                                    @* Level *@
                                    <MudText Typo="Typo.caption">@eventDetail.Level</MudText>
                                </MudStack>

                                @* Event Settings *@
                                <MudIconButton Class="pa-1" Icon="@Icons.Material.Filled.Settings" />
                            </MudStack>

                            <MudDivider />

                            @* Address *@
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                <MudText Typo="Typo.caption">@eventDetail.Venue</MudText>
                            </MudStack>

                            @* Date Time *@
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                <MudText Typo="Typo.caption">@(eventDetail.Date?.ToString("dddd - MMMM d") ?? "No Date") [@(eventDetail.Time.HasValue ? DateTime.Today.Add(eventDetail.Time.Value).ToString("hh:mm tt") : "No Time")]</MudText>
                            </MudStack>

                            @* Stream *@
                            <MudStack>
                                @if (eventDetail.OnStream != true)
                                {
                                    <MudStack Row AlignItems="AlignItems.Center">
                                        <MudIcon Icon="@Icons.Material.Filled.Podcasts" Size="Size.Small" />
                                        <MudText Typo="Typo.caption">No stream available.</MudText>
                                        <MudIconButton Class="pa-o" Icon="@Icons.Material.Filled.Error" Size="Size.Small" Disabled="true"/>
                                    </MudStack>
                                }
                                else
                                {
                                    <MudStack Row AlignItems="AlignItems.Center">
                                        <MudIcon Icon="@Icons.Material.Filled.Podcasts" Size="Size.Small" />
                                        <MudText Typo="Typo.caption">@eventDetail.StreamService</MudText>
                                        <MudIconButton Class="pa-o" Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" Href="@($"{@eventDetail.StreamURL}")" Target="_blank" />
                                    </MudStack>
                                }
                            </MudStack>

                            <MudDivider />

                            @* Teams *@
                            <MudStack>
                                @if (eventDetail.EventVersusList == null || !eventDetail.EventVersusList.Any())
                                {
                                    <MudField Label="Opposing Teams" Variant="Variant.Outlined" InnerPadding="false">
                                        <MudStack Class="py-1" Row Wrap="Wrap.Wrap" Spacing="0">
                                            <MudText Typo="Typo.caption">Opposing teams to be assigned.</MudText>
                                        </MudStack>
                                    </MudField>
                                }
                                else
                                {
                                    <MudField Label="Opposing Teams" Variant="Variant.Outlined" InnerPadding="false">
                                        <MudStack Class="py-2" Row Wrap="Wrap.Wrap" Spacing="0">
                                            <MudVirtualize Items="eventDetail.EventVersusList" Context="teams">
                                                <MudChip Variant="Variant.Outlined" Size="Size.Small" T="string">@teams.Abbreviation</MudChip>
                                            </MudVirtualize>
                                        </MudStack>
                                    </MudField>
                                }
                            </MudStack>
                        </MudStack>

                        @* Designate *@
                        <MudText Typo="Typo.caption">Tally Clerk: @eventDetail.FirstName @eventDetail.LastName</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudVirtualize>
    }
</MudGrid>

@code
{
    private List<EventsDTO.EventDetails.Event>? _eventDetails;
    private List<SportsDTO.SportCategories>? _sportCategories;
    private List<SportsDTO.Sports>? _sports;
    private List<SportsDTO.SportGenderCategories>? _sportGenderCategories;
    private List<SchoolDTO.SchoolLevels>? _schoolLevels;
    private List<SportsDTO.SportSubcategories>? _sportSubcategories;
    private List<EventsDTO.EventVenues>? _eventVenues;
    private List<UsersDTO.UserList>? _userLists;
    private List<SchoolDTO.SchoolRegions>? _schoolRegions;

    private DateRange _dateRange = new DateRange();
    private DateTime? _startDate = DateTime.Now.Date;
    private DateTime? _endDate;

    private string? _selectedEventVenue;
    private bool? _isOnStream = null;
    private bool? _isFinished = false;

    private async void OnDateRangeChanged(DateRange range)
    {
        _dateRange = range;
        _startDate = range.Start;
        _endDate = range.End;

        await GetEventsAsync();
        StateHasChanged();
    }

    private async Task OnStreamBoolChanged(bool? onStream)
    {
        _isOnStream = onStream;

        await GetEventsAsync();
        StateHasChanged();
    }

    private async Task OnFinishedBoolChanged(bool? finished)
    {
        _isFinished = finished;

        await GetEventsAsync();
        StateHasChanged();
    }


    private SelectedSportCategory? _selectedSportCategory;
    public class SelectedSportCategory
    {
        public int ID { get; set; }
        public string? Category { get; set; }

        public override string ToString() => Category ?? string.Empty;
    }

    private SelectedSport? _selectedSport;
    public class SelectedSport
    {
        public int ID { get; set; }
        public string? Sport { get; set; }

        public override string ToString() => Sport ?? string.Empty;
    }

    private SelectedGenderCategories? _selectedGenderCategories;
    public class SelectedGenderCategories
    {
        public int ID { get; set; }
        public string? Gender { get; set; }

        public override string ToString() => Gender ?? string.Empty;
    }

    private SelectedSchoolLevels? _selectedSchoolLevels;
    public class SelectedSchoolLevels
    {
        public int ID { get; set; }
        public string? Level { get; set; }

        public override string ToString() => Level ?? string.Empty;
    }

    private SelectedSubcategories? _selectedSubcategories;
    public class SelectedSubcategories
    {
        public int ID { get; set; }
        public string? Subcategory { get; set; }

        public override string ToString() => Subcategory ?? string.Empty;
    }

    private SelectedUser? _selectedUser;
    public class SelectedUser
    {
        public string ID { get; set; } = null!;
        public string? Name { get; set; }

        public override string ToString() => Name ?? string.Empty;
    }

    private SelectedRegion? _selectedRegion;
    public class SelectedRegion
    {
        public int ID { get; set; }
        public string? Region { get; set; }
        public string? Abbreviation { get; set; }

        public override string ToString() => Region ?? string.Empty;
    }

    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public List<EventVersus>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }
            public class EventVersus
            {
                public int? Score { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }
        }

        public class EventStreams
        {
            public int ID { get; set; }
            public string? StreamService { get; set; }
            public string? StreamURL { get; set; }
        }

        public class EventVenues
        {
            public int ID { get; set; }
            public string? Venue { get; set; }
            public decimal? Latitude { get; set; }
            public decimal? Longitude { get; set; }
        }
    }

    public class SportsDTO
    {
        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class SportGenderCategories
        {
            public int ID { get; set; }
            public string? Gender { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }
    }

    public class SchoolDTO
    {
        public class SchoolLevels
        {
            public int ID { get; set; }
            public string? Level { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }
    }

    public class UsersDTO
    {
        public class UserList
        {
            public string ID { get; set; } = null!;
            public string? Name { get; set; }
        }
    }

    bool _expandedFilter = true;

    private void OnExpandFilterCollapseClick()
    {
        _expandedFilter = !_expandedFilter;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEventsAsync();
        await GetSportCategoriesAsync();
        await GetSportGenderCategoriesAsync();
        await GetSchoolLevelsAsync();
        await GetVenuesAsync();
        await GetUserNameListAsync();
        await GetSchoolRegionsAsync();
    }

    private async Task GetEventsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Details?" +
            $"region={_selectedRegion?.Region}" +
            $"&category={_selectedSportCategory?.Category}" +
            $"&sport={_selectedSport?.Sport}" +
            $"&subcategory={_selectedSubcategories?.Subcategory}" +
            $"&gender={_selectedGenderCategories?.Gender}" +
            $"&level={_selectedSchoolLevels?.Level}" +
            $"&venue={_selectedEventVenue}" +
            $"&startDate={_startDate?.ToString("yyyy-MM-dd")}" +
            $"&endDate={_endDate?.ToString("yyyy-MM-dd")}" +
            $"&onStream={_isOnStream}" +
            $"&isFinished={_isFinished}" +
            $"&userID={_selectedUser?.ID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventDetails = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventDetails.Event>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            _eventDetails = null;
        }
    }

    private async Task GetSportCategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Categories?";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports?sportCategoryID={_selectedSportCategory?.ID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sports = await JsonSerializer.DeserializeAsync<List<SportsDTO.Sports>>(responseStream, options);

            await GetEventsAsync();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportGenderCategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/GenderCategories?";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportGenderCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportGenderCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolLevelsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Levels";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolLevels = await JsonSerializer.DeserializeAsync<List<SchoolDTO.SchoolLevels>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportSubcategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Subcategories?" +
            $"sportID={_selectedSport?.ID}" +
            $"&sportGenderCategoryID={_selectedGenderCategories?.ID}" +
            $"&schoolLevelID={_selectedSchoolLevels?.ID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportSubcategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportSubcategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetVenuesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Venues";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventVenues = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventVenues>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetUserNameListAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Users/List";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _userLists = await JsonSerializer.DeserializeAsync<List<UsersDTO.UserList>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolRegionsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Regions";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolRegions = await JsonSerializer.DeserializeAsync<List<SchoolDTO.SchoolRegions>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
