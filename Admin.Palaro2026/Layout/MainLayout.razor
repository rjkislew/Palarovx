@inherits LayoutComponentBase

@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject APIService apiService
@inject HttpClient httpClient

@* Required *@
<MudThemeProvider @ref="_mudThemeProvider" Theme="PalaroTheme" DefaultScrollbar="true" IsDarkMode="@(_isDarkMode ?? false)" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Edge="Edge.Start" OnClick="@((e) => ToggleDrawer())" />
        <MudLink Href="./" Underline="Underline.None">
            <MudStack Row AlignItems="AlignItems.Center">
                <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.png" />
                <MudStack Spacing="1" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="height: 100%" Class="mr-10">
                    <MudText Color="Color.Dark" Style="font-size: 20px; font-weight: bold" Class="mb-n2">PALARO 2026</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Dark">Agusan del Sur | Manager</MudText>
                </MudStack>
            </MudStack>
        </MudLink>
        <MudSpacer />
        <MudIconButton OnClick="ToggleDarkMode" Icon="@GetThemeIcon()" />
    </MudAppBar>
    <MudDrawer @bind-Open="_open" ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Mini" Elevation="0">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="pa-5">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code
{
    private bool? _isDarkMode = null; // null = Auto, true = Night, false = Light
    private MudThemeProvider? _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider is not null)
        {
            try
            {
                await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ToggleDarkMode()
    {
        _isDarkMode = _isDarkMode switch
        {
            null => true,  // Auto -> Night
            true => false, // Night -> Light
            false => null  // Light -> Auto
        };
    }

    private string GetThemeIcon()
    {
        return _isDarkMode switch
        {
            true => Icons.Material.Filled.ModeNight,
            false => Icons.Material.Filled.LightMode,
            _ => Icons.Material.Filled.AutoMode
        };
    }

    private MudTheme PalaroTheme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Dark = Colors.Gray.Darken4,
                Primary = "1e4ca1",
                Secondary = "ebb94d",
                Tertiary = "ba3535",
                AppbarBackground = Colors.Shades.White,
                AppbarText = Colors.Shades.Black,
                TextPrimary = Colors.Gray.Darken4,
                TextSecondary = Colors.Gray.Darken4,
            },
            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "280px"
            },
            Typography = new Typography()
            {
                Default = new DefaultTypography()
                {
                    FontFamily = new[] { "Inter", "sans-serif" },
                },
            }
        };

    private bool _newVersionAvailable = false;
    private bool _open = false;

    private void ToggleDrawer()
    {
        _open = !_open;
    }
}