@inherits LayoutComponentBase

<!--
MainLayout.razor
This is the main layout for the Blazor application.
It includes the app bar, drawer, and main content area.
The layout is responsive and adapts to different screen sizes.
-->
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService dialogService
@inject HttpClient httpClient
@inject ThemeService themeService
@inject APIService apiService
@inject CookieService cookieService
@inject NavigationManager navigationManager


@* Required *@
<MudThemeProvider @ref="_mudThemeProvider" Theme="PalaroTheme" DefaultScrollbar="true" IsDarkMode="@(themeService.IsDarkMode ?? false)" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<!--
Main layout structure:
- App bar: contains the logo, drawer button, and night mode button
- Drawer: contains the navigation menu
- Main content area: where the main content is displayed
-->
<MudLayout>
    <MudAppBar Elevation="0" Gutters="false" Class="px-4">
        <!--
        App bar:
        - Drawer button
        - Palaro 2026 Logo
        - Night mode button
        -->
        <!-- Drawer -->
        <MudIconButton Icon="@(_DrawerOpen? Icons.Material.Filled.MenuOpen : Icons.Material.Filled.Menu)" Edge="Edge.Start" OnClick="ToggleDrawer" />

        <MudHidden Breakpoint="Breakpoint.Xs">
            <!-- Palaro 2026 Logo: links to homepage -->
            <MudLink Href="./" Underline="Underline.None">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
                    <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="height: 100%" Class="mr-10">
                        <MudText Typo="Typo.h5" Color="Color.Dark" Style="font-weight: bold" Class="mb-n2">PALARO 2026</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Dark">Agusan del Sur | Management</MudText>
                    </MudStack>
                </MudStack>
            </MudLink>
        </MudHidden>

        <MudHidden Breakpoint="Breakpoint.Xs" Invert>
            <!-- Palaro 2026 Logo: links to homepage -->
            <MudLink Href="./" Underline="Underline.None">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
                </MudStack>
            </MudLink>
        </MudHidden>

        <MudSpacer />


        <MudButton Size="Size.Large" DropShadow="false" Variant="Variant.Filled" OnClick="@ToggleOpen">
            @_userDetails?.FirstName @_userDetails?.LastName
        </MudButton>
        <MudPopover Open="@_toggleProfile" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" DropShadow="false">
            <MudPaper>
                <MudStack Class="pa-3" Spacing="0">
                    <MudPaper Class="pa-2">
                        <MudStack Spacing="0" AlignItems="AlignItems.Center">
                            <MudText>
                                @_userDetails?.FirstName @_userDetails?.LastName
                            </MudText>
                            <MudText Style="font-size: 10px; font-style: italic">@($"@{_userDetails?.Username}")</MudText>
                            <MudText Typo="Typo.caption" Class="mt-2">
                                @_userDetails?.Role
                            </MudText>
                        </MudStack>
                    </MudPaper>
                    <!-- Night mode button with tooltip -->
                    <MudButton StartIcon="@Icons.Material.Filled.Settings">Account Settings</MudButton>
                    <MudButton OnClick="ToggleDarkMode" StartIcon="@GetThemeIcon()">@GetThemeTitle()</MudButton>
                    <MudButton OnClick="Logout" StartIcon="@Icons.Material.Filled.Logout" Class="mt-5">Logout</MudButton>
                </MudStack>
            </MudPaper>
        </MudPopover>
        <MudOverlay @bind-Visible="_toggleProfile" LockScroll="false" AutoClose="true" />
    </MudAppBar>

    <!-- Drawer: mini variant enabled -->
    <MudHidden Breakpoint="Breakpoint.Xs" Invert>
        <MudDrawer @bind-Open="_DrawerOpen" Elevation="0">

            <MudStack Row AlignItems="AlignItems.Center" Class="mb-5">
                <MudImage Height="50" Src="./media/logo/Flat Logo with 2026.webp" />
                <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="height: 100%" Class="mr-10">
                    <MudText Typo="Typo.h5" Color="Color.Dark" Style="font-weight: bold" Class="mb-n2">PALARO 2026</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Dark">Agusan del Sur | Management</MudText>
                </MudStack>
            </MudStack>

            <!-- NavMenu.razor component -->
            <NavMenu />
        </MudDrawer>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.Xs">
        <MudDrawer @bind-Open="_DrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="0">
            <!-- NavMenu.razor component -->
            <NavMenu />
        </MudDrawer>
    </MudHidden>

    <!-- Main content area -->
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="pa-5">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code
{
    private UserDetails? _userDetails;

    private bool _toggleProfile = false;
    private void ToggleOpen() => _toggleProfile = !_toggleProfile;

    public string? token { get; set; }
    public string? userID { get; set; }


    // Flag to indicate if a new version is available
    private bool _newVersionAvailable = false;

    // Flag to control the visibility of the install button
    private bool _showInstallButton = false;

    // ThemeService: handles theme management
    private MudThemeProvider? _mudThemeProvider;

    //DTO
    public class UserDetails
    {
        public string ID { get; set; } = null!;
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Username { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdateAt { get; set; }
        public DateTime? LastLogin { get; set; }
        public bool? Active { get; set; }
        public string? Role { get; set; }
    }

    // initialization: sets the theme and subscribes to theme changes
    protected override async Task OnInitializedAsync()
    {
        // Check if the app is running in a PWA context and register for update notifications
        await RegisterForUpdateAvailableNotification();


        // initialize the theme service
        themeService.OnThemeChanged += StateHasChanged;
        await themeService.LoadThemePreference();

        token = await cookieService.GetCookie("authenticationToken");
        userID = await cookieService.GetCookie("userID");

        await CheckAuthenticationAsync();
        await GetUserDetails();
    }


    // Method to install the app
    private async Task InstallApp()
    {
        await JSRuntime.InvokeVoidAsync("pwaHelper.installApp");
    }


    private async Task GetUserDetails()
    {
        if (string.IsNullOrEmpty(userID)) return;

        string url = $"/Users/UserDetails?userID={userID}";
        _userDetails = await apiService.GetSingleAsync<UserDetails>(url);
    }

    private async Task CheckAuthenticationAsync()
    {
        // Ensure the token and user ID were retrieved from cookies
        if (string.IsNullOrWhiteSpace(token) || string.IsNullOrWhiteSpace(userID))
        {
            // Optional: clear any potentially stale cookies
            await cookieService.ClearCookie("authenticationToken");
            await cookieService.ClearCookie("userID");

            // Redirect to login page
            navigationManager.NavigateTo("./login");
            return;
        }

        // Optional: redirect away from login page if already authenticated
        var currentUri = navigationManager.ToBaseRelativePath(navigationManager.Uri).ToLower();

        if (currentUri == "login")
        {
            navigationManager.NavigateTo("./");
        }
    }


    private async Task Logout()
    {
        await cookieService.ClearCookie("authenticationToken");
        await cookieService.ClearCookie("userID");

        navigationManager.NavigateTo("./login", forceLoad: true);
    }


    // dark mode toggle: switches between dark and light mode
    private async Task ToggleDarkMode()
    {
        await themeService.ToggleDarkModeAsync();
    }

    // theme icon: returns the appropriate icon based on the current theme
    private string GetThemeIcon()
    {
        // if the user has not selected a theme, return the auto mode icon
        if (!themeService.UserSelectedTheme)
            return Icons.Material.Filled.AutoMode;

        // if the user has selected a theme, return the appropriate icon
        return themeService.IsDarkMode switch
        {
            true => Icons.Material.Filled.DarkMode, // dark mode icon
            false => Icons.Material.Filled.LightMode, // light mode icon
            _ => Icons.Material.Filled.Help // fallback if something goes wrong
        };
    }

    // theme tooltip: returns the appropriate tooltip based on the current theme
    private string GetThemeTitle()
    {
        if (!themeService.UserSelectedTheme)
            return "System Theme";

        return themeService.IsDarkMode switch
        {
            true => "Dark Mode",
            false => "Light Mode",
            _ => "Unknown Theme"
        };
    }


    // drawer open state: controls the visibility of the drawer
    private bool _DrawerOpen = true;

    // method to toggle the drawer open state
    private void ToggleDrawer()
    {
        _DrawerOpen = !_DrawerOpen;
    }


    // Palaro theme: defines the theme for the application
    private MudTheme PalaroTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Dark = Colors.Gray.Darken4,
            White = Colors.Gray.Lighten5,
            Primary = "1e4ca1",
            Secondary = "ebb94d",
            Tertiary = "ba3535",
            ActionDefault = Colors.Gray.Darken4,
            AppbarBackground = Colors.Shades.White,
            AppbarText = Colors.Shades.Black,
            TextPrimary = Colors.Shades.Black,
        },
        PaletteDark = new PaletteDark()
        {
            Dark = Colors.Gray.Lighten5,
            White = Colors.Gray.Darken4,
            Primary = "4a7ad3",
            Secondary = "f8d589",
            Tertiary = "db5a5a",
            Background = Colors.Gray.Darken4,
            Surface = Colors.Gray.Darken4,
            DrawerBackground = Colors.Gray.Darken4,
            ActionDefault = Colors.Gray.Lighten5,
            AppbarBackground = Colors.Gray.Darken4,
            AppbarText = Colors.Gray.Lighten5,
            TextPrimary = Colors.Shades.White
        },
        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "300px"
        },
        Typography = new Typography()
        {
            Default = new DefaultTypography()
            {
                FontFamily = new[] { "Inter", "sans-serif" },
            },
            H1 = new H1Typography()
            {
                FontSize = "clamp(2rem, 5vw + 1rem, 4rem)",
                FontWeight = "700"
            },
            H2 = new H2Typography()
            {
                FontSize = "clamp(1.75rem, 4vw + 0.5rem, 3rem)",
                FontWeight = "600"
            },
            H3 = new H3Typography()
            {
                FontSize = "clamp(1.5rem, 3vw + 0.5rem, 2.5rem)",
                FontWeight = "600"
            },
            H4 = new H4Typography()
            {
                FontSize = "clamp(1.25rem, 2.5vw + 0.5rem, 2rem)",
                FontWeight = "600"
            },
            H5 = new H5Typography()
            {
                FontSize = "clamp(1rem, 2vw + 0.5rem, 1.5rem)",
                FontWeight = "600"
            },
            H6 = new H6Typography()
            {
                FontSize = "clamp(0.875rem, 1.5vw + 0.5rem, 1.25rem)",
                FontWeight = "700"
            },
            Subtitle1 = new Subtitle1Typography()
            {
                FontSize = "clamp(1rem, 1.5vw + 0.25rem, 1.25rem)",
                FontWeight = "400"
            },
            Subtitle2 = new Subtitle2Typography()
            {
                FontSize = "clamp(0.875rem, 1.2vw + 0.25rem, 1rem)",
                FontWeight = "500"
            },
            Body1 = new Body1Typography()
            {
                FontSize = "clamp(1rem, 1.2vw + 0.25rem, 1.125rem)",
                FontWeight = "400",
            },
            Body2 = new Body2Typography()
            {
                FontSize = "clamp(0.875rem, 1vw + 0.25rem, 1rem)",
                FontWeight = "400",
            },
            Button = new ButtonTypography()
            {
                FontSize = "clamp(0.875rem, 0.8vw + 0.25rem, 1rem)",
                FontWeight = "400",
                TextTransform = "none"
            },
            Caption = new CaptionTypography()
            {
                FontSize = "clamp(0.75rem, 0.8vw + 0.25rem, 0.875rem)",
                FontWeight = "300"
            },
            Overline = new OverlineTypography()
            {
                FontSize = "clamp(0.625rem, 0.5vw + 0.25rem, 0.75rem)",
                FontWeight = "500",
                TextTransform = "uppercase",
                LetterSpacing = "0.1em"
            }
        }
    };




    // Register for update available notification
    private async Task RegisterForUpdateAvailableNotification()
    {
        await JSRuntime.InvokeAsync<object>(
            identifier: "registerForUpdateAvailableNotification",
            DotNetObjectReference.Create(this),
            nameof(OnUpdateAvailable));
    }

    [JSInvokable(nameof(OnUpdateAvailable))]
    public Task OnUpdateAvailable()
    {
        _newVersionAvailable = true;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Add("A new version is available.", Severity.Info, config =>
        {
            config.RequireInteraction = true; // Prevent auto-dismiss
            config.ShowCloseIcon = false;     // Hide close icon
            config.VisibleStateDuration = int.MaxValue; // Keeps snackbar indefinitely

            config.Action = "Update";
            config.ActionColor = Color.Primary;
            config.OnClick = snackbar =>
            {
                // Reload the page to get the latest version
                JSRuntime.InvokeVoidAsync("location.reload", true);
                return Task.CompletedTask;
            };
        });

        StateHasChanged();
        return Task.CompletedTask;
    }
}