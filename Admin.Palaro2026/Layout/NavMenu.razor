@inject NavigationManager NavManager
@inject CookieService cookieService

<MudNavMenu Margin="Margin.Normal" Rounded Color="Color.Dark" Class="scroll-container">
    <!-- Home -->
    <MudNavLink Match="NavLinkMatch.All" Href="./">Home</MudNavLink>

    <!-- Events -->
    <MudNavGroup Title="Event" Expanded="@IsExpanded("/events")" Disabled="@(!CanAccessEvents)">
        <MudNavLink Match="NavLinkMatch.All" Href="./events/" Disabled="@(!CanAccessEvents)">Events</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="./events/streams" Disabled="@(!CanAccessEvents)">Streams</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="./events/venues" Disabled="@(!CanAccessEvents)">Venues</MudNavLink>
    </MudNavGroup>

    <!-- News -->
    <MudNavGroup Title="News" Expanded="@IsExpanded("/news")" Disabled="@(!CanAccessNews)">
        <MudNavLink Match="NavLinkMatch.All" Href="./news" Disabled="@(!CanAccessNews)">News</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="./news/categories" Disabled="@(!CanAccessNewsAdmin)">Categories</MudNavLink>
    </MudNavGroup>

    <!-- Profile -->
    <MudNavGroup Title="Profile" Expanded="@IsExpanded("/profiles")" Disabled="@(!CanAccessProfiles)">
        <MudNavLink Match="NavLinkMatch.All" Href="./profiles/players" Disabled="@(!CanAccessProfiles)">Players</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="./profiles/coaches" Disabled="@(!CanAccessProfiles)">Coaches</MudNavLink>
    </MudNavGroup>

    <!-- Schools -->
    <MudNavGroup Title="School" Expanded="@IsExpanded("/schools")" Disabled="@(!CanAccessSchools)">
        <MudNavLink Match="NavLinkMatch.All" Href="./schools/regions" Disabled="@(!CanAccessSchools)">Regions</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="./schools/divisions" Disabled="@(!CanAccessSchools)">Divisions</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="./schools" Disabled="@(!CanAccessSchools)">Schools</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="./schools/billeting-quarters" Disabled="@(!CanAccessSchools)">Billeting Quarters</MudNavLink>
    </MudNavGroup>

    <!-- Sports -->
    <MudNavGroup Title="Sport" Expanded="@IsExpanded("/sports")" Disabled="@(!CanAccessSports)">
        <MudNavLink Match="NavLinkMatch.All" Href="./sports" Disabled="@(!CanAccessSports)">Sports</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="./sports/subcategories" Disabled="@(!CanAccessSports)">Subcategories</MudNavLink>
    </MudNavGroup>

    <!-- Users -->
    <MudNavLink Match="NavLinkMatch.All" Href="./users" Disabled="@(!CanAccessUsers)">Users</MudNavLink>
</MudNavMenu>

@code {
    private string currentPath = string.Empty;
    private string? UserRole;

    private bool CanAccessEvents => UserRole is "Superuser" or "System Administrator" or "Tally Manager" or "Tally Clerk" or "Event Manager";
    private bool CanAccessNews => UserRole is "Superuser" or "System Administrator" or "News Administrator" or "News Editor" or "News Contributor";
    private bool CanAccessNewsAdmin => UserRole is "Superuser" or "System Administrator" or "News Administrator";
    private bool CanAccessProfiles => UserRole is "Superuser" or "System Administrator" or "Profile Manager";
    private bool CanAccessSchools => UserRole is "Superuser" or "System Administrator" or "Regional Facilitator";
    private bool CanAccessSports => UserRole is "Superuser" or "System Administrator" or "Sport Manager";
    private bool CanAccessUsers => UserRole == "Superuser";

    protected override async Task OnInitializedAsync()
    {
        UpdateCurrentPath();
        NavManager.LocationChanged += HandleLocationChanged;

        // 🔑 Load role from cookie
        UserRole = await cookieService.GetCookie("userRole");
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateCurrentPath();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateCurrentPath()
    {
        currentPath = NavManager.Uri.Replace(NavManager.BaseUri, "").TrimEnd('/');
    }

    private bool IsExpanded(string pathPrefix)
    {
        return currentPath.StartsWith(pathPrefix.TrimStart('/'), StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
}
