@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="1">
                <MudItem xs="12">
                    <MudSelect @bind-Value="_selectedRegionIDValue" Margin="Margin.Dense" Label="Region" ShrinkLabel Variant="Variant.Outlined"
                               T="int?" SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedPlayerIDValues = null; await GetPlayerAsync(); }))">
                        <MudVirtualize Items="_schoolRegions" Context="region">
                            <MudSelectItem T="int?" Value="@region.ID">
                                @region.Region (@region.Abbreviation)
                            </MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudSelect @bind-SelectedValues="_selectedPlayerIDValues" SelectAll="true" ToStringFunc="@(id => _profilePlayerEvents?.FirstOrDefault(c => c.ID == id) is { } player ? $"{player.FirstName} {player.LastName}" : string.Empty)"
                               T="string" MultiSelection="true" Margin="Margin.Dense" Label="Player" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedRegionIDValue == null">
                        <MudVirtualize Items="_profilePlayerEvents" Context="player">
                            <MudSelectItem T="string" Value="player.ID">@player.FirstName @player.LastName</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_scoreValue" Label="Score" ShrinkLabel Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="string" Margin="Margin.Dense" Label="Placement" @bind-Value="_rankValue" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        @{
                            List<string>? selectedPlacement;

                            if (SelectedEventStage == "Championship")
                            {
                                selectedPlacement = _ChampionshipPlacements;
                            }
                            else
                            {
                                selectedPlacement = Placements;
                            }
                        }

                        @if (selectedPlacement is not null)
                        {
                            <MudVirtualize Items="selectedPlacement" Context="placement">
                                <MudSelectItem T="string" Value="@placement">@placement</MudSelectItem>
                            </MudVirtualize>
                        }

                    </MudSelect>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                <MudButton Style="text-transform: none" Color="Color.Error" DropShadow="false" OnClick="ConfirmDeleteEventVersusTeamsAsync">Delete</MudButton>
                <MudStack Row Justify="Justify.SpaceBetween">
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="ConfirmUpdateEventVersusTeamsAsync" Disabled="_addStreamDisabled">Update</MudButton>
                </MudStack>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // Passed data from page
    [Parameter]
    public string? SelectedEventID { get; set; }
    [Parameter]
    public int? SelectedSubCategoryID { get; set; }
    [Parameter]
    public int? SelectedEventVersusTeamsID { get; set; }
    [Parameter]
    public string? SelectedEventStage { get; set; }


    // JSON storage
    private List<SchoolsDTO.SchoolRegions>? _schoolRegions;
    private List<ProfilesDTO.ProfilePlayerEvent>? _profilePlayerEvents;
    private List<EventsDTO.EventVersusTeams>? _eventVersusTeams;
    private List<EventsDTO.EventVersusTeamPlayers>? _eventVersusTeamPlayers;


    // Variables
    private string? _selectedEventID;
    private int? _selectedRegionIDValue;
    private int _selectedEventVersusTeamsIDValue;
    private int? _selectedEventVersusTeamPlayersIDValue;
    private IEnumerable<string?>? _selectedPlayerIDValues;
    private string? _scoreValue = "0";
    private string? _rankValue;
    private DateTime? _recentUpdateAt = DateTime.Now;

    // Disable addition button if values are empty
    private bool _addStreamDisabled =>
    !_selectedRegionIDValue.HasValue;

    // Load dialog if true
    private bool? _isLoaded = false;


    private List<string> _ChampionshipPlacements = new()
    {
        "Champion",
        "First Runner-Up",
        "Second Runner-Up",
        "Eliminated",
    };

    private List<string> Placements = new()
    {
        "Winner",
        "Eliminated",
    };


    // DTOs
    public class SchoolsDTO
    {
        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }
    }

    public class ProfilesDTO
    {
        public class ProfilePlayerEvent
        {
            public string? ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? RegionID { get; set; }
            public int? SubCategoryID { get; set; }
        }
    }

    public class EventsDTO
    {
        public class EventVersusTeams
        {
            public int ID { get; set; }
            public string? EventID { get; set; }
            public int? SchoolRegionID { get; set; }
            public string? Score { get; set; }
            public string? Rank { get; set; }
            public DateTime? RecentUpdateAt { get; set; }
        }

        public class EventVersusTeamPlayers
        {
            public int ID { get; set; }
            public int? EventVersusID { get; set; }
            public string? ProfilePlayerID { get; set; }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetEventVersusTeamsAsync();
        await GetEventVersusTeamPlayersAsync();
        await GetSchoolRegionsAsync();
        await GetPlayerAsync();

        if (_schoolRegions?.Any() == true ||
        _eventVersusTeams?.Any() == true ||
        _eventVersusTeamPlayers?.Any() == true ||
        _profilePlayerEvents?.Any() == true)
        {
            _isLoaded = true;
        }
    }

    private async Task GetSchoolRegionsAsync()
    {
        string url = "/Schools/Regions";
        _schoolRegions = await apiService.GetAsync<SchoolsDTO.SchoolRegions>(url);
    }

    private async Task GetEventVersusTeamsAsync()
    {
        string url = $"/Events/VersusTeams?id={SelectedEventVersusTeamsID}";
        _eventVersusTeams = await apiService.GetAsync<EventsDTO.EventVersusTeams>(url);

        if (_eventVersusTeams != null)
        {
            var eventVersusTeam = _eventVersusTeams.First();

            _selectedEventVersusTeamsIDValue = eventVersusTeam.ID;
            _selectedEventID = eventVersusTeam.EventID;
            _selectedRegionIDValue = eventVersusTeam.SchoolRegionID;
            _scoreValue = eventVersusTeam.Score;
            _rankValue = eventVersusTeam.Rank;
            _recentUpdateAt = eventVersusTeam.RecentUpdateAt;
        }
    }

    private async Task GetEventVersusTeamPlayersAsync()
    {
        string url = $"/Events/VersusTeams/Players?eventVersusID={SelectedEventVersusTeamsID}";
        _eventVersusTeamPlayers = await apiService.GetAsync<EventsDTO.EventVersusTeamPlayers>(url);

        if (_eventVersusTeamPlayers != null)
        {
            var eventVersusTeam = _eventVersusTeamPlayers.First();
            _selectedEventVersusTeamPlayersIDValue = eventVersusTeam.ID;
            _selectedPlayerIDValues = _eventVersusTeamPlayers.Select(c => c.ProfilePlayerID).ToList();
        }
    }

    private async Task GetPlayerAsync()
    {
        string url = $"/Profiles/Player/Events?regionID={_selectedRegionIDValue}&subCategoryID={SelectedSubCategoryID}";
        _profilePlayerEvents = await apiService.GetAsync<ProfilesDTO.ProfilePlayerEvent>(url);
    }

    // Dialog actions// Dialog Actions
    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmUpdateEventVersusTeamsAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
                message: $"Do you confirm update of the selected team?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await UpdateEventVersusTeamsAsync();

            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    private async Task ConfirmDeleteEventVersusTeamsAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm deletion  of the selected team?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteEventVersusTeamPlayersByEventVersusTeamIDAsync();
            await DeleteEventVersusTeamPlayersAsync();

            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    // Update player sport event after deleting the sport event coach/es
    // while aslo addding new sport event coach
    private async Task UpdateEventVersusTeamsAsync()
    {
        if (SelectedEventVersusTeamsID == 0) return;

        var updatedTeam = new EventsDTO.EventVersusTeams
        {
            EventID = SelectedEventID,
            ID = _selectedEventVersusTeamsIDValue,
            SchoolRegionID = _selectedRegionIDValue,
            Score = _scoreValue,
            Rank = _rankValue,
            RecentUpdateAt = _recentUpdateAt,
        };

        string url = $"/Events/VersusTeams/{SelectedEventVersusTeamsID}";

        var success = await apiService.PutAsync(url, updatedTeam);

        if (success)
        {
            // If there are selected players, update them, otherwise delete all
            if (_selectedPlayerIDValues?.Any() == true)
            {
                await DeleteEventVersusTeamPlayersByEventVersusTeamIDAsync();
                await PostEventVersusTeamPlayersAsync();
            }
            else
            {
                await DeleteEventVersusTeamPlayersByEventVersusTeamIDAsync();
            }

            Snackbar.Add("Team updated successfully.", Severity.Success);
            MudDialog?.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Failed to update team.", Severity.Error);
        }
    }


    private async Task PostEventVersusTeamPlayersAsync()
    {
        var eventStream = _selectedPlayerIDValues?.Where(id => id?.Any() == true)
            .Select(playerID => new EventsDTO.EventVersusTeamPlayers
            {
                ProfilePlayerID = playerID,
                EventVersusID = SelectedEventVersusTeamsID,
            }).ToList();

        if (eventStream == null || !eventStream.Any()) return;

        string url = $"/Events/VersusTeams/Players";
        var success = await apiService.PostAsync(url, eventStream);
    }


    // Delete Sport event and sport event coach by sport event ID
    private async Task DeleteEventVersusTeamPlayersByEventVersusTeamIDAsync()
    {
        if (SelectedEventVersusTeamsID == 0) return;

        string url = $"/Events/VersusTeams/Players/ByEventVersusTeam/{SelectedEventVersusTeamsID}";

        var success = await apiService.DeleteAsync(url);
    }

    private async Task DeleteEventVersusTeamPlayersAsync()
    {
        if (SelectedEventVersusTeamsID == 0) return;

        string url = $"/Events/VersusTeams/{SelectedEventVersusTeamsID}";

        var success = await apiService.DeleteAsync(url);

        if (success)
        {
            Snackbar.Add($"Team deleted successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to delete team.", Severity.Error);
        }
    }
}
