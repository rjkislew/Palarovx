@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog>
        <DialogContent>
            <MudGrid Justify="Justify.Center">
                <MudVirtualize Items="_events" Context="eventDetails">
                    <MudVirtualize Items="eventDetails.EventVersusList" Context="team">
                        <MudItem xs="6" sm="4" md="3">
                            <MudPaper Class="pa-3" Outlined Style="height: 100%">
                                <MudStack Justify="Justify.SpaceBetween" Style="height: 100%">
                                    <MudStack Row Spacing="1" Style="height: 100%" AlignItems="AlignItems.Center">
                                        <MudImage Src="@($"media/regions/{team.Abbreviation}.png")" Height="50" />
                                        <MudStack Spacing="0" Style="height: 100%">
                                            <MudText Class="text-center" Style="font-weight: bold">@team.Abbreviation</MudText>
                                            <MudText Class="text-center" Style="font-size: 10px">@team.Region</MudText>
                                        </MudStack>
                                    </MudStack>
                                    <MudNumericField T="int" Style="font-size: 50px" Disabled="@(team.ID == _updatingTeamId)"
                                                     Value="@(int.TryParse(team.Score, out int val) ? val : 0)"
                                                     ValueChanged="@(value => UpdateTeamScoreAsync(team.ID, value.ToString()))">
                                    </MudNumericField>
                                    <MudProgressLinear Indeterminate="true" Style="margin-top: -14px" hidden="@(team.ID != _updatingTeamId)" />
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                    </MudVirtualize>
                </MudVirtualize>
            </MudGrid>
        </DialogContent>
        <DialogActions></DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // Passed data from page
    [Parameter]
    public string? SelectedEventID { get; set; }


    // Variables
    private List<EventsDTO.EventDetails.Event>? _events;

    // Dialog actions// Dialog Actions
    private void Cancel() => MudDialog?.Cancel();

    // Disable numeric field if update is in progress
    private bool _scoreIsUpdating = false;
    private int? _updatingTeamId = null;


    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public string? StreamTitle { get; set; }
                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public string? Rank { get; set; }
                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetEventsOnDialogOpenAsync();
    }

    private async Task GetEventsOnDialogOpenAsync()
    {
        string url = $"/Events/Details?id={SelectedEventID}";
        _events = await apiService.GetAsync<EventsDTO.EventDetails.Event>(url);

        if (_events != null)
        {
            _isLoaded = true;
        }
        else
        {
            Snackbar.Add("Failed to load event details", Severity.Error);
            return;
        }
    }

    private async Task UpdateTeamScoreAsync(int? id, string score)
    {
        _updatingTeamId = id;
        _scoreIsUpdating = true;

        if (id == null) return;

        string url = $"/Events/VersusTeams/{id}";

        var updateScore = new { Score = score }; // Score as string

        var success = await apiService.PutAsync(url, updateScore);

        if (success)
        {
            // add task delay to mitigate rapid updates
            await Task.Delay(500);
            _scoreIsUpdating = false;
            await GetEventsOnDialogOpenAsync();
            Snackbar.Add("Score updated successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to update score", Severity.Error);
        }

        _updatingTeamId = null;
    }
}
