@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog>
        <DialogContent>
            <MudGrid Justify="Justify.Center">
                <MudItem xs="6" md="3">
                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                        <MudTextField T="string?" Value="_event.GamePhase" ValueChanged="@(value => UpdateEventAsync())"></MudTextField>
                        <MudText Typo="Typo.caption">@Phase</MudText>
                    </MudStack>
                </MudItem>
                <MudFlexBreak />
                    <MudVirtualize Items="_event.EventVersusList" Context="team">
                        <MudItem xs="6" sm="4" md="3">
                            <MudPaper Class="pa-3" Outlined Style="height: 100%">
                                <MudStack>
                                    <MudStack>
                                        <MudStack Spacing="0" Style="width: 100%" AlignItems="AlignItems.Center">
                                            <MudText Class="text-center" Style="font-weight: bold">@team.Abbreviation</MudText>
                                            <MudText Class="text-center" Style="font-size: 10px">@team.Region</MudText>
                                        </MudStack>
                                        <MudStack Row Style="width: 100%" Justify="Justify.Center">
                                            <MudImage Src="@($"https://palarongpambansa2026.com/attachments/media/regions/team_logo/{team.Region}.webp")" Height="50" />
                                            <MudImage Src="@($"https://palarongpambansa2026.com/attachments/media/regions/region_logo/{team.Region}.webp")" Height="50" />
                                        </MudStack>
                                    </MudStack>
                                    <MudStack Style="width: 100%" AlignItems="AlignItems.Center">
                                        <MudTextField T="string" Style="font-size: 50px" Disabled="@(team.ID == _updatingTeamId)"
                                                      Value="team.Score"
                                                      ValueChanged="@(value => UpdateTeamScoreAsync(team.ID, value.ToString()))">
                                        </MudTextField>
                                        <MudText Typo="Typo.caption">@Unit</MudText>
                                    </MudStack>
                                    <MudProgressLinear Indeterminate="true" Style="margin-top: -14px" hidden="@(team.ID != _updatingTeamId)" />
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                </MudVirtualize>
            </MudGrid>
        </DialogContent>
        <DialogActions></DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // Passed data from page
    [Parameter]
    public string? SelectedEventID { get; set; }
    [Parameter]
    public int? SelectedSubCategoryID { get; set; }

    private string? Unit;
    private string? Phase;

    private string? _GamePhaseValue;

    // Variables
    private EventsDTO.EventDetails.Event? _event;

    // Dialog actions// Dialog Actions
    private void Cancel() => MudDialog?.Cancel();

    // Disable numeric field if update is in progress
    private bool _eventIsUpdating = false;

    private bool _scoreIsUpdating = false;
    private int? _updatingTeamId = null;

    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class EventsDTO
    {
        public class EventDetails
        {
            public class Event
            {
                public string ID { get; set; } = null!;
                public string? EventStage { get; set; }
                public List<EventVersusTeams>? EventVersusList { get; set; }
                public string? Category { get; set; }
                public string? Sport { get; set; }
                public string? GamePhase { get; set; }
                public int? SubCategoryID { get; set; }
                public string? Subcategory { get; set; }
                public string? Gender { get; set; }
                public string? Level { get; set; }
                public string? Venue { get; set; }
                public decimal? Latitude { get; set; }
                public decimal? Longitude { get; set; }
                public DateTime? Date { get; set; }
                public TimeSpan? Time { get; set; }
                public bool? OnStream { get; set; }
                public string? StreamService { get; set; }
                public string? StreamURL { get; set; }
                public string? StreamTitle { get; set; }
                public bool? IsFinished { get; set; }
                public byte[]? Attachement { get; set; }
                public bool? Archived { get; set; }
                public bool? Deleted { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
            }

            public class EventVersusTeams
            {
                public int ID { get; set; }
                public string? Score { get; set; }
                public string? Region { get; set; }
                public string? Abbreviation { get; set; }
                public string? Rank { get; set; }
                public List<EventVersusTeamPlayers>? EventVersusTeamPlayersList { get; set; }
                public DateTime? RecentUpdateAt { get; set; }
            }

            public class EventVersusTeamPlayers
            {
                public int ID { get; set; }
                public int? EventVersusID { get; set; }
                public string? FirstName { get; set; }
                public string? LastName { get; set; }
                public string? School { get; set; }
            }
        }
        public class Events
        {
            public string ID { get; set; } = null!;
            public int? EventStageID { get; set; }
            public int? SportSubcategoryID { get; set; }
            public int? EventVenuesID { get; set; }
            public DateTime? Date { get; set; }
            public TimeSpan? Time { get; set; }
            public bool? OnStream { get; set; }
            public int? EventStreamID { get; set; }
            public string? GamePhase { get; set; }
            public bool? IsFinished { get; set; }
            public byte[]? Attachement { get; set; }
            public bool? Archived { get; set; }
            public bool? Deleted { get; set; }
            public string? UserID { get; set; }
        }
    }

    public class SportMetric
    {
        public int ID { get; set; }
        public string Sport { get; set; } = string.Empty;
        public string Unit { get; set; } = string.Empty;
        public string Phase { get; set; } = string.Empty;
    }

    public static List<SportMetric> Metrics() => new()
    {
        new() { ID = 1, Sport = "Archery",         Unit = "Points",                    Phase = "End / Round" },
        new() { ID = 2, Sport = "Arnis",           Unit = "Points",                    Phase = "Round" },
        new() { ID = 3, Sport = "Athletics",       Unit = "Time / Distance / Points",  Phase = "Heat / Final" },
        new() { ID = 4, Sport = "Badminton",       Unit = "Points",                    Phase = "Game" },
        new() { ID = 5, Sport = "Baseball",        Unit = "Runs",                      Phase = "Inning" },
        new() { ID = 6, Sport = "Basketball",      Unit = "Points",                    Phase = "Quarter" },
        new() { ID = 7, Sport = "Billiard",        Unit = "Points / Frames",           Phase = "Round" },
        new() { ID = 8, Sport = "Boxing",          Unit = "Points / KO",               Phase = "Round" },
        new() { ID = 9, Sport = "Chess",           Unit = "Points",                    Phase = "Round" },
        new() { ID = 10, Sport = "Dancesport",     Unit = "Points",                    Phase = "Round" },
        new() { ID = 11, Sport = "Football",       Unit = "Goals",                     Phase = "Half" },
        new() { ID = 12, Sport = "Futsal",         Unit = "Goals",                     Phase = "Half" },
        new() { ID = 13, Sport = "Gymnastics",     Unit = "Points",                    Phase = "Round" },
        new() { ID = 14, Sport = "Sepak Takraw",   Unit = "Points",                    Phase = "Set" },
        new() { ID = 15, Sport = "Softball",       Unit = "Runs",                      Phase = "Inning" },
        new() { ID = 16, Sport = "Swimming",       Unit = "Time",                      Phase = "Heat / Final" },
        new() { ID = 17, Sport = "Table Tennis",   Unit = "Points",                    Phase = "Game" },
        new() { ID = 18, Sport = "Taekwondo",      Unit = "Points",                    Phase = "Round" },
        new() { ID = 19, Sport = "Tennis",         Unit = "Points / Games / Sets",     Phase = "Set" },
        new() { ID = 20, Sport = "Volleyball",     Unit = "Points",                    Phase = "Set" },
        new() { ID = 21, Sport = "Wrestling",      Unit = "Points / Fall",             Phase = "Round" },
        new() { ID = 22, Sport = "Wushu",          Unit = "Points",                    Phase = "Round" },
        new() { ID = 23, Sport = "Pencak Silat",   Unit = "Points",                    Phase = "Round" },
        new() { ID = 24, Sport = "Athletics",      Unit = "Time / Distance / Points",  Phase = "Heat / Final" },
        new() { ID = 25, Sport = "Bocce",          Unit = "Points",                    Phase = "End / Round" },
        new() { ID = 26, Sport = "Goal Ball",      Unit = "Goals",                     Phase = "Half" },
        new() { ID = 27, Sport = "Swimming",       Unit = "Time",                      Phase = "Heat / Final" },
    };

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetEventsAsync();
        await GetEventsOnDialogOpenAsync();

        if (SelectedSubCategoryID.HasValue)
        {
            var metric = Metrics().FirstOrDefault(m => m.ID == SelectedSubCategoryID.Value);
            if (metric != null)
            {
                Unit = metric.Unit;
                Phase = metric.Phase;
            }
        }
    }

    private async Task GetEventsAsync()
    {
        string url = "/Events/Details";
        var _eventDetailsContent = await apiService.GetAsync<EventsDTO.EventDetails.Event>(url);

        _event = _eventDetailsContent.FirstOrDefault(e => e.ID == SelectedEventID);
    }

    private async Task GetEventsOnDialogOpenAsync()
    {
        string url = $"/Events/Details?id={SelectedEventID}";
        var _events = await apiService.GetAsync<EventsDTO.EventDetails.Event>(url);
        
        _event = _events.FirstOrDefault();

        if (_events != null)
        {
            _isLoaded = true;
        }
        else
        {
            Snackbar.Add("Failed to load event details", Severity.Error);
            return;
        }
    }

    private async Task UpdateTeamScoreAsync(int? id, string score)
    {
        _updatingTeamId = id;
        _scoreIsUpdating = true;

        if (id == null) return;

        string url = $"/Events/VersusTeams/{id}";

        var updateScore = new { Score = score }; // Score as string

        var success = await apiService.PutAsync(url, updateScore);

        if (success)
        {
            // add task delay to mitigate rapid updates
            await Task.Delay(500);
            _scoreIsUpdating = false;
            await GetEventsOnDialogOpenAsync();
            Snackbar.Add("Score updated successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to update score", Severity.Error);
        }

        _updatingTeamId = null;
    }

    private async Task UpdateEventAsync()
    {
        _eventIsUpdating = true;

        if (SelectedEventID == null) return;

        var updateEvent = new EventsDTO.Events
            {
                ID = SelectedEventID,
                GamePhase = _GamePhaseValue
            };

        string url = $"/Events/{SelectedEventID}";

        var success = await apiService.PatchAsync(url, updateEvent);

        if (success)
        {
            // add task delay to mitigate rapid updates
            await Task.Delay(500);
            _eventIsUpdating = false;
            await GetEventsOnDialogOpenAsync();
            Snackbar.Add($"Event Phase updated successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to update event phase", Severity.Error);
        }
    }
}
