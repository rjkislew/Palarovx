@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="5">
                @* Sports Categories *@
                <MudItem xs="12">
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.caption">Manage the sport events categories here.</MudText>
                        <MudField Class="pa-3" Variant="Variant.Outlined" Label="Category" HelperText="Select a sport category you want to edit/remove.">
                            <MudChipSet T="SportsDTO.SportCategories" @bind-SelectedValue="_selectedSportCategoryValue" SelectionMode="SelectionMode.ToggleSelection" CheckMark>
                                <MudVirtualize Items="_sportCategories" Context="sportCategory">
                                    <MudChip Value="@(new SportsDTO.SportCategories { ID = sportCategory.ID, Category = sportCategory.Category })">
                                        @sportCategory.Category
                                    </MudChip>
                                </MudVirtualize>
                            </MudChipSet>
                        </MudField>
                        <MudDivider />
                        @if (_selectedSportCategoryValue is not null)
                        {
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Large" />
                                <MudTextField Style="width: 75px" @bind-Value="_selectedSportCategoryValue.ID" Margin="Margin.Dense" Variant="Variant.Outlined" Label="ID" ReadOnly="true" />
                                <MudTextField FullWidth="true" Immediate Class="flex-grow-1" @bind-Value="_selectedSportCategoryValue.Category" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Edit selected category" Clearable OnClearButtonClick="() => _selectedSportCategoryValue = null" />
                                @if (string.IsNullOrEmpty(_selectedSportCategoryValue.Category) == false)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="ConfirmUpdateSportCategoryAsync" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="ConfirmDeleteSportCategoryAsync" />
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" />
                                <MudTextField @bind-Value="_sportCategoryValue" Immediate Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel="true" Label="Add category" Clearable />
                                @if (string.IsNullOrEmpty(_sportCategoryValue) == false)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="ConfirmAddSportCategoryAsync" />
                                }
                            </MudStack>
                        }

                    </MudStack>
                </MudItem>

                <MudItem xs="12">
                    <MudDivider/>
                </MudItem>

                @* Sports Gender Categories *@
                <MudItem xs="12">
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.caption">Manage the sport events gender categories here.</MudText>
                        <MudField Class="pa-3" Variant="Variant.Outlined" Label="Gender Category" HelperText="Select a sport gender category you want to edit/remove.">
                            <MudChipSet T="SportsDTO.SportGenderCategories" @bind-SelectedValue="_selectedSportGenderCategoryValue" SelectionMode="SelectionMode.ToggleSelection" CheckMark>
                                <MudVirtualize Items="_sportGenderCategories" Context="sportGenderCategory">
                                    <MudChip Value="@(new SportsDTO.SportGenderCategories { ID = sportGenderCategory.ID, Gender = sportGenderCategory.Gender })">
                                        @sportGenderCategory.Gender
                                    </MudChip>
                                </MudVirtualize>
                            </MudChipSet>
                        </MudField>
                        <MudDivider />
                        @if (_selectedSportGenderCategoryValue is not null)
                        {
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Large" />
                                <MudTextField Style="width: 75px" @bind-Value="_selectedSportGenderCategoryValue.ID" Margin="Margin.Dense" Variant="Variant.Outlined" Label="ID" ReadOnly="true" />
                                <MudTextField FullWidth="true" Immediate Class="flex-grow-1" @bind-Value="_selectedSportGenderCategoryValue.Gender" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Edit selected gender category" Clearable OnClearButtonClick="() => _selectedSportGenderCategoryValue = null" />
                                @if (string.IsNullOrEmpty(_selectedSportGenderCategoryValue.Gender) == false)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="ConfirmUpdateSportGenderCategoryAsync" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="ConfirmDeleteSportGenderCategoryAsync" />
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" />
                                <MudTextField @bind-Value="_sportGenderCategoryValue" Immediate Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel="true" Label="Add gender category" Clearable />
                                @if (string.IsNullOrEmpty(_sportGenderCategoryValue) == false)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="ConfirmAddSportGenderCategoryAsync" />
                                }
                            </MudStack>
                        }

                    </MudStack>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Style="width: 100%" Justify="Justify.FlexEnd">
                <MudButton Style="text-transform: none" Variant="Variant.Filled" DropShadow="false" OnClick="() => MudDialog?.Close(DialogResult.Ok(true))">Done</MudButton>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    // JSON storage
    private List<SportsDTO.SportCategories>? _sportCategories;
    private List<SportsDTO.SportGenderCategories>? _sportGenderCategories;

    // Variables
    private SportsDTO.SportCategories? _selectedSportCategoryValue;
    private string? _sportCategoryValue;

    private SportsDTO.SportGenderCategories? _selectedSportGenderCategoryValue;
    private string? _sportGenderCategoryValue;

    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class SportGenderCategories
        {
            public int ID { get; set; }
            public string? Gender { get; set; }
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetSportCategoriesAsync();
        await GetSportGenderCategoriesAsync();

        if (_sportCategories?.Any() == true ||
        _sportGenderCategories?.Any() == true)
        {
            _isLoaded = true;
        }
    }

    private async Task GetSportCategoriesAsync()
    {
        string url = $"/Sports/Categories";

        _sportCategories = await apiService.GetAsync<SportsDTO.SportCategories>(url);
    }

    private async Task GetSportGenderCategoriesAsync()
    {
        string url = $"/Sports/GenderCategories";

        _sportGenderCategories = await apiService.GetAsync<SportsDTO.SportGenderCategories>(url);
    }


    //  Sport Category Methods

    private void ClearFieldsForSportCategory()
    {
        _selectedSportCategoryValue = null;
        _sportCategoryValue = null;
    }

    private async Task ConfirmAddSportCategoryAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm addition of sport category {_sportCategoryValue}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await AddSportCategoryAsync();
            ClearFieldsForSportCategory();
            await GetSportCategoriesAsync();
        }
    }

    private async Task ConfirmUpdateSportCategoryAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm update for sport category {_selectedSportCategoryValue?.Category}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await UpdateSportCategoryAsync();
            ClearFieldsForSportCategory();
            await GetSportCategoriesAsync();
        }
    }

    private async Task ConfirmDeleteSportCategoryAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm deletion of sport category {_selectedSportCategoryValue?.Category}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await DeleteSportCategoryAsync();
            ClearFieldsForSportCategory();
            await GetSportCategoriesAsync();
        }
    }

    private async Task AddSportCategoryAsync()
    {
        var addSchool = new SportsDTO.SportCategories
        {
            Category = _sportCategoryValue,
        };

        string url = "/Sports/Categories";
        var success = await apiService.PostAsync(url, addSchool);

        if (success)
        {
            Snackbar.Add($"Sport category {_sportCategoryValue} added successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Failed to add sport category {_sportCategoryValue}", Severity.Error);
        }
    }

    private async Task UpdateSportCategoryAsync()
    {
        if (_selectedSportCategoryValue?.ID == 0) return;

        var updateSchool = new SportsDTO.SportCategories
        {
            ID = _selectedSportCategoryValue!.ID,
            Category = _selectedSportCategoryValue?.Category
        };

        string url = $"/Sports/Categories/{_selectedSportCategoryValue?.ID}";

        var success = await apiService.PutAsync(url, updateSchool);

        if (success)
        {
            Snackbar.Add($"Sport category {_selectedSportCategoryValue?.Category} updated successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error updating sport category {_selectedSportCategoryValue?.Category}.", Severity.Error);
        }
    }

    private async Task DeleteSportCategoryAsync()
    {
        if (_selectedSportCategoryValue?.ID == 0) return;

        string url = $"/Sports/Categories/{_selectedSportCategoryValue?.ID}";

        var success = await apiService.DeleteAsync(url);

        if (success)
        {
            Snackbar.Add($"Sport category {_selectedSportCategoryValue?.Category} deleted successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error deleting sport category {_selectedSportCategoryValue?.Category}.", Severity.Error);
        }
    }


    //  Sport Gender Category Methods

    private void ClearFieldsForSportGenderCategory()
    {
        _selectedSportGenderCategoryValue = null;
        _sportGenderCategoryValue = null;
    }

    private async Task ConfirmAddSportGenderCategoryAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm addition of sport gender category {_sportGenderCategoryValue}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await AddSportGenderCategoryAsync();
            ClearFieldsForSportGenderCategory();
            await GetSportGenderCategoriesAsync();
        }
    }

    private async Task ConfirmUpdateSportGenderCategoryAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm update for sport gender category {_selectedSportGenderCategoryValue?.Gender}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await UpdateSportGenderCategoryAsync();
            ClearFieldsForSportGenderCategory();
            await GetSportGenderCategoriesAsync();
        }
    }

    private async Task ConfirmDeleteSportGenderCategoryAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm deletion of sport gender category {_selectedSportGenderCategoryValue?.Gender}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await DeleteSportGenderCategoryAsync();
            ClearFieldsForSportGenderCategory();
            await GetSportGenderCategoriesAsync();
        }
    }

    private async Task AddSportGenderCategoryAsync()
    {
        var addGenderCategory = new SportsDTO.SportGenderCategories
        {
            Gender = _sportGenderCategoryValue,
        };

        string url = "/Sports/GenderCategories";
        var success = await apiService.PostAsync(url, addGenderCategory);

        if (success)
        {
            Snackbar.Add($"Sport gender category {_sportGenderCategoryValue} added successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Failed to add sport gender category {_sportGenderCategoryValue}", Severity.Error);
        }
    }

    private async Task UpdateSportGenderCategoryAsync()
    {
        if (_selectedSportGenderCategoryValue?.ID == 0) return;

        var updateSchool = new SportsDTO.SportGenderCategories
        {
            ID = _selectedSportGenderCategoryValue!.ID,
            Gender = _selectedSportGenderCategoryValue?.Gender
        };

        string url = $"/Sports/GenderCategories/{_selectedSportGenderCategoryValue?.ID}";

        var success = await apiService.PutAsync(url, updateSchool);

        if (success)
        {
            Snackbar.Add($"Sport gender category {_selectedSportGenderCategoryValue?.Gender} updated successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error updating sport gender category {_selectedSportGenderCategoryValue?.Gender}.", Severity.Error);
        }
    }

    private async Task DeleteSportGenderCategoryAsync()
    {
        if (_selectedSportGenderCategoryValue?.ID == 0) return;

        string url = $"/Sports/GenderCategories/{_selectedSportGenderCategoryValue?.ID}";

        var success = await apiService.DeleteAsync(url);

        if (success)
        {
            Snackbar.Add($"Sport gender category {_selectedSportGenderCategoryValue?.Gender} deleted successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error deleting sport gender category {_selectedSportGenderCategoryValue?.Gender}.", Severity.Error);
        }
    }
}
