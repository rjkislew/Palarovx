@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" >@_dialogHeader</MudText>
        <MudDivider Class="mb-5" />
        <MudStack Row>
            <MudTextField @bind-Value="_addressValue" Immediate Margin="Margin.Dense" Label="Address" ShrinkLabel Variant="Variant.Outlined" Clearable></MudTextField>
            <MudTextField @bind-Value="_venueValue" Immediate Margin="Margin.Dense" Label="Venue" ShrinkLabel Variant="Variant.Outlined" Clearable></MudTextField>
        </MudStack>
        <MudStack Row>
            <MudTextField T="decimal?" @bind-Value="_latitudeValue" Immediate Margin="Margin.Dense" Label="Latitude" ShrinkLabel Variant="Variant.Outlined" Clearable></MudTextField>
            <MudTextField T="decimal?" @bind-Value="_longitudeValue" Immediate Margin="Margin.Dense" Label="Longitude" ShrinkLabel Variant="Variant.Outlined" Clearable></MudTextField>
        </MudStack>
        <MudDivider Class="mt-10 mb-2" />
        <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%" >
            <MudButton Style="text-transform: none" Color="Color.Error" DropShadow="false" OnClick="ConfirmDeleteVenueAsync">Delete</MudButton>
            <MudStack Row Justify="Justify.SpaceBetween">
                <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                <MudButton Style="text-transform: none" Color="Color.Success" DropShadow="false" OnClick="ConfirmUpdateVenueAsync" Disabled="_editVenueButtonDisabled">Update</MudButton>
            </MudStack>
        </MudStack>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmDeleteVenueAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm deletion of stream service?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteVenueAsync();
            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    private async Task ConfirmUpdateVenueAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm changes of stream service?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await UpdateVenueAsync();
            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    [Parameter]
    public int selectedVenueID { get; set; }

    private string? _dialogHeader;
    private string? _addressValue;
    private string? _venueValue;
    private decimal? _latitudeValue;
    private decimal? _longitudeValue;
    private bool _editVenueButtonDisabled =>
    string.IsNullOrEmpty(_addressValue) ||
    string.IsNullOrEmpty(_venueValue) ||
    _latitudeValue == null ||
    _longitudeValue == null;

    public class EventsDTO
    {
        public class EventVenues
        {
            public int ID { get; set; }
            public string? Address { get; set; }
            public string? Venue { get; set; }
            public decimal? Latitude { get; set; }
            public decimal? Longitude { get; set; }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetVenuesAsync(selectedVenueID);
    }

    private async Task GetVenuesAsync(int? ID)
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Venues/{ID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            string responseStream = await httpResponse.Content.ReadAsStringAsync();
            Console.WriteLine(responseStream);
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var eventVenueDetails = JsonSerializer.Deserialize<EventsDTO.EventVenues>(responseStream, options);

            if (eventVenueDetails != null)
            {
                // Title
                _dialogHeader = $"Update: {eventVenueDetails.Venue} - ({eventVenueDetails.Address})";

                // Data
                _addressValue = eventVenueDetails.Address;
                _venueValue= eventVenueDetails.Venue;
                _latitudeValue= eventVenueDetails.Latitude;
                _longitudeValue= eventVenueDetails.Longitude;

            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task UpdateVenueAsync()
    {
        try
        {
            if (selectedVenueID == 0) return;

            var updatedStream = new EventsDTO.EventVenues
                {
                    ID = selectedVenueID,
                    Address = _addressValue,
                    Venue = _addressValue,
                    Latitude = _latitudeValue,
                    Longitude = _longitudeValue
                };

            string url = $"{apiService.Palaro2026API}/Events/Venues/{selectedVenueID}";
            var content = new StringContent(JsonSerializer.Serialize(updatedStream), Encoding.UTF8, "application/json");

            HttpResponseMessage response = await httpClient.PutAsync(url, content);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("Stream updated successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error updating stream: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteVenueAsync()
    {
        try
        {
            if (selectedVenueID == 0) return;

            string url = $"{apiService.Palaro2026API}/Events/Venues/{selectedVenueID}";

            HttpResponseMessage response = await httpClient.DeleteAsync(url);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("Stream deleted successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error deleting stream: {ex.Message}", Severity.Error);
        }
    }
}
