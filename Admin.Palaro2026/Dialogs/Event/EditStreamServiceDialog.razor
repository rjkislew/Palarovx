@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded != null)
{
    <MudDialog>
        <DialogContent>
            <MudStack Row>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Edit" />
                <MudText Typo="Typo.body2">@_dialogHeader</MudText>
            </MudStack>
            <MudDivider Class="mt-2 mb-5" />
            <MudGrid Spacing="0">
                <MudItem xs="12">
                    <MudTextField @bind-Value="_streamServiceValue" Margin="Margin.Dense" Label="Stream Service" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_streamURLValue" Margin="Margin.Dense" Label="URL" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                <MudButton Style="text-transform: none" Color="Color.Error" DropShadow="false" OnClick="ConfirmDeleteStreamAsync">Delete</MudButton>
                <MudStack Row Justify="Justify.SpaceBetween">
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="ConfirmUpdateStreamAsync">Update</MudButton>
                </MudStack>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    // Passed data from page
    [Parameter]
    public int SelectedStreamID { get; set; }

    // JSON storage
    private List<EventsDTO.EventStreams>? _eventStream;

    // Variables
    private string? _dialogHeader;
    private string? _streamServiceValue;
    private string? _streamURLValue;

    // Disable addition button if values are empty
    private bool _editVenueButtonDisabled =>
    string.IsNullOrEmpty(_streamServiceValue) ||
    string.IsNullOrEmpty(_streamURLValue);

    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class EventsDTO
    {
        public class EventStreams
        {
            public int ID { get; set; }
            public string? StreamService { get; set; }
            public string? StreamURL { get; set; }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetEventStreamsAsync();

        if (_eventStream?.Any() == true)
        {
            _isLoaded = true;
        }
    }

    private async Task GetEventStreamsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/StreamServices?id={SelectedStreamID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventStream = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventStreams>>(responseStream, options);

            if (_eventStream != null)
            {
                var selectedEventStream = _eventStream.First();
                // Title
                _dialogHeader = selectedEventStream.StreamService;

                // Content
                _streamServiceValue = selectedEventStream.StreamService;
                _streamURLValue = selectedEventStream.StreamURL;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Dialog Actions
    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmDeleteStreamAsync()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small, // Increase width slightly
                CloseOnEscapeKey = true // Allow closing with Esc
            };
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm deletion of stream service?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await DeleteStreamAsync();
            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    private async Task ConfirmUpdateStreamAsync()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small, // Increase width slightly
                CloseOnEscapeKey = true // Allow closing with Esc
            };
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm changes of stream service?",
            yesText: "Yes",
            options: options);

        if (result == true)
        {
            await UpdateStreamAsync();
            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    // Update Stream
    private async Task UpdateStreamAsync()
    {
        try
        {
            if (SelectedStreamID == 0) return;

            var updatedStream = new EventsDTO.EventStreams
                {
                    ID = SelectedStreamID,
                    StreamService = _streamServiceValue,
                    StreamURL = _streamURLValue
                };

            string url = $"{apiService.Palaro2026API}/Events/StreamServices /{SelectedStreamID}";
            var content = new StringContent(JsonSerializer.Serialize(updatedStream), Encoding.UTF8, "application/json");

            HttpResponseMessage response = await httpClient.PutAsync(url, content);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("Stream updated successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error updating stream: {ex.Message}", Severity.Error);
        }
    }

    // Delete Stream
    private async Task DeleteStreamAsync()
    {
        try
        {
            if (SelectedStreamID == 0) return;

            string url = $"{apiService.Palaro2026API}/Events/StreamServices/{SelectedStreamID}";

            HttpResponseMessage response = await httpClient.DeleteAsync(url);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("Stream deleted successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error deleting stream: {ex.Message}", Severity.Error);
        }
    }
}
