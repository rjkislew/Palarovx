@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="2">

                <!-- Input Fields -->
                <!-- Event Stage -->
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="_selectedEventStagesIDValue" Margin="Margin.Dense" Label="Event Stage"
                               ShrinkLabel Variant="Variant.Outlined" Clearable T="int?">
                        <MudVirtualize Items="_eventStages" Context="stage">
                            <MudSelectItem T="int?" Value="stage.ID">@stage.Stage</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>

                <!-- Sport -->
                <MudItem xs="12">
                    <MudText>Sport</MudText>
                    <MudDivider />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="_selectedSportCategoryIDValue" Margin="Margin.Dense" Label="Category"
                               ShrinkLabel Variant="Variant.Outlined" Clearable T="int?"
                               T="int?" SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedSportIDValue = null; _selectedSchoolLevelIDValue = null; _selectedSportGenderCategoryIDValue = null; _selectedSportSubcategoryIDValue = null; await GetSportsAsync(); }))">
                        <MudVirtualize Items="_sportCategories" Context="category">
                            <MudSelectItem T="int?" Value="category.ID">@category.Category</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="_selectedSportIDValue" Margin="Margin.Dense" Label="Sport"
                               ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSportCategoryIDValue == null" T="int?"
                               SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedSchoolLevelIDValue = null; _selectedSportGenderCategoryIDValue = null; _selectedSportSubcategoryIDValue = null; }))">
                        <MudVirtualize Items="_sports" Context="sport">
                            <MudSelectItem T="int?" Value="sport.ID">@sport.Sport</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="_selectedSchoolLevelIDValue" Margin="Margin.Dense" Label="School Level"
                               ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSportIDValue == null" T="int?"
                               SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedSportGenderCategoryIDValue = null; _selectedSportSubcategoryIDValue = null; }))">
                        <MudVirtualize Items="_schoolLevels" Context="schoolLevel">
                            <MudSelectItem T="int?" Value="schoolLevel.ID">@schoolLevel.Level</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="_selectedSportGenderCategoryIDValue" Margin="Margin.Dense" Label="Gender"
                               ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolLevelIDValue == null" T="int?"
                               SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedSportSubcategoryIDValue = null; await GetSportSubCategoriesAsync(); }))">
                        <MudVirtualize Items="_sportGenderCategories" Context="gender">
                            <MudSelectItem T="int?" Value="gender.ID">@gender.Gender</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12" md="8">
                    <MudSelect @bind-Value="_selectedSportSubcategoryIDValue" Margin="Margin.Dense" Label="Subcategory"
                               HelperText="@((_sportSubcategories?.Any() != true && _selectedSchoolLevelIDValue != null && _selectedSportGenderCategoryIDValue != null) ? "No subcategory available for this gender or school level." : null)"
                               ShrinkLabel Variant="Variant.Outlined" Clearable
                               Disabled="@(!_sportSubcategories?.Any() == true || _selectedSchoolLevelIDValue == null || _selectedSportGenderCategoryIDValue == null)">
                        <MudVirtualize Items="_sportSubcategories" Context="subCategory">
                            <MudSelectItem T="int?" Value="@subCategory.ID">@subCategory.Subcategory</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>

                <!-- Schedule and Venue -->
                <MudItem xs="12" Class="mt-5">
                    <MudText>Schedule and Venue</MudText>
                    <MudDivider />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="_selectedEventVenueIDValue" Margin="Margin.Dense" Label="Venue"
                               ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_eventVenues" Context="venue">
                            <MudSelectItem T="int?" Value="venue.ID">@venue.Venue, @venue.Address</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudDatePicker @bind-Date="_selectedDateValue" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Date"
                                   Placeholder="&#8205;" Clearable PickerVariant="PickerVariant.Dialog" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTimePicker @bind-Time="_selectedTimeValue" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Time" AmPm="true"
                                   Placeholder="&#8205;" Clearable PickerVariant="PickerVariant.Dialog" />
                </MudItem>
                <MudItem xs="12" Class="mt-5">
                    <MudText>Streaming Service</MudText>
                    <MudDivider />
                </MudItem>

                <!-- Stream -->
                <MudItem xs="12" md="2">
                    <MudCheckBox Value="_isOnStream" Size="Size.Small" T="bool?" Color="@Color.Secondary"
                                 ValueChanged="@(value => { _isOnStream = value; _selectedEventStreamServiceIDValue = null; _selectedEventStreamIDValue = null;})">
                        On Stream
                    </MudCheckBox>
                </MudItem>
                <MudItem xs="12" sm="6" md="5">
                    <MudSelect @bind-Value="_selectedEventStreamServiceIDValue" Margin="Margin.Dense" Disabled="_isOnStream == false"
                               Label="Stream Service" ShrinkLabel Variant="Variant.Outlined" Clearable T="int?"
                               SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedEventStreamIDValue = null; await GetStreamsAsync(); }))">
                        <MudVirtualize Items="_eventStreamServices" Context="streamService">
                            <MudSelectItem T="int?" Value="streamService.ID">@streamService.StreamService</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="5">
                    <MudSelect @bind-Value="_selectedEventStreamIDValue" Margin="Margin.Dense"
                               HelperText="@((_eventStreams?.Any() != true && _selectedEventStreamServiceIDValue != null) ? "No stream available for this streaming service." : null)"
                               Disabled="@(_selectedEventStreamServiceIDValue == null || (_eventStreams?.Any() != true && _selectedEventStreamServiceIDValue != null))"
                               Label="Stream" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_eventStreams" Context="stream">
                            <MudSelectItem T="int?" Value="@stream.ID">@stream.StreamTitle</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>

                <!-- Clerk Designate -->
                <MudItem xs="12" Class="mt-5">
                    <MudText>Designate</MudText>
                    <MudDivider />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="_selectedUserIDValue" Margin="Margin.Dense" Label="Tally Clerk" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_userLists" Context="user">
                            <MudSelectItem T="string" Value="user.ID">@user.FirstName @user.LastName</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Style="width: 100%" Justify="Justify.SpaceBetween">
                <MudButton Style="text-transform: none" Color="Color.Error" DropShadow="false" OnClick="ConfirmDeleteEventAsync">Delete</MudButton>
                <MudStack Row Justify="Justify.SpaceBetween">
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="ConfirmUpdateEventAsync" Disabled="_editEventButtonDisabled">Update</MudButton>
                </MudStack>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // Passed data from page
    [Parameter]
    public string? SelectedEventID { get; set; }


    // Variables
    private static readonly Random random = new(); // for random ID string generation
    private List<EventsDTO.EventStages>? _eventStages;
    private List<EventsDTO.Events>? _events;
    private List<SportsDTO.SportCategories>? _sportCategories;
    private List<SportsDTO.Sports>? _sports;
    private List<SportsDTO.SportGenderCategories>? _sportGenderCategories;
    private List<SchoolsDTO.SchoolLevels>? _schoolLevels;
    private List<SportsDTO.SportSubcategories>? _sportSubcategories;
    private List<SchoolsDTO.SchoolRegions>? _schoolRegions;
    private List<EventsDTO.EventVenues>? _eventVenues;
    private List<EventsDTO.EventStreamServices>? _eventStreamServices;
    private List<EventsDTO.EventStreams>? _eventStreams;
    private List<UsersDTO.UserList>? _userLists;


    // Selected variable storage
    private int? _selectedEventStagesIDValue;
    private int? _selectedSportCategoryIDValue;
    private int? _selectedSportIDValue;
    private int? _selectedSportGenderCategoryIDValue;
    private int? _selectedSchoolLevelIDValue;
    private int? _selectedSportSubcategoryIDValue;
    private int? _selectedEventVenueIDValue;
    private DateTime? _selectedDateValue;
    private TimeSpan? _selectedTimeValue;
    private bool? _isOnStream = false;
    private int? _selectedEventStreamServiceIDValue;
    private int? _selectedEventStreamIDValue;
    private string? _selectedUserIDValue;
    private bool? _isFinished = false;
    private byte[]? _attachementValue = null;
    private bool? _isArchived = false;
    private bool? _isDeleted = false;
    private int[]? _versusTeamsIDs;
    private List<int?> selectedRegions { get; set; } = new() { null };

    private void AddTeam()
    {
        selectedRegions.Add(null);
    }

    private void RemoveTeam(int index)
    {
        if (index >= 0 && index < selectedRegions.Count)
        {
            selectedRegions.RemoveAt(index);
        }
    }


    // Disable addition button if values are empty
    private bool _editEventButtonDisabled =>
    !_selectedSportCategoryIDValue.HasValue ||
    !_selectedSportIDValue.HasValue ||
    !_selectedSportGenderCategoryIDValue.HasValue ||
    !_selectedSchoolLevelIDValue.HasValue ||
    !_selectedSportSubcategoryIDValue.HasValue ||
    !_selectedEventVenueIDValue.HasValue ||
    !_selectedDateValue.HasValue ||
    !_selectedTimeValue.HasValue ||
    string.IsNullOrEmpty(_selectedUserIDValue) ||
    !_isOnStream.HasValue;

    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class EventsDTO
    {
        public class Events
        {
            public string ID { get; set; } = null!;
            public int? EventStageID { get; set; }
            public int? SportSubcategoryID { get; set; }
            public int? EventVenuesID { get; set; }
            public DateTime? Date { get; set; }
            public TimeSpan? Time { get; set; }
            public bool? OnStream { get; set; }
            public int? EventStreamID { get; set; }
            public bool? IsFinished { get; set; }
            public byte[]? Attachement { get; set; }
            public bool? Archived { get; set; }
            public bool? Deleted { get; set; }
            public string? UserID { get; set; }
        }

        public class EventStages
        {
            public int ID { get; set; }
            public string? Stage { get; set; }
        }

        public class EventStreamServices
        {
            public int ID { get; set; }
            public string? StreamService { get; set; }
        }

        public class EventStreams
        {
            public int ID { get; set; }
            public int? EventStreamServiceID { get; set; }
            public string? StreamTitle { get; set; }
            public string? StreamURL { get; set; }
            public DateTime? StreamDate { get; set; }
        }

        public class EventVenues
        {
            public int ID { get; set; }
            public string? Address { get; set; }
            public string? Venue { get; set; }
            public decimal? Latitude { get; set; }
            public decimal? Longitude { get; set; }
        }

        public class EventVersus
        {
            public int ID { get; set; }
            public string? Score { get; set; }
            public int? SchoolRegionID { get; set; }
            public string? EventID { get; set; }
            public DateTime? RecentUpdateAt { get; set; }
        }
    }

    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }

        public class SportGenderCategories
        {
            public int ID { get; set; }
            public string? Gender { get; set; }
        }
    }

    public class SchoolsDTO
    {
        public class Schools
        {
            public int ID { get; set; }
            public string? School { get; set; }
            public int? SchoolDivisionID { get; set; }
            public int? SchoolLevelsID { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }

        public class SchoolDivisions
        {
            public int ID { get; set; }
            public string? Division { get; set; }
            public int? SchoolRegionID { get; set; }
        }

        public class SchoolLevels
        {
            public int ID { get; set; }
            public string? Level { get; set; }
        }
    }

    public class UsersDTO
    {
        public class UserList
        {
            public string ID { get; set; } = null!;
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public string? Role { get; set; }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetEventsOnDialogOpenAsync();
        await GetEventVenuesAsync();
        await GetStreamsOnDialogOpenAsync();
        await GetUsersAsync();
        await GeEventTeamsAsync();

        await GetEventStagesAsync();
        await GetSportSubCategoriesAsync();
        await GetGenderCategoriesAsync();
        await GetSchoolLevelsAsync();
        await GetSportsAsync();
        await GetSportCategoriesAsync();
        await GetStreamServicesAsync();
        await GetStreamsAsync();

        _isLoaded = true;
    }

    private async Task GetEventsOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events?id={SelectedEventID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _events = await JsonSerializer.DeserializeAsync<List<EventsDTO.Events>>(responseStream, options);

            if (_events != null)
            {
                var eventDetail = _events.First();

                SelectedEventID = eventDetail.ID;
                _selectedEventStagesIDValue = eventDetail.EventStageID;
                _selectedSportSubcategoryIDValue = eventDetail.SportSubcategoryID;
                _selectedDateValue = eventDetail.Date;
                _selectedTimeValue = eventDetail.Time;
                _selectedEventVenueIDValue = eventDetail.EventVenuesID;
                _isOnStream = eventDetail.OnStream;
                _selectedEventStreamIDValue = eventDetail.EventStreamID;
                _isFinished = eventDetail.IsFinished;
                _attachementValue = eventDetail.Attachement;
                _isArchived = eventDetail.Archived;
                _isDeleted = eventDetail.Deleted;
                _selectedUserIDValue = eventDetail.UserID;
            }

            await GetSportSubCategoriesOnDialogOpenAsync();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportSubCategoriesOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Subcategories?id={_selectedSportSubcategoryIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var _sportSubcategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportSubcategories>>(responseStream, options);

            if (_sportSubcategories != null)
            {
                var sportSubcategory = _sportSubcategories.First();

                _selectedSportIDValue = sportSubcategory.SportID;
                _selectedSportGenderCategoryIDValue = sportSubcategory.SportGenderCategoryID;
                _selectedSchoolLevelIDValue = sportSubcategory.SchoolLevelID;
            }

            await GetSportsOnDialogOpenAsync();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportsOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports?id={_selectedSportIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var sports = await JsonSerializer.DeserializeAsync<List<SportsDTO.Sports>>(responseStream, options);

            if (sports != null)
            {
                var sport = sports.First();

                _selectedSportCategoryIDValue = sport.SportCategoryID;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetStreamsOnDialogOpenAsync()
    {
        try
        {
            if (_selectedEventStreamIDValue != null)
            {
                string url = $"{apiService.Palaro2026API}/Events/StreamService/Streams?ID={_selectedEventStreamIDValue}";

                HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
                httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

                using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var eventStreams = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventStreams>>(responseStream, options);

                if (eventStreams != null)
                {
                    var eventStream = eventStreams.First();

                    _selectedEventStreamServiceIDValue = eventStream.EventStreamServiceID;
                }
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GeEventTeamsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/VersusTeams?eventID={SelectedEventID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var eventVersusTeams = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventVersus>>(responseStream, options);
            Console.WriteLine(eventVersusTeams);

            if (eventVersusTeams != null)
            {
                _versusTeamsIDs = eventVersusTeams.Select(s => s.ID).Distinct().ToArray();
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // -----

    private async Task GetEventStagesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Stages";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventStages = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventStages>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportCategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Categories";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports?sportCategoryID={_selectedSportCategoryIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sports = await JsonSerializer.DeserializeAsync<List<SportsDTO.Sports>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetGenderCategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/GenderCategories";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportGenderCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportGenderCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolLevelsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Levels";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolLevels = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.SchoolLevels>>(responseStream, options);

            await GetSportSubCategoriesAsync();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportSubCategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Subcategories?sportID={_selectedSportIDValue}&schoolLevelID={_selectedSchoolLevelIDValue}&sportGenderCategoryID={_selectedSportGenderCategoryIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportSubcategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportSubcategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetStreamServicesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/StreamServices";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventStreamServices = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventStreamServices>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetStreamsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/StreamService/Streams?eventStreamServiceID={_selectedEventStreamServiceIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventStreams = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventStreams>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetEventVenuesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Events/Venues";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _eventVenues = await JsonSerializer.DeserializeAsync<List<EventsDTO.EventVenues>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetUsersAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Users/TallyClerkList";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _userLists = await JsonSerializer.DeserializeAsync<List<UsersDTO.UserList>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }


    // Dialog Actions
    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmDeleteEventAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm deletion this event?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteVersusTeamPlayersByVersusTeamIDAsync();
            await DeleteVersusTeamsAsync();
            await DeleteEventAsync();
            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    private async Task ConfirmUpdateEventAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm changes of school?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await UpdateEventAsync();

            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    // Update Player profile
    private async Task UpdateEventAsync()
    {
        try
        {
            if (SelectedEventID == null) return;

            var updateEventStream = new EventsDTO.Events
                {
                    ID = SelectedEventID!,
                    EventStageID = _selectedEventStagesIDValue,
                    SportSubcategoryID = _selectedSportSubcategoryIDValue,
                    EventVenuesID = _selectedEventVenueIDValue,
                    Date = _selectedDateValue,
                    Time = _selectedTimeValue,
                    OnStream = _isOnStream,
                    EventStreamID = _selectedEventStreamIDValue,
                    IsFinished = false,
                    Attachement = null,
                    Archived = false,
                    Deleted = false,
                    UserID = _selectedUserIDValue
                };

            string url = $"{apiService.Palaro2026API}/Events/{SelectedEventID}";
            var content = new StringContent(JsonSerializer.Serialize(updateEventStream), Encoding.UTF8, "application/json");

            HttpResponseMessage response = await httpClient.PutAsync(url, content);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("Player details updated successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error updating player: {ex.Message}", Severity.Error);
        }
    }

    // Delete Player profile
    private async Task DeleteEventAsync()
    {
        try
        {
            if (SelectedEventID == null) return;

            string url = $"{apiService.Palaro2026API}/Events/{SelectedEventID}";

            HttpResponseMessage response = await httpClient.DeleteAsync(url);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("Event deleted successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error deleting event: {ex.Message}", Severity.Error);
        }
    }

    // Delete Sport event versus team players by event versus team ID
    private async Task DeleteVersusTeamPlayersByVersusTeamIDAsync()
    {
        try
        {
            if (_versusTeamsIDs == null || _versusTeamsIDs.Length == 0) return;

            foreach (var versusTeamID in _versusTeamsIDs)
            {
                string url = $"{apiService.Palaro2026API}/Events/VersusTeams/Players/ByEventVersusTeam/{versusTeamID}";

                HttpResponseMessage response = await httpClient.DeleteAsync(url);
                response.EnsureSuccessStatusCode();
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error deleting player sport coach: {ex.Message}", Severity.Error);
        }
    }

    // Delete versus teams
    private async Task DeleteVersusTeamsAsync()
    {
        try
        {
            if (_versusTeamsIDs == null || _versusTeamsIDs.Length == 0) return;

            foreach (var versusTeamID in _versusTeamsIDs)
            {
                string url = $"{apiService.Palaro2026API}/Events/VersusTeams/{versusTeamID}";

                HttpResponseMessage response = await httpClient.DeleteAsync(url);
                response.EnsureSuccessStatusCode();
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error deleting player sport events: {ex.Message}", Severity.Error);
        }
    }
}
