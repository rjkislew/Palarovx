@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog>
        <DialogContent>
            <MudStack Row>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Edit" />
                <MudText Typo="Typo.body2">@_dialogHeader</MudText>
            </MudStack>
            <MudDivider Class="mt-2 mb-5" />
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_firstnameValue" Immediate Margin="Margin.Dense" Label="Firstname" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_lastnameValue" Immediate Margin="Margin.Dense" Label="Lastname" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect @bind-Value="_selectedSchoolRegionIDValue" Margin="Margin.Dense" Label="Region" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_schoolRegions" Context="region">
                            <MudSelectItem T="int?" Value="region.ID">@region.Region (@region.Abbreviation)</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                <MudButton Style="text-transform: none" Color="Color.Error" DropShadow="false" OnClick="ConfirmDeleteCoachProfileAsync">Delete</MudButton>
                <MudStack Row Justify="Justify.SpaceBetween">
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="ConfirmUpdateCoachProfileAsync" Disabled="_editCoachButtonDisabled">Update</MudButton>
                </MudStack>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    // Passed data from page
    [Parameter]
    public string? selectedCoachID { get; set; }

    // JSON storage
    private List<ProfilesDTO.ProfileCoaches>? _profileCoaches;
    private List<SchoolDTO.SchoolRegions>? _schoolRegions;

    // Variables
    private string? _dialogHeader;
    private string? _firstnameValue;
    private string? _lastnameValue;
    private int? _selectedSchoolRegionIDValue;

    // Disable addition button if values are empty
    private bool _editCoachButtonDisabled =>
    string.IsNullOrEmpty(_firstnameValue) ||
    string.IsNullOrEmpty(_lastnameValue) ||
    !_selectedSchoolRegionIDValue.HasValue;

    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class ProfilesDTO
    {
        public class ProfileCoaches
        {
            public string? ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolRegionID { get; set; }
        }
    }

    public class SchoolDTO
    {
        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetProfileCoachOnDialogOpenAsync(selectedCoachID);
        await GetSchoolRegionsOnDialogOpenAsync();

        if (_profileCoaches?.Any() == true
        && _schoolRegions?.Any() == true)
        {
            _isLoaded = true;
        }
    }

    private async Task GetProfileCoachOnDialogOpenAsync(string? profileCoachID)
    {
        string url = $"/Profiles/Coach?id={profileCoachID}";

        _profileCoaches = await apiService.GetAsync<ProfilesDTO.ProfileCoaches>(url);

        if (_profileCoaches != null)
        {
            var selectedCoach = _profileCoaches.First();
            // Title
            _dialogHeader = $"{selectedCoach.FirstName} {selectedCoach.LastName}";

            // Data
            _selectedSchoolRegionIDValue = selectedCoach.SchoolRegionID;
            _firstnameValue = selectedCoach.FirstName;
            _lastnameValue = selectedCoach.LastName;
        }
    }

    private async Task GetSchoolRegionsOnDialogOpenAsync()
    {
        string url = "/Schools/Regions";

        _schoolRegions = await apiService.GetAsync<SchoolDTO.SchoolRegions>(url);
    }

    // Dialog Actions
    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmDeleteCoachProfileAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm deletion of coach {_dialogHeader}?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteProfileCoachAsync();

            MudDialog?.Close(DialogResult.Ok(true)); 
        }
    }

    private async Task ConfirmUpdateCoachProfileAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm changes of coach {_dialogHeader}?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await UpdateCoachProfileAsync();

            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    // Update Coach profile
    private async Task UpdateCoachProfileAsync()
    {
        var updateCoachProfile = new ProfilesDTO.ProfileCoaches
            {
                ID = selectedCoachID,
                FirstName = _firstnameValue,
                LastName = _lastnameValue,
                SchoolRegionID = _selectedSchoolRegionIDValue
            };

        string url = $"/Profiles/Coach/{selectedCoachID}";
        var success = await apiService.PutAsync(url, updateCoachProfile);

        if (success)
        {
            Snackbar.Add($"Coach {_dialogHeader} has been updated successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error updating coach {_dialogHeader}.", Severity.Error);
        }
    }

    // Delete Coach profile
    private async Task DeleteProfileCoachAsync()
    {
        string url = $"/Profiles/Coach/{selectedCoachID}";

        var success = await apiService.DeleteAsync(url);

        if (success)
        {
            Snackbar.Add($"Coach {_dialogHeader} has been deleted successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error deleting coach {_dialogHeader}.", Severity.Error);
        }
    }
}
