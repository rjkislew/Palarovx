@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog Style="overflow: hidden">
        <DialogContent>
            <MudStack Row>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Edit" />
                <MudText Typo="Typo.body2">Sport Event for @_dialogHeader</MudText>
            </MudStack>
            <MudDivider Class="mb-5" />
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedGenderCategoryIDValue" Margin="Margin.Dense" Label="Gender Category"
                               ShrinkLabel Variant="Variant.Outlined" Clearable OnClearButtonClick="@(() => _selectedSportSubcategoryIDValue = null)"
                               T="int?" SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedSportSubcategoryIDValue = null; await GetSportSubcategoryAsync(); }))">
                        <MudVirtualize Items="_sportGenderCategories" Context="gender">
                            <MudSelectItem T="int?" Value="gender.ID">@gender.Gender</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                @{
                    var message = (_sportSubcategories?.Any() != true) ? "No subcategory available for this gender." : null;
                    var disabled = (_sportSubcategories?.Any() != true) ? true : false;
                }
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSportSubcategoryIDValue" Margin="Margin.Dense" HelperText="@($"{message}")" Label="Sport Subcategory" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedGenderCategoryIDValue == null || disabled">
                        <MudVirtualize Items="_sportSubcategories" Context="subCategory">
                            <MudSelectItem T="int?" Value="subCategory.ID">@(subCategory.Subcategory ?? "No Subcategory")</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudSelect @bind-SelectedValues="_selectedCoachIDValues" ToStringFunc="@(id => _profileCoaches?.FirstOrDefault(c => c.ID == id) is { } coach ? $"{coach.FirstName} {coach.LastName}" : string.Empty)"
                               MultiSelection="true" Margin="Margin.Dense" Label="Coach" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_profileCoaches" Context="coach">
                            <MudSelectItem Value="coach.ID">@coach.FirstName @coach.LastName</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                <MudButton Style="text-transform: none" Color="Color.Error" DropShadow="false" OnClick="ConfirmDeletePlayerSportEditEventAsync">Delete</MudButton>
                <MudStack Row Justify="Justify.SpaceBetween">
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="ConfirmUpdatePlayerSportEditEventAsync" Disabled="_editPlayerSporEventButtonDisabled">Update</MudButton>
                </MudStack>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    // Passed data from page
    [Parameter]
    public int selectedPlayerSportsID { get; set; }
    [Parameter]
    public string? selectedPlayerID { get; set; }
    [Parameter]
    public int? selectedRegionID { get; set; }
    [Parameter]
    public int? selectedSportID { get; set; }
    [Parameter]
    public int? selectedSchoolLevelID { get; set; }

    // JSON storage
    private List<ProfilesDTO.ProfilePlayers>? _profilePlayers;
    private List<ProfilesDTO.ProfileCoaches>? _profileCoaches;
    private List<ProfilesDTO.ProfilePlayerSports>? _profilePlayerSports;
    private List<ProfilesDTO.ProfilePlayerSportCoaches>? _profilePlayerSportCoaches;
    private List<SportsDTO.SportSubcategories>? _sportSubcategories;
    private List<SportsDTO.SportGenderCategories>? _sportGenderCategories;

    // Variables
    private string? _dialogHeader;
    private string? _firstnameValue;
    private string? _lastnameValue;
    private int? _selectedGenderCategoryIDValue;
    private int? _selectedSportSubcategoryIDValue;
    private int? _selectedProfilePlayerSportIDValue;
    private int? _selectedProfilePlayerSportsCoachIDValue;
    private IEnumerable<string?>? _selectedCoachIDValues;

    // Disable addition button if values are empty
    private bool _editPlayerSporEventButtonDisabled =>
    string.IsNullOrEmpty(_firstnameValue) ||
    string.IsNullOrEmpty(_lastnameValue) ||
    !_selectedCoachIDValues!.Any();

    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class ProfilesDTO
    {
        public class ProfilePlayers
        {
            public string? ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolID { get; set; }
            public int? SportID { get; set; }
        }

        public class ProfilePlayerSports
        {
            public int ID { get; set; }
            public string? ProfilePlayerID { get; set; }
            public int? SportSubcategoryID { get; set; }
        }

        public class ProfilePlayerSportCoaches
        {
            public int ID { get; set; }
            public int? ProfilePlayerSportID { get; set; }
            public string? ProfileCoachID { get; set; }
        }

        public class ProfileCoaches
        {
            public string? ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolRegionID { get; set; }
        }
    }

    public class SportsDTO
    {
        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }

        public class SportGenderCategories
        {
            public int ID { get; set; }
            public string? Gender { get; set; }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetProfilePlayerOnDialogOpenAsync(selectedPlayerID);
        await GetProfilePlayerSportsOnDialogOpenAsync(selectedPlayerSportsID);
        await GetProfileCoachesOnDialogOpenAsync();
        await GetProfilePlayerSportCoachesOnDialogOpenAsync();
        await GetSportGenderCategoriesOnDialogOpenAsync();

        if (_profilePlayers?.Any() == true
        && _profilePlayerSports?.Any() == true
        && _profileCoaches?.Any() == true
        && _profilePlayerSportCoaches?.Any() == true
        && _sportGenderCategories?.Any() == true)
        {
            _isLoaded = true;
        }
    }

    private async Task GetProfilePlayerOnDialogOpenAsync(string? profilePlayerID)
    {
        try
        {
            string url = $"/Profiles/Player?id={profilePlayerID}";
            //mine
            _profilePlayers = await apiService.GetAsync<ProfilesDTO.ProfilePlayers>(url);

            // HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            // httpResponse.EnsureSuccessStatusCode();

            // using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            // var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            // _profilePlayers = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfilePlayers>>(responseStream, options);

            if (_profilePlayers != null)
            {
                var selectedCoach = _profilePlayers.First();
                // Title
                _dialogHeader = $"{selectedCoach.FirstName} {selectedCoach.LastName}";

                // Data
                _firstnameValue = selectedCoach.FirstName;
                _lastnameValue = selectedCoach.LastName;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetProfilePlayerSportsOnDialogOpenAsync(int? profilePlayerID)
    {
        try
        {
            string url = $"/Profiles/Player/Sports/?id={profilePlayerID}";
            //mine
            _profilePlayerSports = await apiService.GetAsync<ProfilesDTO.ProfilePlayerSports>(url);

            // HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            // httpResponse.EnsureSuccessStatusCode();

            // using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            // var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            // _profilePlayerSports = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfilePlayerSports>>(responseStream, options);

            if (_profilePlayerSports != null)
            {
                var profilePlayerSport = _profilePlayerSports.First();

                _selectedProfilePlayerSportIDValue = profilePlayerSport.ID;
                _selectedSportSubcategoryIDValue = profilePlayerSport.SportSubcategoryID;
            }

            await GetSportSubcategoryOnDialogOpenAsync();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetProfileCoachesOnDialogOpenAsync()
    {
        try
        {
            string url = $"/Profiles/Coach?schoolRegionID={selectedRegionID}";
            //mine
            _profileCoaches = await apiService.GetAsync<ProfilesDTO.ProfileCoaches>(url);

            // HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            // httpResponse.EnsureSuccessStatusCode();

            // using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            // var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            // _profileCoaches = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfileCoaches>>(responseStream, options);

            if (_profileCoaches != null)
            {
                var selectedCoach = _profileCoaches.First();
                // Title
                _dialogHeader = $"{selectedCoach.FirstName} {selectedCoach.LastName}";

                // Data
                _firstnameValue = selectedCoach.FirstName;
                _lastnameValue = selectedCoach.LastName;
            }

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetProfilePlayerSportCoachesOnDialogOpenAsync()
    {
        try
        {
            string url = $"/Profiles/Player/Sports/Coaches?profilePlayerSportID={_selectedProfilePlayerSportIDValue}";
            //mine
            _profilePlayerSportCoaches = await apiService.GetAsync<ProfilesDTO.ProfilePlayerSportCoaches>(url);

            // HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            // httpResponse.EnsureSuccessStatusCode();

            // using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            // var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            // _profilePlayerSportCoaches = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfilePlayerSportCoaches>>(responseStream, options);

            if (_profilePlayerSportCoaches != null && _profilePlayerSportCoaches.Any()) // Check for non-empty list
            {
                var profilePlayerSportCoach = _profilePlayerSportCoaches.First(); // safe to call First() now
                _selectedProfilePlayerSportsCoachIDValue = profilePlayerSportCoach.ID;
                _selectedCoachIDValues = _profilePlayerSportCoaches.Select(c => c.ProfileCoachID).ToList();
            }
            else
            {
                // Handle case where there are no coaches
                Console.WriteLine("No coaches found.");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportSubcategoryOnDialogOpenAsync()
    {
        try
        {
            string url = $"/Sports/Subcategories?id={_selectedSportSubcategoryIDValue}";
            //mine
            _sportSubcategories = await apiService.GetAsync<SportsDTO.SportSubcategories>(url);

            // HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            // httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            // using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            // var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            // var sportSubcategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportSubcategories>>(responseStream, options);

            if (_sportSubcategories != null)
            {
                var sportSubcategory = _sportSubcategories.First();

                _selectedGenderCategoryIDValue = sportSubcategory.SportGenderCategoryID;
                _selectedSportSubcategoryIDValue = sportSubcategory.ID;
            }
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportGenderCategoriesOnDialogOpenAsync()
    {
        try
        {
            string url = $"/Sports/GenderCategories";
            //mine
            _sportGenderCategories = await apiService.GetAsync<SportsDTO.SportGenderCategories>(url);

            // HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            // httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            // using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            // var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            // _sportGenderCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportGenderCategories>>(responseStream, options);

            await GetSportSubcategoryAsync();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportSubcategoryAsync()
    {
        try
        {
            string url = $"/Sports/Subcategories?sportID={selectedSportID}&schoolLevelID={selectedSchoolLevelID}&sportGenderCategoryID={_selectedGenderCategoryIDValue}";
            //mine
            _sportSubcategories = await apiService.GetAsync<SportsDTO.SportSubcategories>(url);

            // HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            // httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            // using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            // var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            // _sportSubcategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportSubcategories>>(responseStream, options);


            if (_sportSubcategories == null || !_sportSubcategories.Any())
            {
                _selectedSportSubcategoryIDValue = null;
            }
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Dialog Actions
    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmUpdatePlayerSportEditEventAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
                message: $"Do you confirm update of sport event for {_firstnameValue} {_lastnameValue}?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await UpdatePlayerSportEditEventAsync();

            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    private async Task ConfirmDeletePlayerSportEditEventAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm deletion of sport event for {_firstnameValue} {_lastnameValue}?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteProfilePlayerSportCoachByPlayerSportIDAsync();
            await DeleteProfilePlayerSportEventAsync();

            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    // Update player sport event after deleting the sport event coach/es
    // while aslo addding new sport event coach
    private async Task UpdatePlayerSportEditEventAsync()
    {
        try
        {
            if (selectedPlayerSportsID == 0) return;

            var updatedStream = new ProfilesDTO.ProfilePlayerSports
                {
                    ID = selectedPlayerSportsID,
                    ProfilePlayerID = selectedPlayerID,
                    SportSubcategoryID = _selectedSportSubcategoryIDValue,
                };

            // string url = $"/Profiles/Player/Sports/{selectedPlayerSportsID}";
            // var content = new StringContent(JsonSerializer.Serialize(updatedStream), Encoding.UTF8, "application/json");

            // HttpResponseMessage response = await httpClient.PutAsync(url, content);
            // response.EnsureSuccessStatusCode();

            string url = $"/Profiles/Player/Sports/{selectedPlayerSportsID}";
            var success = await apiService.PutAsync(url, updatedStream);


            if (_selectedCoachIDValues?.Any() != true)
            {
                await DeleteProfilePlayerSportCoachByPlayerSportIDAsync();
            }

            if (_selectedCoachIDValues?.Any() != false)
            {
                await UpdatePlayerSportEventCoachesAsync();
            }

            if (_selectedCoachIDValues?.Count() > 0)
            {
                // await DeleteProfilePlayerSportCoachByPlayerSportIDAsync();
                await UpdatePlayerSportEventCoachesAsync();
            }

            Snackbar.Add("Player sport event updated successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error updating player sport event: {ex.Message}", Severity.Error);
        }
    }

    private async Task PostPlayerSportCoachesAsync()
    {
        try
        {
            string url = $"/Profiles/Player/Sports/Coaches";

            var coach = _selectedCoachIDValues?.Where(id => string.IsNullOrEmpty(id)) // Ensure valid IDs
                .Select(coachID => new ProfilesDTO.ProfilePlayerSportCoaches
                    {
                        ProfileCoachID = coachID!,
                        ProfilePlayerSportID = selectedPlayerSportsID,
                    }).ToList();

            // var jsonContent = JsonSerializer.Serialize(coach);
            // var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            // HttpResponseMessage httpResponse = await httpClient.PostAsync(url, content);
            if (coach == null || coach.Count == 0) return;

            var success = await apiService.PostAsync(url, coach);

            if (!success)
            {
                Snackbar.Add("Failed to assign coaches.", Severity.Error);
            }
            //
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error posting data: {ex.Message}");
        }
    }

    //doingzzzz with mah bff
    private async Task UpdatePlayerSportEventCoachesAsync()
    {
        try
        {
            if (selectedPlayerSportsID == 0) return;

            // Always clear old coaches first
            string deleteUrl = $"/Profiles/Player/Sports/Coaches/ByPlayerSport/{selectedPlayerSportsID}";
            await apiService.DeleteAsync(deleteUrl);

            // Add the currently selected coaches
            if (_selectedCoachIDValues != null && _selectedCoachIDValues.Any())
            {
                var newCoaches = _selectedCoachIDValues.Select(coachID => new ProfilesDTO.ProfilePlayerSportCoaches
                    {
                        ProfileCoachID = coachID,
                        ProfilePlayerSportID = selectedPlayerSportsID
                    }).ToList();

                var success = await apiService.PostAsync("/Profiles/Player/Sports/Coaches", newCoaches);
                if (!success)
                {
                    Snackbar.Add("Failed to assign coaches.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating coaches: {ex.Message}", Severity.Error);
        }
    }


    ///


    // Delete Sport event and sport event coach by sport event ID
    private async Task DeleteProfilePlayerSportCoachByPlayerSportIDAsync()
    {
        try
        {
            if (selectedPlayerSportsID == 0) return;

            // string url = $"/Profiles/Player/Sports/Coaches/ByPlayerSport/{selectedPlayerSportsID}";

            // HttpResponseMessage response = await httpClient.DeleteAsync(url);
            // response.EnsureSuccessStatusCode();
            string url = $"Profiles/Player/Sports/Coaches/ByPlayerSport/{selectedPlayerSportsID}";
            var success = await apiService.DeleteAsync(url);
            if (!success)
            {
                Snackbar.Add("Failed to delete player sport coach.", Severity.Error);
            }
            //
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error deleting player sport coach: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteProfilePlayerSportEventAsync()
    {
        try
        {
            if (selectedPlayerSportsID == 0) return;

            // string url = $"/Profiles/Player/Sports/{selectedPlayerSportsID}";

            // HttpResponseMessage response = await httpClient.DeleteAsync(url);
            // response.EnsureSuccessStatusCode();

            // Snackbar.Add("Player sport event deleted successfully.", Severity.Success);
            string url = $"Profiles/Player/Sports/{selectedPlayerSportsID}";
            var success = await apiService.DeleteAsync(url);

            if (success)
            {
                Snackbar.Add("Player sport event deleted successfully.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to delete player sport event.", Severity.Error);
            }
            //
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error deleting player sport event: {ex.Message}", Severity.Error);
        }
    }
}
@* //naay ing ani tanan   { apiService.Palaro2026API} *@