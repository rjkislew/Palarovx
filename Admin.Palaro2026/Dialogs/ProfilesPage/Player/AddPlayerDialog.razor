@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded != null)
{
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolRegionIDValue" Margin="Margin.Dense" Label="Region"
                               ShrinkLabel Variant="Variant.Outlined" Clearable
                               TextChanged="@(() => _selectedSchoolDivisionIDValue = null)"
                               T="int?" SelectedValuesChanged="GetSchoolDivisionsAsync">
                        <MudVirtualize Items="_schoolRegions" Context="region">
                            <MudSelectItem T="int?" Value="region.ID">@region.Region (@region.Abbreviation)</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolDivisionIDValue" Margin="Margin.Dense" Label="Division"
                               ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolRegionIDValue == null"
                               TextChanged="@(() => _selectedSchoolLevelIDValue = null)">
                        <MudVirtualize Items="_schoolDivisions" Context="division">
                            <MudSelectItem T="int?" Value="division.ID">@division.Division</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolLevelIDValue" Margin="Margin.Dense" Label="School Level"
                               ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolDivisionIDValue == null"
                               TextChanged="@(() => {_selectedSchoolIDValue = null; _selectedSportIDValue = null;})"
                               T="int?" SelectedValuesChanged="GetSchoolsAsync">
                        <MudVirtualize Items="_schoolLevels" Context="level">
                            <MudSelectItem T="int?" Value="level.ID">@level.Level</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolIDValue" Margin="Margin.Dense" Label="School"
                               HelperText="@((_schools?.Any() != true && _selectedSchoolLevelIDValue != null && _selectedSchoolDivisionIDValue != null && _selectedSchoolRegionIDValue != null) ? "No school representing for the selected region, division, and level." : null)"
                               ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="@( _schools?.Any() != true || _selectedSchoolLevelIDValue == null || _selectedSchoolDivisionIDValue == null || _selectedSchoolRegionIDValue == null)">
                        <MudVirtualize Items="_schools" Context="school">
                            <MudSelectItem T="int?" Value="school.ID">@school.School</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_firstnameValue" Immediate Margin="Margin.Dense" Label="Firstname" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_lastnameValue" Immediate Margin="Margin.Dense" Label="Lastname" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSportCategoryIDValue" Margin="Margin.Dense" Label="Sport Category" ShrinkLabel Clearable Disabled="_selectedSchoolDivisionIDValue == null"
                               Variant="Variant.Outlined" TextChanged="@(() => _selectedSportIDValue = null)"
                               T="int?" SelectedValuesChanged="GetSportsInSubcategoriesAsync">
                        <MudVirtualize Items="_sportCategories" Context="sportCategory">
                            <MudSelectItem T="int?" Value="sportCategory.ID">@sportCategory.Category</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSportIDValue" Margin="Margin.Dense" Label="Sport" ShrinkLabel Variant="Variant.Outlined" Clearable
                               Disabled="@( _sports?.Any() != true && _selectedSchoolLevelIDValue != null && _selectedSportCategoryIDValue != null)"
                               HelperText="@((_sports?.Any() != true && _selectedSchoolLevelIDValue != null && _selectedSportCategoryIDValue != null) ? "No sports for that school level or sport category" : null)">
                        <MudVirtualize Items="_sports" Context="sport">
                            <MudSelectItem T="int?" Value="sport.ID">@sport.Sport</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Style="width: 100%" Justify="Justify.SpaceBetween">
                <MudButton Style="text-transform: none" Variant="Variant.Filled" DropShadow="false" OnClick="ClearFields">Clear</MudButton>
                <MudButton Style="text-transform: none" Variant="Variant.Filled" DropShadow="false"
                           Disabled="_addPlayerDialogDisabled" OnClick="ConfirmAddPlayerAsync">Add</MudButton>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }
    private static readonly Random random = new();


    // JSON storage
    private List<SchoolsDTO.SchoolRegions>? _schoolRegions;
    private List<SchoolsDTO.SchoolDivisions>? _schoolDivisions;
    private List<SchoolsDTO.SchoolLevels>? _schoolLevels;
    private List<SchoolsDTO.Schools>? _schools;
    private List<SportsDTO.SportCategories>? _sportCategories;
    private List<SportsDTO.Sports>? _sports;


    // Variables
    private int? _selectedSchoolRegionIDValue;
    private int? _selectedSchoolDivisionIDValue;
    private int? _selectedSchoolLevelIDValue;
    private int? _selectedSchoolIDValue;
    private string? _firstnameValue;
    private string? _lastnameValue;
    private int? _selectedSportCategoryIDValue;
    private int? _selectedSportIDValue;
    private int[]? _sportIDs;


    // Disable addition button if values are empty
    private bool _addPlayerDialogDisabled =>
    string.IsNullOrEmpty(_firstnameValue) ||
    string.IsNullOrEmpty(_lastnameValue) ||
    !_selectedSchoolRegionIDValue.HasValue ||
    !_selectedSchoolIDValue.HasValue ||
    !_selectedSportCategoryIDValue.HasValue ||
    !_selectedSportIDValue.HasValue;


    // Load dialog if true
    private bool? _isLoaded = false;


    // DTOs
    public class ProfilesDTO
    {
        public class ProfilePlayers
        {
            public string ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolID { get; set; }
            public int? SportID { get; set; }
        }
    }

    public class SchoolsDTO
    {
        public class Schools
        {
            public int ID { get; set; }
            public string? School { get; set; }
            public int? SchoolDivisionID { get; set; }
            public int? SchoolLevelsID { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }

        public class SchoolDivisions
        {
            public int ID { get; set; }
            public string? Division { get; set; }
            public int? SchoolRegionID { get; set; }
        }

        public class SchoolLevels
        {
            public int ID { get; set; }
            public string? Level { get; set; }
        }
    }

    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetSchoolRegionsAsync();
        await GetSchoolLevelsAsync();
        await GetSportCategoriesAsync();

        if (_schoolRegions?.Any() == true
         && _schoolLevels?.Any() == true
         && _sportCategories?.Any() == true)
        {
            _isLoaded = true;
        }
    }

    // API Calls
    private async Task GetSchoolRegionsAsync()
    {
        string url = "/Schools/Regions";
        _schoolRegions = await apiService.GetAsync<SchoolsDTO.SchoolRegions>(url);
    }

    private async Task GetSchoolDivisionsAsync()
    {
        string url = $"/Schools/Divisions?schoolRegionID={_selectedSchoolRegionIDValue}";
        _schoolDivisions = await apiService.GetAsync<SchoolsDTO.SchoolDivisions>(url);
    }

    private async Task GetSchoolLevelsAsync()
    {
        string url = "/Schools/Levels";
        _schoolLevels = await apiService.GetAsync<SchoolsDTO.SchoolLevels>(url);
    }

    private async Task GetSportCategoriesAsync()
    {
        string url = "/Sports/Categories";
        _sportCategories = await apiService.GetAsync<SportsDTO.SportCategories>(url);
    }

    private async Task GetSchoolsAsync()
    {
        string url = $"/Schools?schoolDivisionID={_selectedSchoolDivisionIDValue}&schoolLevelsID={_selectedSchoolLevelIDValue}";
        _schools = await apiService.GetAsync<SchoolsDTO.Schools>(url);

        if (_selectedSportCategoryIDValue != null)
        {
            await GetSportsInSubcategoriesAsync();
        }
    }

    private async Task GetSportsInSubcategoriesAsync()
    {
        string url = $"/Sports/Subcategories?schoolLevelID={_selectedSchoolLevelIDValue}";
        var subcategories = await apiService.GetAsync<SportsDTO.SportSubcategories>(url);

        if (subcategories != null)
        {
            _sportIDs = subcategories.Select(s => s.SportID ?? 0).Distinct().ToArray(); // Store unique SportIDs in array
        }

        await GetSportsAsync();
    }


    private async Task GetSportsAsync()
    {
        if (_sportIDs == null || !_sportIDs.Any())
            return; // Exit if there are no IDs

        string idsQuery = string.Join(",", _sportIDs); // Convert array to comma-separated string
        string url = $"/Sports?id={idsQuery}&sportCategoryID={_selectedSportCategoryIDValue}";

        _sports = await apiService.GetAsync<SportsDTO.Sports>(url);
    }


    // Dialog Actions
    private void ClearFields()
    {
        _selectedSchoolRegionIDValue = null;
        _selectedSchoolDivisionIDValue = null;
        _selectedSchoolLevelIDValue = null;
        _selectedSchoolIDValue = null;
        _firstnameValue = null;
        _lastnameValue = null;
        _selectedSportCategoryIDValue = null;
        _selectedSportIDValue = null;
    }

    private async Task ConfirmAddPlayerAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm addition of {_firstnameValue} {_lastnameValue} as player?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await AddPlayerProfileAsync();
            MudDialog?.Close(DialogResult.Ok(true));
        }
    }


    private string GenerateRandomString(int length)
    {
        const string chars = "abcdefghijklmnopqrstuvwxyz0123456789";
        return new string(Enumerable.Range(0, length)
            .Select(_ => chars[random.Next(chars.Length)])
            .ToArray());
    }

    // Add Player profile
    private async Task AddPlayerProfileAsync()
    {
        var generatedID = GenerateRandomString(20);
        var addPlayerProfile = new ProfilesDTO.ProfilePlayers
            {
                ID = generatedID,
                FirstName = _firstnameValue,
                LastName = _lastnameValue,
                SchoolID = _selectedSchoolIDValue,
                SportID = _selectedSportIDValue,
            };

        string url = "/Profiles/Player";
        var success = await apiService.PostAsync(url, addPlayerProfile);

        if (success)
        {
            Snackbar.Add($"{_firstnameValue} {_lastnameValue} as player added successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Failed to add {_firstnameValue} {_lastnameValue}.", Severity.Error);
        }
    }
}
