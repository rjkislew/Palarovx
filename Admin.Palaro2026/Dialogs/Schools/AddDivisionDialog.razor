@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@using System.Net.Http.Headers
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        <MudGrid Spacing="2">
            <MudItem xs="12" md="6">
                <MudTextField Immediate @bind-Value="_schoolDivisionValue" Margin="Margin.Dense" OnClearButtonClick="@(() => _selectedSchoolRegionIDValue = null)" Label="Division" ShrinkLabel Variant="Variant.Outlined" Clearable></MudTextField>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_selectedSchoolRegionIDValue" Margin="Margin.Dense" Label="Region/Agency" ShrinkLabel
                           Variant="Variant.Outlined" Clearable>
                    <MudVirtualize Items="_schoolRegions" Context="region">
                        <MudSelectItem T="int?" Value="region.ID">@region.Region (@region.Abbreviation)</MudSelectItem>
                    </MudVirtualize>
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudStack Row Style="width: 100%" Justify="Justify.SpaceBetween">
            <MudButton Style="text-transform: none" Variant="Variant.Filled" DropShadow="false" OnClick="ClearFields">Clear</MudButton>
            <MudButton Style="text-transform: none" Variant="Variant.Filled" DropShadow="false"
                       Disabled="_addSchoolDisabled" OnClick="ConfirmAddDivisionAsync">Add</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    // JSON storage
    private List<SchoolDTO.SchoolRegions>? _schoolRegions;

    // Variables
    private string? _schoolDivisionValue;
    private int? _selectedSchoolRegionIDValue;


    // Disable addition button if values are empty
    private bool _addSchoolDisabled =>
    _schoolDivisionValue == null ||
    _selectedSchoolRegionIDValue == null;

    // DTOs
    public class SchoolDTO
    {
        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }

        public class SchoolDivisions
        {
            public int ID { get; set; }
            public string? Division { get; set; }
            public int? SchoolRegionID { get; set; }
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetSchoolRegionsAsync();
    }

    private async Task GetSchoolRegionsAsync()
    {
        string url = "/Schools/Regions";

        _schoolRegions = await apiService.GetAsync<SchoolDTO.SchoolRegions>(url);
    }

    // Dialog Actions
    private void ClearFields()
    {
        _schoolDivisionValue = null;
        _selectedSchoolRegionIDValue = null;
    }

    private async Task ConfirmAddDivisionAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm addition of {_schoolDivisionValue}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await AddDivisionAsync();
            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    // Add region
    private async Task AddDivisionAsync()
    {
        var addSchool = new SchoolDTO.SchoolDivisions
        {
            Division = _schoolDivisionValue,
            SchoolRegionID = _selectedSchoolRegionIDValue
        };

        // Step 1: Add the region first
        string url = "/Schools/Divisions";
        var success = await apiService.PostAsync(url, addSchool); // ✅ uncommented

        if (!success)
        {
            Snackbar.Add($"Failed to add division {_schoolDivisionValue}", Severity.Error);
            return;
        }

        Snackbar.Add($"Divisions {_schoolDivisionValue} added successfully", Severity.Success);
    }
}
