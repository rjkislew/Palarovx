@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">@_dialogHeader</MudText>
        <MudDivider Class="mb-5" />
        <MudStack>
            <MudSelect @bind-Value="_selectedSchoolRegionIDValue" Margin="Margin.Dense" Label="Region" ShrinkLabel Variant="Variant.Outlined" Clearable OnClearButtonClick="OnRegionClear" TextChanged="GetSchoolDivisionsAsync">
                <MudVirtualize Items="_schoolRegions" Context="region">
                    <MudSelectItem T="int?" Value="region.ID">@region.Region (@region.Abbreviation)</MudSelectItem>
                </MudVirtualize>
            </MudSelect>
            <MudSelect @bind-Value="_selectedSchoolDivisionIDValue" Margin="Margin.Dense" Label="Division" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolRegionIDValue == null">
                <MudVirtualize Items="_schoolDivisions" Context="division">
                    <MudSelectItem T="int?" Value="division.ID">@division.Division</MudSelectItem>
                </MudVirtualize>
            </MudSelect>
            <MudSelect @bind-Value="_selectedSchoolLevelIDValue" Margin="Margin.Dense" Label="School Level" ShrinkLabel Variant="Variant.Outlined" Clearable>
                <MudVirtualize Items="_schoolLevels" Context="level">
                    <MudSelectItem T="int?" Value="level.ID">@level.Level</MudSelectItem>
                </MudVirtualize>
            </MudSelect>
            <MudTextField @bind-Value="_schoolValue" Margin="Margin.Dense" Label="School" ShrinkLabel Variant="Variant.Outlined" Clearable />
        </MudStack>
        <MudDivider Class="mt-10 mb-2" />
        <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
            <MudButton Style="text-transform: none" Color="Color.Error" DropShadow="false" OnClick="ConfirmDeleteSchoolAsync">Delete</MudButton>
            <MudStack Row Justify="Justify.SpaceBetween">
                <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                <MudButton Style="text-transform: none" Color="Color.Success" DropShadow="false" OnClick="ConfirmUpdateSchoolAsync" Disabled="_editSchoolButtonDisabled">Update</MudButton>
            </MudStack>
        </MudStack>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmDeleteSchoolAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm deletion of school?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteSchoolAsync();
            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    private async Task ConfirmUpdateSchoolAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm changes of school?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await UpdateSchoolAsync();
            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    [Parameter]
    public int selectedSchoolID { get; set; }

    private string? _dialogHeader;
    private int? _selectedSchoolRegionIDValue;
    private int? _selectedSchoolDivisionIDValue;
    private string? _schoolValue;
    private int? _selectedSchoolLevelIDValue;
    private bool _editSchoolButtonDisabled =>
    _selectedSchoolRegionIDValue == null ||
    _selectedSchoolDivisionIDValue == null ||
    _selectedSchoolLevelIDValue == null ||
    string.IsNullOrEmpty(_schoolValue);

    private List<SchoolDTO.SchoolRegions>? _schoolRegions;
    private List<SchoolDTO.SchoolDivisions>? _schoolDivisions;
    private List<SchoolDTO.SchoolLevels>? _schoolLevels;

    public class SchoolDTO
    {
        public class Schools
        {
            public int ID { get; set; }
            public string? School { get; set; }
            public int? SchoolDivisionID { get; set; }
            public int? SchoolLevelsID { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }

        public class SchoolDivisions
        {
            public int ID { get; set; }
            public string? Division { get; set; }
            public int? SchoolRegionID { get; set; }
            public virtual SchoolRegions? SchoolRegion { get; set; }
        }

        public class SchoolLevels
        {
            public int ID { get; set; }
            public string? Level { get; set; }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSchoolsOnDialogOpenAsync(selectedSchoolID);
        await GetSchoolDivisionsOnDialogOpenAsync();
        await GetSchoolLevelsOnDialogOpenAsync();
        StateHasChanged();
    }

    private async Task GetSchoolsOnDialogOpenAsync(int schoolID)
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/{schoolID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            string responseStream = await httpResponse.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var school = JsonSerializer.Deserialize<SchoolDTO.Schools>(responseStream, options);

            if (school != null)
            {
                // Title
                _dialogHeader = $"Update: {school.School}";

                // Data
                _selectedSchoolDivisionIDValue = school.SchoolDivisionID;
                _schoolValue = school.School;
                _selectedSchoolLevelIDValue = school.SchoolLevelsID;
            }
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolRegionsOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Regions";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolRegions = await JsonSerializer.DeserializeAsync<List<SchoolDTO.SchoolRegions>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolDivisionsOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Divisions?id={_selectedSchoolDivisionIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolDivisions = await JsonSerializer.DeserializeAsync<List<SchoolDTO.SchoolDivisions>>(responseStream, options);

            if (_schoolDivisions != null && _schoolDivisions.Any())
            {
                var division = _schoolDivisions.First(); // Store values from the first school as an example

                _selectedSchoolRegionIDValue = division.SchoolRegionID;
            }

            await GetSchoolRegionsOnDialogOpenAsync();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolDivisionsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Divisions?schoolRegionID={_selectedSchoolRegionIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolDivisions = await JsonSerializer.DeserializeAsync<List<SchoolDTO.SchoolDivisions>>(responseStream, options);


        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void OnRegionClear()
    {
        _selectedSchoolDivisionIDValue = null;
    }

    private async Task GetSchoolLevelsOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Levels";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolLevels = await JsonSerializer.DeserializeAsync<List<SchoolDTO.SchoolLevels>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }



    private async Task UpdateSchoolAsync()
    {
        try
        {
            if (selectedSchoolID == 0) return;

            var updatedStream = new SchoolDTO.Schools
                {
                    ID = selectedSchoolID,
                    School = _schoolValue,
                    SchoolDivisionID = _selectedSchoolDivisionIDValue,
                    SchoolLevelsID = _selectedSchoolLevelIDValue
                };

            string url = $"{apiService.Palaro2026API}/Schools/{selectedSchoolID}";
            var content = new StringContent(JsonSerializer.Serialize(updatedStream), Encoding.UTF8, "application/json");

            HttpResponseMessage response = await httpClient.PutAsync(url, content);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("School details updated successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error updating school: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteSchoolAsync()
    {
        try
        {
            if (selectedSchoolID == 0) return;

            string url = $"{apiService.Palaro2026API}/Schools/{selectedSchoolID}";

            HttpResponseMessage response = await httpClient.DeleteAsync(url);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("School deleted successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error deleting school: {ex.Message}", Severity.Error);
        }
    }
}
