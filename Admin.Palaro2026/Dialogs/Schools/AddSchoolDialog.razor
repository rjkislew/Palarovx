@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        <MudGrid Spacing="2">
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_selectedSchoolRegionIDValue" Margin="Margin.Dense" Label="Region/Agency" ShrinkLabel
                           Variant="Variant.Outlined" Clearable OnClearButtonClick="@(() => _selectedSchoolDivisionIDValue = null)"
                           T="int?" SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedSchoolDivisionIDValue = null; await GetSchoolDivisionsAsync(); }))">
                    <MudVirtualize Items="_schoolRegions" Context="region">
                        <MudSelectItem T="int?" Value="region.ID">@region.Region (@region.Abbreviation)</MudSelectItem>
                    </MudVirtualize>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_selectedSchoolDivisionIDValue" Margin="Margin.Dense" Label="Division"
                           HelperText="@(_selectedSchoolRegionIDValue != null && !(_schoolDivisions?.Any() ?? false) ? "No divisions for this office/agency." : null)"
                           ShrinkLabel Variant="Variant.Outlined" Clearable
                           Disabled="@(_selectedSchoolRegionIDValue == null || !(_schoolDivisions?.Any() ?? false))">
                    <MudVirtualize Items="_schoolDivisions" Context="division">
                        <MudSelectItem T="int?" Value="division.ID">@division.Division</MudSelectItem>
                    </MudVirtualize>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_selectedSchoolLevelIDValue" Margin="Margin.Dense" Label="School Level" ShrinkLabel Variant="Variant.Outlined" Clearable>
                    <MudVirtualize Items="_schoolLevels" Context="level">
                        <MudSelectItem T="int?" Value="level.ID">@level.Level</MudSelectItem>
                    </MudVirtualize>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_schoolValue" Immediate Margin="Margin.Dense" Label="School" ShrinkLabel Variant="Variant.Outlined" Clearable />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudStack Row Style="width: 100%" Justify="Justify.SpaceBetween">
            <MudButton Style="text-transform: none" Variant="Variant.Filled" DropShadow="false" OnClick="ClearFields">Clear</MudButton>
            <MudButton Style="text-transform: none" Variant="Variant.Filled" DropShadow="false"
                       Disabled="_addSchoolDisabled" OnClick="ConfirmAddSchoolAsync">Add</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    // JSON storage
    private List<SchoolDTO.SchoolRegions>? _schoolRegions;
    private List<SchoolDTO.SchoolDivisions>? _schoolDivisions;
    private List<SchoolDTO.SchoolLevels>? _schoolLevels;

    // Variables
    private int? _selectedSchoolRegionIDValue;
    private int? _selectedSchoolDivisionIDValue;
    private string? _schoolValue;
    private int? _selectedSchoolLevelIDValue;


    // Disable addition button if values are empty
    private bool _addSchoolDisabled =>
    _selectedSchoolRegionIDValue == null ||
    _selectedSchoolDivisionIDValue == null ||
    _selectedSchoolLevelIDValue == null ||
    string.IsNullOrEmpty(_schoolValue);

    // DTOs
    public class SchoolDTO
    {
        public class Schools
        {
            public int ID { get; set; }
            public string? School { get; set; }
            public int? SchoolDivisionID { get; set; }
            public int? SchoolLevelsID { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }

        public class SchoolDivisions
        {
            public int ID { get; set; }
            public string? Division { get; set; }
            public int? SchoolRegionID { get; set; }
            public virtual SchoolRegions? SchoolRegion { get; set; }
        }

        public class SchoolLevels
        {
            public int ID { get; set; }
            public string? Level { get; set; }
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetSchoolRegionsAsync();
        await GetSchoolLevelsAsync();
    }

    private async Task GetSchoolRegionsAsync()
    {
        string url = "/Schools/Regions";

        _schoolRegions = await apiService.GetAsync<SchoolDTO.SchoolRegions>(url);
    }

    private async Task GetSchoolDivisionsAsync()
    {
        string url = $"/Schools/Divisions?schoolRegionID={_selectedSchoolRegionIDValue}";

        _schoolDivisions = await apiService.GetAsync<SchoolDTO.SchoolDivisions>(url);
    }

    private async Task GetSchoolLevelsAsync()
    {
        string url = $"/Schools/Levels";

        _schoolLevels = await apiService.GetAsync<SchoolDTO.SchoolLevels>(url);
    }



    // Dialog Actions
    private void ClearFields()
    {
        _selectedSchoolRegionIDValue = null;
        _selectedSchoolDivisionIDValue = null;
        _selectedSchoolLevelIDValue = null;
        _schoolValue = null;
    }

    private async Task ConfirmAddSchoolAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm addition of {_schoolValue}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await AddSchoolAsync();
            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    // Add school
    private async Task AddSchoolAsync()
    {
        var addSchool = new SchoolDTO.Schools
            {
                SchoolDivisionID = _selectedSchoolDivisionIDValue,
                SchoolLevelsID = _selectedSchoolLevelIDValue,
                School = _schoolValue
            };

        string url = "/Schools";
        var success = await apiService.PostAsync(url, addSchool);

        if (success)
        {
            Snackbar.Add("School added successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to add school", Severity.Error);
        }
    }
}
