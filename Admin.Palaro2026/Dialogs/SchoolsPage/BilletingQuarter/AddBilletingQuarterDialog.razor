@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolRegionIDValue" Margin="Margin.Dense" Label="Region" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_schoolRegions" Context="region">
                            <MudSelectItem T="int?" Value="region.ID">@region.Region (@region.Abbreviation)</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-Value="_billetingQuarterValue" Margin="Margin.Dense" Label="Billeting Quarter" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="_addressValue" Margin="Margin.Dense" Label="Address" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="decimal?" @bind-Value="_latitudeValue" Margin="Margin.Dense" Mask="@(new PatternMask("0.000000"))" Label="Latitude" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="decimal?" @bind-Value="_longitudeValue" Margin="Margin.Dense" Mask="@(new PatternMask("000.000000"))" Label="Longitude" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-Value="_contactPersonValue" Margin="Margin.Dense" Label="Contact Person" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-Value="_contactPersonNumberValue" Margin="Margin.Dense" Mask="@(new PatternMask("0000 000 0000"))" Label="Contact Person Number" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Style="width: 100%" Justify="Justify.SpaceBetween">
                <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                <MudStack Row Justify="Justify.SpaceBetween">
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="ClearFields">Clear</MudButton>
                    <MudButton Style="text-transform: none" DropShadow="false"
                               Disabled="_addBilletingQuarterDisabled" OnClick="ConfirmAddBilletingQuarterAsync">Add</MudButton>
                </MudStack>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }


    // JSON storage
    private List<SchoolDTO.SchoolRegions>? _schoolRegions;


    // Variables
    private int? _selectedSchoolRegionIDValue;
    private string? _billetingQuarterValue;
    private string? _addressValue;
    private decimal? _latitudeValue;
    private decimal? _longitudeValue;
    private string? _contactPersonValue;
    private string? _contactPersonNumberValue;


    // Disable addition button if values are empty
    private bool _addBilletingQuarterDisabled =>
    !_selectedSchoolRegionIDValue.HasValue ||
    string.IsNullOrEmpty(_billetingQuarterValue) ||
    string.IsNullOrEmpty(_addressValue) ||
    !_latitudeValue.HasValue ||
    !_longitudeValue.HasValue ||
    string.IsNullOrEmpty(_contactPersonValue) ||
    string.IsNullOrEmpty(_contactPersonNumberValue);


    // Load dialog if true
    private bool? _isLoaded = false;


    // DTOs
    public class SchoolDTO
    {
        public class SchoolBilletingQuarters
        {
            public int ID { get; set; }
            public int? SchoolRegionID { get; set; }
            public string? BilletingQuarter { get; set; }
            public string? Address { get; set; }
            public decimal? Latitude { get; set; }
            public decimal? Longitude { get; set; }
            public string? ContactPerson { get; set; }
            public string? ContactPersonNumber { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }
    }


    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetSchoolRegionsAsync();

        if (_schoolRegions?.Any() == true)
        {
            _isLoaded = true;
        }
    }

    private async Task GetSchoolRegionsAsync()
    {
        string url = "/Schools/Regions";

        _schoolRegions = await apiService.GetAsync<SchoolDTO.SchoolRegions>(url);
    }


    // Dialog Actions
    private void ClearFields()
    {
        _selectedSchoolRegionIDValue = null;
        _billetingQuarterValue = null;
        _addressValue = null;
        _latitudeValue = null;
        _longitudeValue = null;
        _contactPersonValue = null;
        _contactPersonNumberValue = null;
    }

    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmAddBilletingQuarterAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm addition of {_billetingQuarterValue}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await AddBilletingQuarterAsync();

            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    private async Task AddBilletingQuarterAsync()
    {
        var addBilletingQuarter = new SchoolDTO.SchoolBilletingQuarters
            {
                SchoolRegionID = _selectedSchoolRegionIDValue,
                BilletingQuarter = _billetingQuarterValue,
                Address = _addressValue,
                Latitude = _latitudeValue,
                Longitude = _longitudeValue,
                ContactPerson = _contactPersonValue,
                ContactPersonNumber = _contactPersonNumberValue?.Replace(" ", "")
            };

        string url = "/Schools/BilletingQuarters";
        var success = await apiService.PostAsync(url, addBilletingQuarter);

        if (success)
        {
            Snackbar.Add("Billeting Quarter added successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to add Billeting Quarter", Severity.Error);
        }
    }
}
