@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded != null)
{
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolRegionIDValue" Margin="Margin.Dense" Label="Region" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetSchoolDivisionAsync" OnClearButtonClick="@(() => {_selectedSchoolDivisionIDValue = null; _selectedSchoolLevelIDValue = null; _selectedSchoolIDValue = null; })">
                        <MudVirtualize Items="_schoolRegions" Context="region">
                            <MudSelectItem T="int?" Value="region.ID">@region.Region (@region.Abbreviation)</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolDivisionIDValue" Margin="Margin.Dense" Label="Division" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolRegionIDValue == null" OnClearButtonClick="@(() => _selectedSchoolLevelIDValue = null)">
                        <MudVirtualize Items="_schoolDivisions" Context="division">
                            <MudSelectItem T="int?" Value="division.ID">@division.Division</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolLevelIDValue" Margin="Margin.Dense" Label="School Level" ShrinkLabel Variant="Variant.Outlined" Clearable TextChanged="GetSchoolsAsync" Disabled="_selectedSchoolDivisionIDValue == null" OnClearButtonClick="@(() => {_selectedSchoolIDValue = null; _selectedSportIDValue = null;})">
                        <MudVirtualize Items="_schoolLevels" Context="level">
                            <MudSelectItem T="int?" Value="level.ID">@level.Level</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    @{
                        var message = (_schools?.Any() != true) ? "No subcategory available for this gender." : null;
                        var disabled = (_schools?.Any() != true) ? true : false;
                    }
                    @if (_schools != null && _schools.Any() || _selectedSchoolLevelIDValue == null || _selectedSchoolDivisionIDValue == null)
                    {
                        <MudSelect @bind-Value="_selectedSchoolIDValue" Margin="Margin.Dense" Label="School" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolLevelIDValue == null" OnClearButtonClick="@(() => { _firstnameValue = null; _lastnameValue = null; })">
                            <MudVirtualize Items="_schools" Context="school">
                                <MudSelectItem T="int?" Value="school.ID">@school.School</MudSelectItem>
                            </MudVirtualize>
                        </MudSelect>
                    }
                    else
                    {
                        <MudField Label="School" Margin="Margin.Dense" Variant="Variant.Outlined">
                            <MudText Typo="Typo.caption">No School representing on this division and level</MudText>
                        </MudField>
                    }
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_firstnameValue" Immediate Margin="Margin.Dense" Label="Firstname" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_lastnameValue" Immediate Margin="Margin.Dense" Label="Lastname" ShrinkLabel Variant="Variant.Outlined" Clearable />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSportCategoryIDValue" Margin="Margin.Dense" Label="Sport Category" ShrinkLabel Variant="Variant.Outlined" TextChanged="GetSportSubcategoriesAsync" Clearable Disabled="_selectedSchoolDivisionIDValue == null" OnClearButtonClick="@(() => _selectedSportIDValue = null)">
                        <MudVirtualize Items="_sportCategories" Context="sportCategory">
                            <MudSelectItem T="int?" Value="sportCategory.ID">@sportCategory.Category</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSportIDValue" Margin="Margin.Dense" Label="Sport" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSportCategoryIDValue == null">
                        <MudVirtualize Items="_sports" Context="sport">
                            <MudSelectItem T="int?" Value="sport.ID">@sport.Sport</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudStack Row Style="width: 100%" Justify="Justify.SpaceBetween">
                        <MudButton Style="text-transform: none" Variant="Variant.Filled" DropShadow="false" OnClick="ClearFields">Clear</MudButton>
                        <MudButton Style="text-transform: none" Variant="Variant.Filled" DropShadow="false"
                                   Disabled="_addPlayerDialogDisabled" OnClick="ConfirmPostEventVenuesAsync">Add</MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions></DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    private IMudDialogInstance? MudDialog { get; set; }

    // JSON storage
    private List<SchoolsDTO.SchoolRegions>? _schoolRegions;
    private List<SchoolsDTO.SchoolDivisions>? _schoolDivisions;
    private List<SchoolsDTO.SchoolLevels>? _schoolLevels;
    private List<SchoolsDTO.Schools>? _schools;
    private List<SportsDTO.SportCategories>? _sportCategories;
    private List<SportsDTO.Sports>? _sports;

    // Variables
    private int? _selectedSchoolRegionIDValue;
    private int? _selectedSchoolDivisionIDValue;
    private int? _selectedSchoolLevelIDValue;
    private int? _selectedSchoolIDValue;
    private string? _firstnameValue;
    private string? _lastnameValue;
    private int? _selectedSportCategoryIDValue;
    private int? _selectedSportIDValue;
    private int[]? _sportIDs;

    // Disable addition button if values are empty
    private bool _addPlayerDialogDisabled =>
    string.IsNullOrEmpty(_firstnameValue) ||
    string.IsNullOrEmpty(_lastnameValue) ||
    !_selectedSchoolRegionIDValue.HasValue ||
    !_selectedSchoolIDValue.HasValue ||
    !_selectedSportCategoryIDValue.HasValue ||
    !_selectedSportIDValue.HasValue;

    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class ProfilesDTO
    {
        public class ProfilePlayers
        {
            public int ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolID { get; set; }
            public int? SportID { get; set; }
        }
    }

    public class SchoolsDTO
    {
        public class Schools
        {
            public int ID { get; set; }
            public string? School { get; set; }
            public int? SchoolDivisionID { get; set; }
            public int? SchoolLevelsID { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }

        public class SchoolDivisions
        {
            public int ID { get; set; }
            public string? Division { get; set; }
            public int? SchoolRegionID { get; set; }
        }

        public class SchoolLevels
        {
            public int ID { get; set; }
            public string? Level { get; set; }
        }
    }

    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetSchoolRegionsAsync();
        await GetSchoolLevelsAsync();
        await GetSportCategoriesAsync();

        if (_schoolRegions?.Any() == true
         && _schoolLevels?.Any() == true
         && _sportCategories?.Any() == true)
        {
            _isLoaded = true;
        }
    }

    private async Task GetSchoolRegionsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Regions";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolRegions = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.SchoolRegions>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolDivisionAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Divisions?schoolRegionID={_selectedSchoolRegionIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolDivisions = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.SchoolDivisions>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolLevelsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Levels";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolLevels = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.SchoolLevels>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolsAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools?schoolDivisionID={_selectedSchoolDivisionIDValue}&schoolLevelsID={_selectedSchoolLevelIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schools = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.Schools>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }

        if (_selectedSportCategoryIDValue != null)
        {
            await GetSportSubcategoriesAsync();
        }
    }

    private async Task GetSportCategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Categories";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportCategories>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportSubcategoriesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Subcategories?schoolLevelID={_selectedSchoolLevelIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var subcategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportSubcategories>>(responseStream, options);

            if (subcategories != null)
            {
                _sportIDs = subcategories.Select(s => s.SportID ?? 0).Distinct().ToArray(); // Store unique SportIDs in array
            }

            await GetSportsAsync();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportsAsync()
    {
        try
        {
            if (_sportIDs == null || !_sportIDs.Any())
                return; // Exit if there are no IDs

            string idsQuery = string.Join(",", _sportIDs); // Convert array to comma-separated string
            string url = $"{apiService.Palaro2026API}/Sports?id={idsQuery}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sports = await JsonSerializer.DeserializeAsync<List<SportsDTO.Sports>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Dialog Actions
    private void ClearFields()
    {
        _selectedSchoolRegionIDValue = null;
        _selectedSchoolDivisionIDValue = null;
        _selectedSchoolLevelIDValue = null;
        _selectedSchoolIDValue = null;
        _firstnameValue = null;
        _lastnameValue = null;
        _selectedSportCategoryIDValue = null;
        _selectedSportIDValue = null;
    }

    private async Task ConfirmPostEventVenuesAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: $"Do you confirm addition of {_lastnameValue ?? "this venue"}?",
            yesText: "Yes",
            cancelText: "Cancel",
            options: options);

        if (result == true)
        {
            await AddPlayerProfileAsync();
            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    // Add Player profile
    private async Task AddPlayerProfileAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_firstnameValue) || string.IsNullOrWhiteSpace(_lastnameValue) ||
            !_selectedSchoolRegionIDValue.HasValue || !_selectedSchoolDivisionIDValue.HasValue ||
            !_selectedSchoolLevelIDValue.HasValue || !_selectedSchoolIDValue.HasValue)
            {
                Snackbar.Add("Fields should be filled accordingly.", Severity.Warning);
                return;
            }

            string url = $"{apiService.Palaro2026API}/Profiles/Player";

            var eventStream = new ProfilesDTO.ProfilePlayers
                {
                    FirstName = _firstnameValue,
                    LastName = _lastnameValue,
                    SchoolID = _selectedSchoolIDValue,
                    SportID = _selectedSportIDValue,
                };

            var jsonContent = JsonSerializer.Serialize(eventStream);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            HttpResponseMessage httpResponse = await httpClient.PostAsync(url, content);
            httpResponse.EnsureSuccessStatusCode();

            ClearFields();

            Snackbar.Add("Player added successfully.", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error posting data: {ex.Message}");
        }
    }
}
