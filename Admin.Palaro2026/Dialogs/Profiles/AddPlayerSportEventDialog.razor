@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog>
        <DialogContent>
            <MudStack Row>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Add" />
                <MudText Typo="Typo.body2">Sport Event for @_dialogHeader</MudText>
            </MudStack>
            <MudDivider Class="mb-5" />
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedGenderCategoryIDValue" Margin="Margin.Dense" Label="Gender Category"
                               ShrinkLabel Variant="Variant.Outlined" Clearable OnClearButtonClick="@(() => _selectedSportSubcategoryIDValue = null)"
                               T="int?" SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedSportSubcategoryIDValue = null; await GetSportSubcategoryOnDialogOpenAsync(); }))">
                        <MudVirtualize Items="_sportGenderCategories" Context="gender">
                            <MudSelectItem T="int?" Value="gender.ID">@gender.Gender</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                @{
                    var message = (_sportSubcategories?.Any() != true) ? "No subcategory available for this gender." : null;
                    var disabled = (_sportSubcategories?.Any() != true) ? true : false;
                }
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSportSubcategoryIDValue" Margin="Margin.Dense" HelperText="@($"{message}")" Label="Sport Subcategory" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedGenderCategoryIDValue == null || disabled">
                        <MudVirtualize Items="_sportSubcategories" Context="subCategory">
                            <MudSelectItem T="int?" Value="subCategory.ID">@(subCategory.Subcategory ?? "No Subcategory")</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudSelect @bind-SelectedValues="_selectedCoachIDs" ToStringFunc="@(id => _profileCoaches?.FirstOrDefault(c => c.ID == id) is { } coach ? $"{coach.FirstName} {coach.LastName}" : string.Empty)"
                               T="int?" MultiSelection="true" Margin="Margin.Dense" Label="Coach" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_profileCoaches" Context="coach">
                            <MudSelectItem T="int?" Value="coach.ID">@coach.FirstName @coach.LastName</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                <MudButton Style="text-transform: none" DropShadow="false" OnClick="ConfirmPlayerSportAddEventAsync" Disabled="_editPlayerButtonDisabled">Add</MudButton>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    // Passed data from page
    [Parameter]
    public int selectedPlayerID { get; set; }
    [Parameter]
    public int? selectedSportID { get; set; }
    [Parameter]
    public int? selectedRegionID { get; set; }
    [Parameter]
    public int? selectedSchoolLevelID { get; set; }

    // JSON storage
    private List<ProfilesDTO.ProfilePlayers>? _profilePlayers;
    private List<ProfilesDTO.ProfileCoaches>? _profileCoaches;
    private List<ProfilesDTO.ProfilePlayerSports>? _profilePlayerSports;
    private List<SportsDTO.SportSubcategories>? _sportSubcategories;
    private List<SportsDTO.SportGenderCategories>? _sportGenderCategories;

    // Variables
    private string? _dialogHeader;
    private string? _firstnameValue;
    private string? _lastnameValue;
    private int? _createdEventID;
    private int? _selectedGenderCategoryIDValue;
    private int? _selectedSportSubcategoryIDValue;
    private IEnumerable<int?>? _selectedCoachIDs;

    // Disable addition button if values are empty
    private bool _editPlayerButtonDisabled =>
    !_selectedGenderCategoryIDValue.HasValue ||
    !_selectedSportSubcategoryIDValue.HasValue ||
    !(_selectedCoachIDs?.Any() ?? false);

    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class ProfilesDTO
    {
        public class ProfilePlayers
        {
            public int ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolID { get; set; }
            public int? SportID { get; set; }
        }

        public class ProfilePlayerSports
        {
            public int ID { get; set; }
            public int ProfilePlayerID { get; set; }
            public int? SportSubcategoryID { get; set; }
        }

        public class ProfilePlayerSportCoaches
        {
            public int ID { get; set; }
            public int? ProfilePlayerSportID { get; set; }
            public int? ProfileCoachID { get; set; }
        }

        public class ProfileCoaches
        {
            public int ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolRegionID { get; set; }
        }
    }

    public class SportsDTO
    {
        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }

        public class SportGenderCategories
        {
            public int ID { get; set; }
            public string? Gender { get; set; }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetProfilePlayerOnDialogOpenAsync(selectedPlayerID);
        await GetProfileCoachesOnDialogOpenAsync();
        await GetSportGenderCategoriesOnDialogOpenAsync();
        await GetSportSubcategoryOnDialogOpenAsync();

        if (_profilePlayers?.Any() == true
         && _profileCoaches?.Any() == true
         && _sportGenderCategories?.Any() == true
         && _sportSubcategories?.Any() == true)
        {
            _isLoaded = true;
        }
    }

    private async Task GetProfilePlayerOnDialogOpenAsync(int? profilePlayerID)
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Player?id={profilePlayerID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _profilePlayers = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfilePlayers>>(responseStream, options);

            if (_profilePlayers != null)
            {
                var selectedCoach = _profilePlayers.First();
                // Title
                _dialogHeader = $"{selectedCoach.FirstName} {selectedCoach.LastName}";

                // Data
                _firstnameValue = selectedCoach.FirstName;
                _lastnameValue = selectedCoach.LastName;
            }

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetProfilePlayerSportsOnDialogOpenAsync(int? profilePlayerID)
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Player/Sports/?profilePlayerID={profilePlayerID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _profilePlayerSports = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfilePlayerSports>>(responseStream, options);

            // if (_profilePlayerSports != null)
            // {
            //     var selectedSports = _profilePlayerSports.First();

            //     Data
            //     _firstnameValue = selectedCoach.FirstName;
            //     _lastnameValue = selectedCoach.LastName;
            // }

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetProfileCoachesOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Coach?schoolRegionID={selectedRegionID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _profileCoaches = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfileCoaches>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportGenderCategoriesOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/GenderCategories ";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportGenderCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportGenderCategories>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportSubcategoryOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Subcategories?sportID={selectedSportID}&schoolLevelID={selectedSchoolLevelID}&sportGenderCategoryID={_selectedGenderCategoryIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportSubcategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportSubcategories>>(responseStream, options);

            if (_sportSubcategories == null || !_sportSubcategories.Any())
            {
                _selectedSportSubcategoryIDValue = null;
            }

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Dialog Actions
    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmPlayerSportAddEventAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
                message: $"Do you confirm addition of sport event for {_firstnameValue} {_lastnameValue}?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await AddPlayerSportEventAsync();

            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    // Add player sport event and coach/es on that event
    private async Task AddPlayerSportEventAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Player/Sports";

            var eventStream = new ProfilesDTO.ProfilePlayerSports
                {
                    ProfilePlayerID = selectedPlayerID,
                    SportSubcategoryID = _selectedSportSubcategoryIDValue,
                };

            var jsonContent = JsonSerializer.Serialize(eventStream);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            HttpResponseMessage httpResponse = await httpClient.PostAsync(url, content);
            httpResponse.EnsureSuccessStatusCode();

            // Deserialize the response to get the newly created ID
            string responseContent = await httpResponse.Content.ReadAsStringAsync();
            var createdEvent = JsonSerializer.Deserialize<ProfilesDTO.ProfilePlayerSports>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            if (createdEvent != null)
            {
                _createdEventID = createdEvent.ID;
            }

            await AddPlayerSportEventCoachesAsync();

            if (httpResponse.IsSuccessStatusCode)
            {
                Snackbar.Add("Player sport event added successfully.", Severity.Success);
                MudDialog?.Close(DialogResult.Ok(true));
            }
            else
            {
                string errorMessage = await httpResponse.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to add sport event: {errorMessage}", Severity.Error);
            }

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error adding data: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddPlayerSportEventCoachesAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Player/Sports/Coaches";

            var eventStream = _selectedCoachIDs?.Where(id => id.HasValue)
                .Select(coachID => new ProfilesDTO.ProfilePlayerSportCoaches
                    {
                        ProfileCoachID = coachID!.Value,
                        ProfilePlayerSportID = _createdEventID,
                    }).ToList();

            var jsonContent = JsonSerializer.Serialize(eventStream);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            HttpResponseMessage httpResponse = await httpClient.PostAsync(url, content);
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error adding data: {ex.Message}", Severity.Error);
        }
    }
}
