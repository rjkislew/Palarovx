@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

@if (_isLoaded == true)
{
    <MudDialog>
        <DialogContent>
            <MudStack Row>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Add" />
                <MudText Typo="Typo.body2">Sport Event for @_dialogHeader</MudText>
            </MudStack>
            <MudDivider Class="mb-5" />
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedGenderCategoryIDValue" Margin="Margin.Dense" Label="Gender Category"
                    ShrinkLabel Variant="Variant.Outlined" Clearable OnClearButtonClick="@(() => _selectedSportSubcategoryIDValue = null)"
                    T="int?" SelectedValuesChanged="@((values) => InvokeAsync(async () => { _selectedSportSubcategoryIDValue = null; await GetSportSubcategoryOnDialogOpenAsync(); }))">
                        <MudVirtualize Items="_sportGenderCategories" Context="gender">
                            <MudSelectItem T="int?" Value="gender.ID">@gender.Gender</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                @{
                    var message = (_sportSubcategories?.Any() != true) ? "No subcategory available for this gender." : null;
                    var disabled = (_sportSubcategories?.Any() != true) ? true : false;
                }
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSportSubcategoryIDValue" Margin="Margin.Dense" HelperText="@($"{message}")" Label="Sport Subcategory" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedGenderCategoryIDValue == null || disabled">
                        <MudVirtualize Items="_sportSubcategories" Context="subCategory">
                            <MudSelectItem T="int?" Value="subCategory.ID">@(subCategory.Subcategory ?? "No Subcategory")</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudSelect @bind-SelectedValues="_selectedCoachIDs" ToStringFunc="@(id => _profileCoaches?.FirstOrDefault(c => c.ID == id) is { } coach ? $"{coach.FirstName} {coach.LastName}" : string.Empty)"
                    T="int?" MultiSelection="true" Margin="Margin.Dense" Label="Coach" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_profileCoaches" Context="coach">
                            <MudSelectItem T="int?" Value="coach.ID">@coach.FirstName @coach.LastName</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                <MudButton Style="text-transform: none" DropShadow="false" OnClick="ConfirmPlayerSportAddEventAsync" Disabled="_editPlayerButtonDisabled">Add</MudButton>
            </MudStack>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <MudProgressLinear Indeterminate="true" Class="my-5" />
        </DialogContent>
    </MudDialog>
}

@code {
    // Requirement for Dialog to work
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    // Passed data from page
    [Parameter]
    public string? selectedPlayerID { get; set; }
    [Parameter]
    public int? selectedSportID { get; set; }
    [Parameter]
    public int? selectedRegionID { get; set; }
    [Parameter]
    public int? selectedSchoolLevelID { get; set; }

    // JSON storage
    private List<ProfilesDTO.ProfilePlayers>? _profilePlayers;
    private List<ProfilesDTO.ProfileCoaches>? _profileCoaches;
    private List<ProfilesDTO.ProfilePlayerSports>? _profilePlayerSports;
    private List<SportsDTO.SportSubcategories>? _sportSubcategories;
    private List<SportsDTO.SportGenderCategories>? _sportGenderCategories;

    // Variables
    private string? _dialogHeader;
    private string? _firstnameValue;
    private string? _lastnameValue;
    private int? _addedPlayerSportEventID;
    private int? _selectedGenderCategoryIDValue;
    private int? _selectedSportSubcategoryIDValue;
    private IEnumerable<int?>? _selectedCoachIDs;

    // Disable addition button if values are empty
    private bool _editPlayerButtonDisabled =>
    !_selectedGenderCategoryIDValue.HasValue ||
    !_selectedSportSubcategoryIDValue.HasValue ||
    !(_selectedCoachIDs?.Any() ?? false);

    // Load dialog if true
    private bool? _isLoaded = false;

    // DTOs
    public class ProfilesDTO
    {
        public class ProfilePlayers
        {
            public int ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolID { get; set; }
            public int? SportID { get; set; }
        }

        public class ProfilePlayerSports
        {
            public int ID { get; set; }
            public string? ProfilePlayerID { get; set; }
            public int? SportSubcategoryID { get; set; }
        }

        public class ProfilePlayerSportCoaches
        {
            public int ID { get; set; }
            public int? ProfilePlayerSportID { get; set; }
            public int? ProfileCoachID { get; set; }
        }

        public class ProfileCoaches
        {
            public int ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolRegionID { get; set; }
        }
    }

    public class SportsDTO
    {
        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }

        public class SportGenderCategories
        {
            public int ID { get; set; }
            public string? Gender { get; set; }
        }
    }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        await GetProfilePlayerOnDialogOpenAsync(selectedPlayerID);
        await GetProfileCoachesOnDialogOpenAsync();
        await GetSportGenderCategoriesOnDialogOpenAsync();
        await GetSportSubcategoryOnDialogOpenAsync();

        if (_profilePlayers?.Any() == true
         && _profileCoaches?.Any() == true
         && _sportGenderCategories?.Any() == true
         && _sportSubcategories?.Any() == true)
        {
            _isLoaded = true;
        }
    }


    private async Task GetProfilePlayerOnDialogOpenAsync(string? profilePlayerID)
    {
        string url = "/Schools/Regions";
        _profilePlayers = await apiService.GetAsync<ProfilesDTO.ProfilePlayers>(url);

        if (_profilePlayers != null)
        {
            var selectedCoach = _profilePlayers.First();
            // Title
            _dialogHeader = $"{selectedCoach.FirstName} {selectedCoach.LastName}";

            // Data
            _firstnameValue = selectedCoach.FirstName;
            _lastnameValue = selectedCoach.LastName;
        }
    }

    private async Task GetProfilePlayerSportsOnDialogOpenAsync(int? profilePlayerID)
    {
        string url = $"/Profiles/Player/Sports/?profilePlayerID={profilePlayerID}";

        _profilePlayerSports = await apiService.GetAsync<ProfilesDTO.ProfilePlayerSports>(url);
    }

    private async Task GetProfileCoachesOnDialogOpenAsync()
    {
        string url = $"/Profiles/Coach?schoolRegionID={selectedRegionID}";

        _profileCoaches = await apiService.GetAsync<ProfilesDTO.ProfileCoaches>(url);
    }

    private async Task GetSportGenderCategoriesOnDialogOpenAsync()
    {
        string url = "/Sports/GenderCategories ";

        _sportGenderCategories = await apiService.GetAsync<SportsDTO.SportGenderCategories>(url);
    }

    private async Task GetSportSubcategoryOnDialogOpenAsync()
    {
        string url = $"/Sports/Subcategories?sportID={selectedSportID}&schoolLevelID={selectedSchoolLevelID}&sportGenderCategoryID={_selectedGenderCategoryIDValue}";

        _sportSubcategories = await apiService.GetAsync<SportsDTO.SportSubcategories>(url);

        if (_sportSubcategories == null || !_sportSubcategories.Any())
        {
            _selectedSportSubcategoryIDValue = null;
        }
    }

    // Dialog Actions
    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmPlayerSportAddEventAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
                message: "Do you confirm addition of sport event for player?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await AddPlayerSportEventAsync();

            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    // Add player sport event and coach/es on that event
    private async Task AddPlayerSportEventAsync()
    {
        var addPlayerSportEvent = new ProfilesDTO.ProfilePlayerSports
            {
                ProfilePlayerID = selectedPlayerID,
                SportSubcategoryID = _selectedSportSubcategoryIDValue,
            };

        string url = "/Profiles/Player/Sports";

        var addedPlayerSportEvent = await apiService.PostAndReadAsync<ProfilesDTO.ProfilePlayerSports>(url, addPlayerSportEvent);

        if (addedPlayerSportEvent != null)
        {
            _addedPlayerSportEventID = addedPlayerSportEvent.ID;

            await AddPlayerSportEventCoachesAsync();

            Snackbar.Add("Sport event for player added successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Error adding sport event for player.", Severity.Error);
        }
    }

    private async Task AddPlayerSportEventCoachesAsync()
    {
        var addPlayerSportEvent = _selectedCoachIDs?.Where(id => id.HasValue)
            .Select(coachID => new ProfilesDTO.ProfilePlayerSportCoaches
                {
                    ProfileCoachID = coachID!.Value,
                    ProfilePlayerSportID = _addedPlayerSportEventID,
                }).ToList();

        string url = "/Profiles/Player/Sports/Coaches";
        var success = await apiService.PostAsync(url, addPlayerSportEvent);
    }
}
