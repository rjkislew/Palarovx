@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject APIService apiService
@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        @if (_profilePlayers != null)
        {
            <MudText Typo="Typo.h6">@_dialogHeader</MudText>
            <MudDivider Class="mb-5" />
            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Player</MudText>
                    <MudDivider />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolRegionIDValue" Margin="Margin.Dense" Label="Region" ShrinkLabel Variant="Variant.Outlined" Clearable OnClearButtonClick="@(() => _selectedSchoolDivisionIDValue = null)">
                        <MudVirtualize Items="_schoolRegions" Context="region">
                            <MudSelectItem T="int?" Value="region.ID">@region.Region (@region.Abbreviation)</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolDivisionIDValue" Margin="Margin.Dense" Label="Division" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolRegionIDValue == null" OnClearButtonClick="@(() => _selectedSchoolLevelIDValue = null)">
                        <MudVirtualize Items="_schoolDivisions" Context="division">
                            <MudSelectItem T="int?" Value="division.ID">@division.Division</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolLevelIDValue" Margin="Margin.Dense" Label="School Level" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolDivisionIDValue == null" OnClearButtonClick="@(() => _selectedSchoolIDValue = null)">
                        <MudVirtualize Items="_schoolLevels" Context="level">
                            <MudSelectItem T="int?" Value="level.ID">@level.Level</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSchoolIDValue" Margin="Margin.Dense" Label="School" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolLevelIDValue == null" OnClearButtonClick="@(() => { _firstnameValue = null; _lastnameValue = null; })">
                        <MudVirtualize Items="_schools" Context="school">
                            <MudSelectItem T="int?" Value="school.ID">@school.School</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_firstnameValue" Immediate Margin="Margin.Dense" Label="Firstname" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolIDValue == null" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_lastnameValue" Immediate Margin="Margin.Dense" Label="Lastname" ShrinkLabel Variant="Variant.Outlined" Clearable Disabled="_selectedSchoolIDValue == null" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Sport</MudText>
                    <MudDivider />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSportCategoryIDValue" Margin="Margin.Dense" Label="Category" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_sportCategories" Context="sportCategory">
                            <MudSelectItem T="int?" Value="sportCategory.ID">@sportCategory.Category</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="_selectedSportIDValue" Margin="Margin.Dense" Label="Sport" ShrinkLabel Variant="Variant.Outlined" Clearable>
                        <MudVirtualize Items="_sports" Context="sport">
                            <MudSelectItem T="int?" Value="sport.ID">@sport.Sport</MudSelectItem>
                        </MudVirtualize>
                    </MudSelect>
                </MudItem>
            </MudGrid>
            <MudDivider Class="mt-10 mb-2" />
            <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                <MudButton Style="text-transform: none" Color="Color.Error" DropShadow="false" OnClick="ConfirmDeleteProfileCoachAsync">Delete</MudButton>
                <MudStack Row Justify="Justify.SpaceBetween">
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="Cancel">Cancel</MudButton>
                    <MudButton Style="text-transform: none" DropShadow="false" OnClick="ConfirmUpdateProfileCoachAsync" Disabled="_editPlayerButtonDisabled">Update</MudButton>
                </MudStack>
            </MudStack>
        }
        else
        {
            <MudText Typo="Typo.h6">Loading Coach Profile Settings</MudText>
            <MudProgressLinear Indeterminate="true" />
        }
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    private void Cancel() => MudDialog?.Cancel();

    private async Task ConfirmDeleteProfileCoachAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm deletion of school?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteProfileCoachAsync();
            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    private async Task ConfirmUpdateProfileCoachAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Notice",
            message: "Do you confirm changes of school?",
            yesText: "Yes",
            cancelText: "Cancel");

        if (result == true)
        {
            await UpdateProfileCoachAsync();
            MudDialog?.Close(DialogResult.Ok(true)); // Close MudDialog after updating
        }
    }

    [Parameter]
    public int selectedPlayerID { get; set; }

    private List<ProfilesDTO.ProfilePlayers>? _profilePlayers;
    private List<ProfilesDTO.ProfilePlayerSports>? _profilePlayerSports;
    private List<ProfilesDTO.ProfilePlayerSportCoaches>? _profilePlayerSportCoaches;

    private List<SchoolsDTO.SchoolRegions>? _schoolRegions;
    private List<SchoolsDTO.SchoolDivisions>? _schoolDivisions;
    private List<SchoolsDTO.SchoolLevels>? _schoolLevels;
    private List<SchoolsDTO.Schools>? _schools;

    private List<SportsDTO.SportCategories>? _sportCategories;
    private List<SportsDTO.Sports>? _sports;
    private List<SportsDTO.SportSubcategories>? _sportSubcategories;
    private List<SportsDTO.SportGenderCategories>? _sportGenderCategories;

    private string? _dialogHeader;
    private int? _selectedSchoolRegionIDValue;
    private int? _selectedSchoolDivisionIDValue;
    private int? _selectedSchoolLevelIDValue;
    private int? _selectedSchoolIDValue;
    private int? _selectedPlayerProfileSportsIDValue;
    private string? _firstnameValue;
    private string? _lastnameValue;

    private int? _selectedSportCategoryIDValue;
    private int? _selectedSportIDValue;
    private int? _selectedSportSubCategoryIDValue;
    private int? _selectedSportGenderIDValue;

    private bool _editPlayerButtonDisabled =>
    string.IsNullOrEmpty(_firstnameValue) ||
    string.IsNullOrEmpty(_lastnameValue) ||
    !_selectedSchoolRegionIDValue.HasValue ||
    !_selectedSchoolIDValue.HasValue;


    public class ProfilesDTO
    {
        public class ProfilePlayers
        {
            public int ID { get; set; }
            public string? FirstName { get; set; }
            public string? LastName { get; set; }
            public int? SchoolID { get; set; }
        }

        public class ProfilePlayerSports
        {
            public int ID { get; set; }
            public int ProfilePlayerID { get; set; }
            public int? SportSubcategoryID { get; set; }
            public List<ProfilePlayerSportCoaches>? ProfilePlayerSportCoachesList { get; set; }
        }

        public class ProfilePlayerSportCoaches
        {
            public int ID { get; set; }
            public int? ProfileCoachID { get; set; }
            public int? ProfilePlayerSportID { get; set; }
        }
    }

    public class SchoolsDTO
    {
        public class Schools
        {
            public int ID { get; set; }
            public string? School { get; set; }
            public int? SchoolDivisionID { get; set; }
            public int? SchoolLevelsID { get; set; }
        }

        public class SchoolRegions
        {
            public int ID { get; set; }
            public string? Region { get; set; }
            public string? Abbreviation { get; set; }
        }

        public class SchoolDivisions
        {
            public int ID { get; set; }
            public string? Division { get; set; }
            public int? SchoolRegionID { get; set; }
        }

        public class SchoolLevels
        {
            public int ID { get; set; }
            public string? Level { get; set; }
        }
    }

    public class SportsDTO
    {
        public class SportCategories
        {
            public int ID { get; set; }
            public string? Category { get; set; }
        }

        public class Sports
        {
            public int ID { get; set; }
            public string? Sport { get; set; }
            public string? Description { get; set; }
            public int? SportCategoryID { get; set; }
        }

        public class SportSubcategories
        {
            public int ID { get; set; }
            public string? Subcategory { get; set; }
            public int? SportID { get; set; }
            public int? SportGenderCategoryID { get; set; }
            public int? SchoolLevelID { get; set; }
        }

        public class SportGenderCategories
        {
            public int ID { get; set; }
            public string? Gender { get; set; }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await GetProfilePlayerOnDialogOpenAsync(selectedPlayerID);
        await GetProfilePlayerSportsOnDialogOpenAsync(selectedPlayerID);

        await GetSportCategoryOnDialogOpenAsync();
        await GetSportOnDialogOpenAsync();
        await GetSportSubcategoryOnDialogOpenAsync();
        await GetSportGenderCategoryOnDialogOpenAsync();
    }

    // Player

    private async Task GetProfilePlayerOnDialogOpenAsync(int profilePlayerID)
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Player?id={profilePlayerID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _profilePlayers = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfilePlayers>>(responseStream, options);

            if (_profilePlayers != null)
            {
                var selectedCoach = _profilePlayers.First();
                // Title
                _dialogHeader = $"Update: {selectedCoach.FirstName} {selectedCoach.LastName}";

                // Data
                _firstnameValue = selectedCoach.FirstName;
                _lastnameValue = selectedCoach.LastName;
                _selectedSchoolIDValue = selectedCoach.SchoolID;
            }

            await GetSchoolOnDialogOpenAsync();

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetProfilePlayerSportsOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Player/Sports/Coaches?profilePlayerID={_selectedPlayerProfileSportsIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _profilePlayerSports = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfilePlayerSports>>(responseStream, options);

            if (_profilePlayerSports != null)
            {
                var profilePlayerSports = _profilePlayerSports.First();

                _selectedPlayerProfileSportsIDValue = profilePlayerSports.ID;
            }

            await GetSchoolOnDialogOpenAsync();

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetProfilePlayerSportsOnDialogOpenAsync(int profilePlayerID)
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Profiles/Player/Sports?profilePlayerID={profilePlayerID}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _profilePlayerSports = await JsonSerializer.DeserializeAsync<List<ProfilesDTO.ProfilePlayerSports>>(responseStream, options);

            await GetSchoolOnDialogOpenAsync();

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schools = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.Schools>>(responseStream, options);

            if (_schools != null)
            {
                var school = _schools.First();

                _selectedSchoolDivisionIDValue = school.SchoolDivisionID;
                _selectedSchoolLevelIDValue = school.SchoolLevelsID;
            }


            await GetSchoolDivisionOnDialogOpenAsync();
            await GetSchoolLevelOnDialogOpenAsync();

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolLevelOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Levels?id={_selectedSchoolLevelIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolLevels = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.SchoolLevels>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchoolDivisionOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Divisions?id={_selectedSchoolDivisionIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolDivisions = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.SchoolDivisions>>(responseStream, options);

            if (_schoolDivisions != null)
            {
                var schoolDivision = _schoolDivisions.First();

                _selectedSchoolRegionIDValue = schoolDivision.SchoolRegionID;
            }

            await GetSchooRegionOnDialogOpenAsync();

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSchooRegionOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Schools/Regions?id={_selectedSchoolRegionIDValue}";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _schoolRegions = await JsonSerializer.DeserializeAsync<List<SchoolsDTO.SchoolRegions>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Sports

    private async Task GetSportCategoryOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Categories";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportCategories>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sports = await JsonSerializer.DeserializeAsync<List<SportsDTO.Sports>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportSubcategoryOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/Subcategories";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportSubcategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportSubcategories>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetSportGenderCategoryOnDialogOpenAsync()
    {
        try
        {
            string url = $"{apiService.Palaro2026API}/Sports/GenderCategories";

            HttpResponseMessage httpResponse = await httpClient.GetAsync(url);
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _sportGenderCategories = await JsonSerializer.DeserializeAsync<List<SportsDTO.SportGenderCategories>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task UpdateProfileCoachAsync()
    {
        try
        {
            if (selectedPlayerID == 0) return;

            var updatedStream = new ProfilesDTO.ProfilePlayers
                {
                    ID = selectedPlayerID,
                    FirstName = _firstnameValue,
                    LastName = _lastnameValue,
                    SchoolID = _selectedSchoolIDValue
                };

            string url = $"{apiService.Palaro2026API}/Profiles/Players/{selectedPlayerID}";
            var content = new StringContent(JsonSerializer.Serialize(updatedStream), Encoding.UTF8, "application/json");

            HttpResponseMessage response = await httpClient.PutAsync(url, content);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("School details updated successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error updating school: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteProfileCoachAsync()
    {
        try
        {
            if (selectedPlayerID == 0) return;

            string url = $"{apiService.Palaro2026API}/Profiles/Players/{selectedPlayerID}";

            HttpResponseMessage response = await httpClient.DeleteAsync(url);
            response.EnsureSuccessStatusCode();

            Snackbar.Add("School deleted successfully.", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error deleting school: {ex.Message}", Severity.Error);
        }
    }
}
